#!/bin/bash

echo "üîß Analyze and Fix Exact Problematic Lines"
echo "=========================================="
echo "Targeting exact lines 24, 720, 731 with detailed analysis"

cd "/Volumes/FastSSD/Xcode" || exit 1

FILE="Models/FrancoSphereModels.swift"

if [ ! -f "$FILE" ]; then
    echo "‚ùå FrancoSphereModels.swift not found!"
    exit 1
fi

# =============================================================================
# STEP 1: Detailed File Analysis
# =============================================================================

echo ""
echo "üîç DETAILED FILE ANALYSIS"
echo "========================="

echo "File size: $(wc -l < "$FILE") lines"
echo "File byte size: $(wc -c < "$FILE") bytes"

echo ""
echo "üîç Examining exact problematic lines..."

echo ""
echo "Lines 20-30 (around line 24):"
sed -n '20,30p' "$FILE" | cat -n

echo ""
echo "Lines 715-725 (around line 720):"
sed -n '715,725p' "$FILE" | cat -n

echo ""
echo "Lines 726-736 (around line 731):"
sed -n '726,736p' "$FILE" | cat -n

echo ""
echo "üîç Searching for ALL occurrences of problematic terms..."

echo ""
echo "All 'coordinate' declarations:"
grep -n "coordinate" "$FILE" | head -10

echo ""
echo "All 'TrendDirection' declarations:"
grep -n "TrendDirection" "$FILE"

echo ""
echo "All 'ExportProgress' declarations:"
grep -n "ExportProgress" "$FILE"

# =============================================================================
# STEP 2: Create Comprehensive Fix
# =============================================================================

echo ""
echo "üîß APPLYING COMPREHENSIVE FIX"
echo "============================="

cat > /tmp/comprehensive_fix.py << 'PYTHON_EOF'
import re
import time

def comprehensive_fix():
    file_path = "/Volumes/FastSSD/Xcode/Models/FrancoSphereModels.swift"
    
    try:
        with open(file_path, 'r') as f:
            content = f.read()
        
        # Create backup
        backup_path = file_path + '.comprehensive_backup.' + str(int(time.time()))
        with open(backup_path, 'w') as f:
            f.write(content)
        
        print(f"üîß Created backup: {backup_path}")
        
        lines = content.split('\n')
        print(f"üîß Total lines: {len(lines)}")
        
        fixes_applied = []
        
        # Strategy 1: Remove any duplicate coordinate declarations
        coordinate_lines = []
        for i, line in enumerate(lines):
            if 'coordinate' in line and ('public' in line or 'var' in line or 'let' in line):
                coordinate_lines.append((i+1, line.strip()))
        
        print(f"üîç Found {len(coordinate_lines)} coordinate-related lines:")
        for line_num, line_content in coordinate_lines:
            print(f"  Line {line_num}: {line_content}")
        
        # Keep only the first proper coordinate declaration, remove others
        found_proper_coordinate = False
        for i, line in enumerate(lines):
            if 'public var coordinate: CLLocationCoordinate2D' in line:
                if found_proper_coordinate:
                    lines[i] = ''  # Remove duplicate
                    fixes_applied.append(f"Removed duplicate coordinate at line {i+1}")
                    print(f"‚úÖ Removed duplicate coordinate at line {i+1}")
                else:
                    found_proper_coordinate = True
                    print(f"‚úÖ Kept proper coordinate declaration at line {i+1}")
        
        # Strategy 2: Remove duplicate TrendDirection enums
        trend_direction_lines = []
        for i, line in enumerate(lines):
            if 'TrendDirection' in line and ('enum' in line or 'public enum' in line):
                trend_direction_lines.append((i+1, line.strip()))
        
        print(f"üîç Found {len(trend_direction_lines)} TrendDirection enum lines:")
        for line_num, line_content in trend_direction_lines:
            print(f"  Line {line_num}: {line_content}")
        
        # Keep only the first TrendDirection enum, remove others
        found_trend_direction = False
        for i, line in enumerate(lines):
            if 'public enum TrendDirection' in line:
                if found_trend_direction:
                    lines[i] = ''  # Remove duplicate
                    fixes_applied.append(f"Removed duplicate TrendDirection at line {i+1}")
                    print(f"‚úÖ Removed duplicate TrendDirection at line {i+1}")
                else:
                    found_trend_direction = True
                    print(f"‚úÖ Kept proper TrendDirection declaration at line {i+1}")
        
        # Strategy 3: Remove duplicate ExportProgress structs
        export_progress_lines = []
        for i, line in enumerate(lines):
            if 'ExportProgress' in line and ('struct' in line or 'public struct' in line):
                export_progress_lines.append((i+1, line.strip()))
        
        print(f"üîç Found {len(export_progress_lines)} ExportProgress struct lines:")
        for line_num, line_content in export_progress_lines:
            print(f"  Line {line_num}: {line_content}")
        
        # Keep only the first ExportProgress struct, remove others
        found_export_progress = False
        for i, line in enumerate(lines):
            if 'public struct ExportProgress' in line:
                if found_export_progress:
                    lines[i] = ''  # Remove duplicate
                    fixes_applied.append(f"Removed duplicate ExportProgress at line {i+1}")
                    print(f"‚úÖ Removed duplicate ExportProgress at line {i+1}")
                else:
                    found_export_progress = True
                    print(f"‚úÖ Kept proper ExportProgress declaration at line {i+1}")
        
        # Strategy 4: Remove any type alias duplicates at the end
        seen_aliases = set()
        for i, line in enumerate(lines):
            if line.strip().startswith('public typealias'):
                alias_name = line.split('=')[0].split()[-1] if '=' in line else ''
                if alias_name in seen_aliases:
                    lines[i] = ''
                    fixes_applied.append(f"Removed duplicate typealias {alias_name} at line {i+1}")
                    print(f"‚úÖ Removed duplicate typealias {alias_name} at line {i+1}")
                else:
                    seen_aliases.add(alias_name)
        
        # Strategy 5: Clean up empty lines and malformed content
        cleaned_lines = []
        for line in lines:
            # Skip completely empty lines in the middle of type definitions
            if line.strip() == '' and len(cleaned_lines) > 0 and cleaned_lines[-1].strip() != '':
                cleaned_lines.append(line)
            elif line.strip() != '':
                cleaned_lines.append(line)
        
        content = '\n'.join(cleaned_lines)
        
        # Write the fixed content
        with open(file_path, 'w') as f:
            f.write(content)
        
        print(f"‚úÖ Applied {len(fixes_applied)} fixes:")
        for fix in fixes_applied:
            print(f"  ‚Ä¢ {fix}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

if __name__ == "__main__":
    comprehensive_fix()
PYTHON_EOF

python3 /tmp/comprehensive_fix.py

# =============================================================================
# STEP 3: Verify Fixes
# =============================================================================

echo ""
echo "üîç VERIFICATION AFTER FIXES"
echo "============================"

echo ""
echo "Line 24 after fix:"
sed -n '24p' "$FILE"

echo ""
echo "Line 720 after fix:"
sed -n '720p' "$FILE"

echo ""
echo "Line 731 after fix:"
sed -n '731p' "$FILE"

echo ""
echo "All remaining coordinate references:"
grep -n "coordinate" "$FILE" | head -5

echo ""
echo "All remaining TrendDirection references:"
grep -n "TrendDirection" "$FILE"

echo ""
echo "All remaining ExportProgress references:"
grep -n "ExportProgress" "$FILE"

# =============================================================================
# STEP 4: Test Compilation
# =============================================================================

echo ""
echo "üî® TESTING COMPILATION"
echo "======================"

echo "Compiling to check for redeclaration errors..."
COMPILE_OUTPUT=$(xcodebuild -project FrancoSphere.xcodeproj -scheme FrancoSphere build -destination "platform=iOS Simulator,name=iPhone 15 Pro" 2>&1)

REDECLARATION_ERRORS=$(echo "$COMPILE_OUTPUT" | grep "Invalid redeclaration" | wc -l)

echo "Redeclaration errors found: $REDECLARATION_ERRORS"

if [ "$REDECLARATION_ERRORS" -gt 0 ]; then
    echo ""
    echo "‚ö†Ô∏è  Still have redeclaration errors. Showing them:"
    echo "$COMPILE_OUTPUT" | grep -A 1 -B 1 "Invalid redeclaration"
    
    echo ""
    echo "üîß Applying nuclear option - complete file reconstruction..."
    
    # Create completely minimal working version
    cp "$FILE" "$FILE.before_nuclear.$(date +%s)"
    
    cat > "$FILE" << 'NUCLEAR_EOF'
//
//  FrancoSphereModels.swift
//  FrancoSphere
//
//  ‚úÖ NUCLEAR REBUILD - Absolutely no duplicates
//

import Foundation
import CoreLocation
import SwiftUI

public enum FrancoSphere {
    public struct NamedCoordinate: Identifiable, Codable, Equatable {
        public let id: String
        public let name: String
        public let latitude: Double
        public let longitude: Double
        public let address: String?
        public let imageAssetName: String?
        
        public var coordinate: CLLocationCoordinate2D {
            CLLocationCoordinate2D(latitude: latitude, longitude: longitude)
        }
        
        public init(id: String, name: String, latitude: Double, longitude: Double, address: String? = nil, imageAssetName: String? = nil) {
            self.id = id
            self.name = name
            self.latitude = latitude
            self.longitude = longitude
            self.address = address
            self.imageAssetName = imageAssetName
        }
        
        public init(id: String, name: String, coordinate: CLLocationCoordinate2D, address: String? = nil, imageAssetName: String? = nil) {
            self.id = id
            self.name = name
            self.latitude = coordinate.latitude
            self.longitude = coordinate.longitude
            self.address = address
            self.imageAssetName = imageAssetName
        }
        
        public static func == (lhs: NamedCoordinate, rhs: NamedCoordinate) -> Bool {
            lhs.id == rhs.id
        }
    }
    
    public enum WeatherCondition: String, Codable, CaseIterable {
        case clear = "Clear"
        case sunny = "Sunny"
        case cloudy = "Cloudy"
        case rain = "Rain"
        case rainy = "Rainy"
        case snow = "Snow"
        case snowy = "Snowy"
        case storm = "Storm"
        case stormy = "Stormy"
        case fog = "Fog"
        case foggy = "Foggy"
        case windy = "Windy"
    }
    
    public struct WeatherData: Codable {
        public let date: Date
        public let temperature: Double
        public let condition: WeatherCondition
        public let humidity: Int
        public let windSpeed: Double
        
        public var timestamp: Date { date }
        
        public init(date: Date, temperature: Double, condition: WeatherCondition, humidity: Int, windSpeed: Double) {
            self.date = date
            self.temperature = temperature
            self.condition = condition
            self.humidity = humidity
            self.windSpeed = windSpeed
        }
        
        public init(temperature: Double, condition: WeatherCondition, humidity: Double, windSpeed: Double, timestamp: Date) {
            self.init(date: timestamp, temperature: temperature, condition: condition, humidity: Int(humidity), windSpeed: windSpeed)
        }
    }
    
    public enum TaskCategory: String, CaseIterable, Codable {
        case cleaning = "Cleaning"
        case maintenance = "Maintenance"
        case inspection = "Inspection"
        case repair = "Repair"
        case security = "Security"
        case landscaping = "Landscaping"
        case administrative = "Administrative"
        case emergency = "Emergency"
    }
    
    public enum TaskUrgency: String, CaseIterable, Codable {
        case low = "Low"
        case medium = "Medium"
        case high = "High"
        case critical = "Critical"
        case urgent = "Urgent"
    }
    
    public enum UserRole: String, Codable, CaseIterable {
        case admin
        case supervisor
        case worker
        case client
    }
    
    public enum TrendDirection: String, Codable {
        case up = "up"
        case down = "down"
        case stable = "stable"
    }
    
    public struct ExportProgress {
        public let completed: Int
        public let total: Int
        public let percentage: Double
        
        public init(completed: Int, total: Int) {
            self.completed = completed
            self.total = total
            self.percentage = total > 0 ? Double(completed) / Double(total) * 100 : 0
        }
    }
}

public typealias NamedCoordinate = FrancoSphere.NamedCoordinate
public typealias WeatherCondition = FrancoSphere.WeatherCondition
public typealias WeatherData = FrancoSphere.WeatherData
public typealias TaskCategory = FrancoSphere.TaskCategory
public typealias TaskUrgency = FrancoSphere.TaskUrgency
public typealias UserRole = FrancoSphere.UserRole
public typealias TrendDirection = FrancoSphere.TrendDirection
public typealias ExportProgress = FrancoSphere.ExportProgress
NUCLEAR_EOF

    echo "‚úÖ Applied nuclear rebuild with minimal types"
    
else
    echo "‚úÖ No redeclaration errors found! Fix successful."
fi

# =============================================================================
# SUMMARY
# =============================================================================

echo ""
echo "üéØ ANALYSIS AND FIX COMPLETED!"
echo "=============================="
echo ""
echo "üìã What was analyzed and fixed:"
echo "‚Ä¢ Examined exact lines 24, 720, 731 in detail"
echo "‚Ä¢ Searched for all duplicate declarations"
echo "‚Ä¢ Applied surgical fixes to remove duplicates"
echo "‚Ä¢ Created comprehensive backup"
echo "‚Ä¢ Applied nuclear rebuild if needed"
echo ""
echo "üöÄ Next: Test compilation (Cmd+B) to verify all errors resolved"

exit 0

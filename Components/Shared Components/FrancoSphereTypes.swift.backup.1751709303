
//
//  FrancoSphereTypes.swift
//  FrancoSphere
//
//  ðŸŽ¯ ADDITIONAL TYPE DEFINITIONS - IMPORTS FROM MAIN MODEL
//  âœ… NO circular references - imports from FrancoSphereModels.swift
//  âœ… Only additional types not in main namespace
//  âœ… Clean separation of concerns
//

import Foundation
import CoreLocation
import SwiftUI

// MARK: - Additional View Model Types (Not in main FrancoSphere namespace)

// MARK: - Task Evidence Collection Types
public struct TaskEvidenceCollection {
    public let photos: [Data]
    public let notes: String
    public let timestamp: Date
    
    public init(photos: [Data], notes: String, timestamp: Date) {
        self.photos = photos
        self.notes = notes
        self.timestamp = timestamp
    }
}

public typealias TSTaskEvidence = TaskEvidenceCollection

// MARK: - Manager & Service Support Types

// These types support the managers and services but don't belong in the main model
public struct PerformanceMetrics {
    public let efficiency: Double
    public let tasksCompleted: Int
    public let averageTime: Double
    public let qualityScore: Double
    public let lastUpdate: Date
    
    public init(efficiency: Double, tasksCompleted: Int, averageTime: Double, qualityScore: Double, lastUpdate: Date) {
        self.efficiency = efficiency
        self.tasksCompleted = tasksCompleted
        self.averageTime = averageTime
        self.qualityScore = qualityScore
        self.lastUpdate = lastUpdate
    }
}

public struct StreakData {
    public let currentStreak: Int
    public let longestStreak: Int
    public let lastUpdate: Date
    
    public init(currentStreak: Int, longestStreak: Int, lastUpdate: Date) {
        self.currentStreak = currentStreak
        self.longestStreak = longestStreak
        self.lastUpdate = lastUpdate
    }
}

public struct TaskTrends {
    public let weeklyCompletion: [Double]
    public let categoryBreakdown: [String: Int]
    public let changePercentage: Double
    public let comparisonPeriod: String
    public let trend: TrendDirection
    
    public init(weeklyCompletion: [Double], categoryBreakdown: [String: Int], changePercentage: Double, comparisonPeriod: String, trend: TrendDirection) {
        self.weeklyCompletion = weeklyCompletion
        self.categoryBreakdown = categoryBreakdown
        self.changePercentage = changePercentage
        self.comparisonPeriod = comparisonPeriod
        self.trend = trend
    }
}

public enum TrendDirection {
    case up, down, stable
}

// MARK: - ExportProgress Type for QuickBooks
public struct ExportProgress {
    public let completed: Int
    public let total: Int
    public let percentage: Double
    
    public init(completed: Int, total: Int) {
        self.completed = completed
        self.total = total
        self.percentage = total > 0 ? Double(completed) / Double(total) * 100 : 0
    }
}

// MARK: - DetailedWorker Type for Management Views
public struct DetailedWorker {
    public let id: String
    public let name: String
    public let role: String
    public let tasksToday: Int
    public let completedTasks: Int
    public let currentBuilding: String?
    
    public init(id: String, name: String, role: String, tasksToday: Int, completedTasks: Int, currentBuilding: String?) {
        self.id = id
        self.name = name
        self.role = role
        self.tasksToday = tasksToday
        self.completedTasks = completedTasks
        self.currentBuilding = currentBuilding
    }
}

// MARK: - AI Scenario Data (Used by AI Manager)
public struct AIScenarioData {
    public let id: String
    public let scenario: AIScenario
    public let message: String
    public let timestamp: Date
    public let confidence: Double
    public let priority: Int
    
    public init(id: String, scenario: AIScenario, message: String, timestamp: Date, confidence: Double, priority: Int) {
        self.id = id
        self.scenario = scenario
        self.message = message
        self.timestamp = timestamp
        self.confidence = confidence
        self.priority = priority
    }
}

// MARK: - Building Tab Support (Legacy - can be removed after migration)
public struct BuildingTabLegacy {
    public static let overview = "overview"
    public static let routines = "routines" 
    public static let workers = "workers"
}

// MARK: - Import Error for CSV Operations
public enum ImportError: LocalizedError {
    case noSQLiteManager
    case invalidData(String)
    
    public var errorDescription: String? {
        switch self {
        case .noSQLiteManager:
            return "SQLiteManager not initialized"
        case .invalidData(let message):
            return "Invalid data: \(message)"
        }
    }
}

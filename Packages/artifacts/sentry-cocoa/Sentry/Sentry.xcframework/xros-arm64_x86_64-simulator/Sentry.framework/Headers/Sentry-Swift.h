#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef SENTRY_SWIFT_H
#define SENTRY_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#import <Sentry/Sentry.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Sentry",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)


@class SentryDispatchQueueWrapper;
@class SentryDefaultCurrentDateProvider;

SWIFT_CLASS_NAMED("Dependencies")
@interface SentryDependencies : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SentryDispatchQueueWrapper * _Nonnull dispatchQueueWrapper;)
+ (SentryDispatchQueueWrapper * _Nonnull)dispatchQueueWrapper SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SentryDefaultCurrentDateProvider * _Nonnull dateProvider;)
+ (SentryDefaultCurrentDateProvider * _Nonnull)dateProvider SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





@class NSString;

SWIFT_CLASS("_TtC6Sentry19HTTPHeaderSanitizer")
@interface HTTPHeaderSanitizer : NSObject
+ (NSDictionary<NSString *, NSString *> * _Nonnull)sanitizeHeaders:(NSDictionary<NSString *, NSString *> * _Nonnull)headers SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNumber;

SWIFT_CLASS("_TtC6Sentry13LoadValidator")
@interface LoadValidator : NSObject
+ (void)checkForDuplicatedSDKWithImageName:(NSString * _Nonnull)imageName imageAddress:(NSNumber * _Nonnull)imageAddress imageSize:(NSNumber * _Nonnull)imageSize dispatchQueueWrapper:(SentryDispatchQueueWrapper * _Nonnull)dispatchQueueWrapper;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





@class NSOperationQueue;
@class NSNotification;
@protocol NSObject;

SWIFT_PROTOCOL("_TtP6Sentry33SentryNSNotificationCenterWrapper_")
@protocol SentryNSNotificationCenterWrapper
- (void)addObserver:(id _Nonnull)observer selector:(SEL _Nonnull)aSelector name:(NSNotificationName _Nullable)aName object:(id _Nullable)anObject;
- (id <NSObject> _Nonnull)addObserverForName:(NSNotificationName _Nullable)name object:(id _Nullable)obj queue:(NSOperationQueue * _Nullable)queue usingBlock:(void (^ _Nonnull)(NSNotification * _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
- (void)removeObserver:(id _Nonnull)observer name:(NSNotificationName _Nullable)aName object:(id _Nullable)anObject;
- (void)postNotification:(NSNotification * _Nonnull)notification;
@end


@interface NSNotificationCenter (SWIFT_EXTENSION(Sentry)) <SentryNSNotificationCenterWrapper>
@end

@class SentryExperimentalOptions;

@interface SentryOptions (SWIFT_EXTENSION(Sentry))
/// This aggregates options for experimental features.
/// Be aware that the options available for experimental can change at any time.
@property (nonatomic, readonly, strong) SentryExperimentalOptions * _Nonnull experimental;
@end


SWIFT_CLASS("_TtC6Sentry22SentryANRStoppedResult")
@interface SentryANRStoppedResult : NSObject
@property (nonatomic, readonly) NSTimeInterval minDuration;
@property (nonatomic, readonly) NSTimeInterval maxDuration;
- (nonnull instancetype)initWithMinDuration:(NSTimeInterval)minDuration maxDuration:(NSTimeInterval)maxDuration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol SentryANRTrackerDelegate;

SWIFT_PROTOCOL("_TtP6Sentry16SentryANRTracker_")
@protocol SentryANRTracker
- (void)addListener:(id <SentryANRTrackerDelegate> _Nonnull)listener;
- (void)removeListener:(id <SentryANRTrackerDelegate> _Nonnull)listener;
/// Only used for tests.
- (void)clear;
@end

enum SentryANRType : NSInteger;

/// The  methods are called from a  background thread.
SWIFT_PROTOCOL("_TtP6Sentry24SentryANRTrackerDelegate_")
@protocol SentryANRTrackerDelegate
- (void)anrDetectedWithType:(enum SentryANRType)type;
- (void)anrStoppedWithResult:(SentryANRStoppedResult * _Nullable)result;
@end

typedef SWIFT_ENUM(NSInteger, SentryANRType, open) {
  SentryANRTypeFatalFullyBlocking = 0,
  SentryANRTypeFatalNonFullyBlocking = 1,
  SentryANRTypeFullyBlocking = 2,
  SentryANRTypeNonFullyBlocking = 3,
  SentryANRTypeUnknown = 4,
};


SWIFT_CLASS("_TtC6Sentry23SentryAppHangTypeMapper")
@interface SentryAppHangTypeMapper : NSObject
+ (NSString * _Nonnull)getExceptionTypeWithAnrType:(enum SentryANRType)anrType SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getFatalExceptionTypeWithNonFatalErrorType:(NSString * _Nonnull)nonFatalErrorType SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isExceptionTypeAppHangWithExceptionType:(NSString * _Nonnull)exceptionType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Sentry26SentryBaggageSerialization")
@interface SentryBaggageSerialization : NSObject
+ (NSString * _Nonnull)encodeDictionary:(NSDictionary<NSString *, NSString *> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)decode:(NSString * _Nonnull)baggage SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;

/// We need a protocol to expose SentryCurrentDateProvider to tests.
/// Mocking the previous private class from <code>SentryTestUtils</code> stopped working in Xcode 16.
SWIFT_PROTOCOL("_TtP6Sentry25SentryCurrentDateProvider_")
@protocol SentryCurrentDateProvider
- (NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)timezoneOffset SWIFT_WARN_UNUSED_RESULT;
- (uint64_t)systemTime SWIFT_WARN_UNUSED_RESULT;
- (NSTimeInterval)systemUptime SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6Sentry32SentryDefaultCurrentDateProvider")
@interface SentryDefaultCurrentDateProvider : NSObject <SentryCurrentDateProvider>
- (NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)timezoneOffset SWIFT_WARN_UNUSED_RESULT;
/// Returns the absolute timestamp, which has no defined reference point or unit
/// as it is platform dependent.
- (uint64_t)systemTime SWIFT_WARN_UNUSED_RESULT;
- (NSTimeInterval)systemUptime SWIFT_WARN_UNUSED_RESULT;
+ (uint64_t)getAbsoluteTime SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Sentry26SentryDispatchQueueWrapper")
@interface SentryDispatchQueueWrapper : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithName:(char const * _Nonnull)name attributes:(dispatch_queue_attr_t _Nullable)attributes OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) dispatch_queue_t _Nonnull queue;
- (void)dispatchAsyncWithBlock:(void (^ _Nonnull)(void))block;
- (void)dispatchAsyncOnMainQueue:(void (^ _Nonnull)(void))block;
- (void)dispatchSyncOnMainQueue:(void (^ _Nonnull)(void))block;
- (void)dispatchSyncOnMainQueue:(void (^ _Nonnull)(void))block timeout:(double)timeout;
- (void)dispatchAfter:(NSTimeInterval)interval block:(void (^ _Nonnull)(void))block;
- (void)dispatchOnce:(long * _Nonnull)predicate block:(void (^ _Nonnull)(void))block;
@property (nonatomic, readonly) BOOL shouldDispatchCancel;
@property (nonatomic, readonly) BOOL shouldCreateDispatchBlock;
@end


SWIFT_CLASS("_TtC6Sentry28SentryEnabledFeaturesBuilder")
@interface SentryEnabledFeaturesBuilder : NSObject
+ (NSArray<NSString *> * _Nonnull)getEnabledFeaturesWithOptions:(SentryOptions * _Nullable)options SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This is only marked as deprecated because enableAppLaunchProfiling is marked as deprecated. Once that is removed this can be removed.");
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Subclass of SentryEvent so we can add the Decodable implementation via a Swift extension. We need
/// this due to our mixed use of public Swift and ObjC classes. We could avoid this class by
/// converting SentryReplayEvent back to ObjC, but we rather accept this tradeoff as we want to
/// convert all public classes to Swift in the future. This does not need to be public, but was previously
/// defined in objc and was public. In the next major version of the SDK we should make it <code>internal</code> and <code>final</code>
/// and remove the <code>@objc</code> annotation.
/// @note: We can’t add the extension for Decodable directly on SentryEvent, because we get an error
/// in SentryReplayEvent: ‘required’ initializer ‘init(from:)’ must be provided by subclass of
/// ‘Event’ Once we add the initializer with required convenience public init(from decoder: any
/// Decoder) throws { fatalError(“init(from:) has not been implemented”)
/// }
/// we get the error initializer ‘init(from:)’ is declared in extension of ‘Event’ and cannot be
/// overridden. Therefore, we add the Decodable implementation not on the Event, but to a subclass of
/// the event.
SWIFT_CLASS_NAMED("SentryEventDecodable")
@interface SentryEventDecodable : SentryEvent
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;

SWIFT_CLASS("_TtC6Sentry18SentryEventDecoder")
@interface SentryEventDecoder : NSObject
+ (SentryEvent * _Nullable)decodeEventWithJsonData:(NSData * _Nonnull)jsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Sentry25SentryExperimentalOptions")
@interface SentryExperimentalOptions : NSObject
/// Enables swizzling of<code>NSData</code> to automatically track file operations.
/// note:
/// Swizzling is enabled by setting <code>SentryOptions.enableSwizzling</code> to <code>true</code>.
/// This option allows you to disable swizzling for <code>NSData</code> only, while keeping swizzling enabled for other classes.
/// This is useful if you want to use manual tracing for file operations.
@property (nonatomic) BOOL enableDataSwizzling;
/// Enables swizzling of<code>NSFileManager</code> to automatically track file operations.
/// note:
/// Swizzling is enabled by setting <code>SentryOptions.enableSwizzling</code> to <code>true</code>.
/// This option allows you to disable swizzling for <code>NSFileManager</code> only, while keeping swizzling enabled for other classes.
/// This is useful if you want to use manual tracing for file operations.
/// experiment:
/// This is an experimental feature and is therefore disabled by default. We’ll enable it by default in a future release.
@property (nonatomic) BOOL enableFileManagerSwizzling;
/// A more reliable way to report unhandled C++ exceptions.
/// This approach hooks into all instances of the <code>__cxa_throw</code> function, which provides a more comprehensive and consistent exception handling across an app’s runtime, regardless of the number of C++ modules or how they’re linked. It helps in obtaining accurate stack traces.
/// note:
/// The mechanism of hooking into <code>__cxa_throw</code> could cause issues with symbolication on iOS due to caching of symbol references.
/// experiment:
/// This is an experimental feature and is therefore disabled by default. We’ll enable it by default in a future major release.
@property (nonatomic) BOOL enableUnhandledCPPExceptionsV2;
/// Logs are considered beta.
@property (nonatomic) BOOL enableLogs;
- (void)validateOptions:(NSDictionary<NSString *, id> * _Nullable)options;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSMutableSet;

SWIFT_CLASS("_TtC6Sentry19SentryExtraPackages")
@interface SentryExtraPackages : NSObject
+ (void)addPackageName:(NSString * _Nullable)name version:(NSString * _Nullable)version;
+ (NSMutableSet * _Nonnull)getPackages SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SentryId;
enum SentryFeedbackSource : NSInteger;

SWIFT_CLASS("_TtC6Sentry14SentryFeedback")
@interface SentryFeedback : NSObject
@property (nonatomic, readonly, strong) SentryId * _Nonnull eventId;
/// \param associatedEventId The ID for an event you’d like associated with the feedback. 
///
/// \param attachments Data objects for any attachments. Currently the web UI only supports showing one attached image, like for a screenshot. 
///
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message name:(NSString * _Nullable)name email:(NSString * _Nullable)email source:(enum SentryFeedbackSource)source associatedEventId:(SentryId * _Nullable)associatedEventId attachments:(NSArray<NSData *> * _Nullable)attachments OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, SentryFeedbackSource, open) {
  SentryFeedbackSourceWidget = 0,
  SentryFeedbackSourceCustom = 1,
};


@interface SentryFeedback (SWIFT_EXTENSION(Sentry)) <SentrySerializable>
@end


@interface SentryFeedback (SWIFT_EXTENSION(Sentry))
- (NSDictionary<NSString *, id> * _Nonnull)serialize SWIFT_WARN_UNUSED_RESULT;
@end

@class SentryAttachment;

@interface SentryFeedback (SWIFT_EXTENSION(Sentry))
/// note:
/// Currently there is only a single attachment possible, for the screenshot, of which there can be only one.
- (NSArray<SentryAttachment *> * _Nonnull)attachmentsForEnvelope SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6Sentry18SentryFileContents")
@interface SentryFileContents : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull path;
@property (nonatomic, readonly, copy) NSData * _Nonnull contents;
- (nonnull instancetype)initWithPath:(NSString * _Nonnull)path contents:(NSData * _Nonnull)contents OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSURL;

SWIFT_PROTOCOL("_TtP6Sentry25SentryFileManagerProtocol_")
@protocol SentryFileManagerProtocol
- (void)moveState:(NSString * _Nonnull)stateFilePath toPreviousState:(NSString * _Nonnull)previousStateFilePath;
- (NSData * _Nullable)readDataFromPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (BOOL)writeData:(NSData * _Nonnull)data toPath:(NSString * _Nonnull)path;
- (void)removeFileAtPath:(NSString * _Nonnull)path;
- (NSURL * _Nonnull)getSentryPathAsURL SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6Sentry23SentryFramesDelayResult")
@interface SentryFramesDelayResult : NSObject
/// The frames delay for the passed time period. If frame delay can’t be calculated this is -1.
@property (nonatomic, readonly) CFTimeInterval delayDuration;
@property (nonatomic, readonly) NSUInteger framesContributingToDelayCount;
- (nonnull instancetype)initWithDelayDuration:(CFTimeInterval)delayDuration framesContributingToDelayCount:(NSUInteger)framesContributingToDelayCount OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSUUID;

SWIFT_CLASS("_TtC6Sentry8SentryId")
@interface SentryId : NSObject
/// A @c SentryId with an empty UUID “00000000000000000000000000000000”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SentryId * _Nonnull empty;)
+ (SentryId * _Nonnull)empty SWIFT_WARN_UNUSED_RESULT;
/// Returns a 32 lowercase character hexadecimal string description of the @c SentryId, such as
/// “12c2d058d58442709aa2eca08bf20986”.
@property (nonatomic, readonly, copy) NSString * _Nonnull sentryIdString;
/// Creates a @c SentryId with a random UUID.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a SentryId with the given UUID.
- (nonnull instancetype)initWithUuid:(NSUUID * _Nonnull)uuid OBJC_DESIGNATED_INITIALIZER;
/// Creates a @c SentryId from a 32 character hexadecimal string without dashes such as
/// “12c2d058d58442709aa2eca08bf20986” or a 36 character hexadecimal string such as such as
/// “12c2d058-d584-4270-9aa2-eca08bf20986”.
/// @return SentryId.empty for invalid strings.
- (nonnull instancetype)initWithUUIDString:(NSString * _Nonnull)uuidString OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
@end


typedef SWIFT_ENUM(NSUInteger, SentryLevel, open) {
  kSentryLevelNone SWIFT_COMPILE_NAME("none") = 0,
  kSentryLevelDebug SWIFT_COMPILE_NAME("debug") = 1,
  kSentryLevelInfo SWIFT_COMPILE_NAME("info") = 2,
  kSentryLevelWarning SWIFT_COMPILE_NAME("warning") = 3,
  kSentryLevelError SWIFT_COMPILE_NAME("error") = 4,
  kSentryLevelFatal SWIFT_COMPILE_NAME("fatal") = 5,
};


SWIFT_CLASS("_TtC6Sentry17SentryLevelHelper")
@interface SentryLevelHelper : NSObject
+ (NSString * _Nonnull)nameForLevel:(enum SentryLevel)level SWIFT_WARN_UNUSED_RESULT;
+ (enum SentryLevel)levelForName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class SentryClient;

SWIFT_CLASS("_TtC6Sentry16SentryLogBatcher")
@interface SentryLogBatcher : NSObject
/// Initializes a new SentryLogBatcher.
/// important:
/// The <code>dispatchQueue</code> parameter MUST be a serial queue to ensure thread safety.
/// Passing a concurrent queue will result in undefined behavior and potential data races.
/// \param client The SentryClient to use for sending logs
///
/// \param flushTimeout The timeout interval after which buffered logs will be flushed
///
/// \param maxBufferSizeBytes The maximum buffer size in bytes before triggering an immediate flush
///
/// \param dispatchQueue A <em>serial</em> dispatch queue wrapper for thread-safe access to mutable state
///
- (nonnull instancetype)initWithClient:(SentryClient * _Nonnull)client flushTimeout:(NSTimeInterval)flushTimeout maxBufferSizeBytes:(NSInteger)maxBufferSizeBytes dispatchQueue:(SentryDispatchQueueWrapper * _Nonnull)dispatchQueue OBJC_DESIGNATED_INITIALIZER;
/// Convenience initializer with default flush timeout and buffer size.
/// important:
/// The <code>dispatchQueue</code> parameter MUST be a serial queue to ensure thread safety.
/// Passing a concurrent queue will result in undefined behavior and potential data races.
/// \param client The SentryClient to use for sending logs
///
/// \param dispatchQueue A <em>serial</em> dispatch queue wrapper for thread-safe access to mutable state
///
- (nonnull instancetype)initWithClient:(SentryClient * _Nonnull)client dispatchQueue:(SentryDispatchQueueWrapper * _Nonnull)dispatchQueue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <em>EXPERIMENTAL</em> - A structured logging API for Sentry.
/// <code>SentryLogger</code> provides a structured logging interface that captures log entries
/// and sends them to Sentry. Supports multiple log levels (trace, debug, info, warn,
/// error, fatal) and allows attaching arbitrary attributes for enhanced context.
/// <h2>Supported Attribute Types</h2>
/// note:
/// Sentry Logs is currently in Beta. See the <a href="https://docs.sentry.io/product/explore/logs/">Sentry Logs Documentation</a>.
/// warning:
/// This API is experimental and subject to change without notice.
/// <ul>
///   <li>
///     <code>String</code>, <code>Bool</code>, <code>Int</code>, <code>Double</code>
///   </li>
///   <li>
///     <code>Float</code> (converted to <code>Double</code>)
///   </li>
///   <li>
///     Other types (converted to string)
///   </li>
/// </ul>
/// <h2>Usage</h2>
/// \code
/// let logger = SentrySDK.logger
/// logger.info("User logged in", attributes: ["userId": "12345"])
/// logger.error("Payment failed", attributes: ["errorCode": 500])
///
/// // Structured string interpolation with automatic type detection
/// logger.info("User \(userId) processed \(count) items with \(percentage)% success")
/// logger.debug("Processing \(itemCount) items, active: \(isActive)")
/// logger.warn("Retry attempt \(currentAttempt) of \(maxAttempts) failed")
///
/// \endcode
SWIFT_CLASS("_TtC6Sentry12SentryLogger")
@interface SentryLogger : NSObject
/// Logs a trace-level message.
- (void)trace:(NSString * _Nonnull)body;
/// Logs a trace-level message with additional attributes.
- (void)trace:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
/// Logs a debug-level message.
- (void)debug:(NSString * _Nonnull)body;
/// Logs a debug-level message with additional attributes.
- (void)debug:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
/// Logs an info-level message.
- (void)info:(NSString * _Nonnull)body;
/// Logs an info-level message with additional attributes.
- (void)info:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
/// Logs a warning-level message.
- (void)warn:(NSString * _Nonnull)body;
/// Logs a warning-level message with additional attributes.
- (void)warn:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
/// Logs an error-level message.
- (void)error:(NSString * _Nonnull)body;
/// Logs an error-level message with additional attributes.
- (void)error:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
/// Logs a fatal-level message.
- (void)fatal:(NSString * _Nonnull)body;
/// Logs a fatal-level message with additional attributes.
- (void)fatal:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





SWIFT_PROTOCOL_NAMED("SentryRRWebEventProtocol")
@protocol SentryRRWebEvent <SentrySerializable>
@end


SWIFT_CLASS("_TtC6Sentry16SentryRRWebEvent")
@interface SentryRRWebEvent : NSObject <SentryRRWebEvent>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable data;
- (NSDictionary<NSString *, id> * _Nonnull)serialize SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Sentry22SentryRRWebCustomEvent")
@interface SentryRRWebCustomEvent : SentryRRWebEvent
@end


SWIFT_CLASS("_TtC6Sentry26SentryRRWebBreadcrumbEvent")
@interface SentryRRWebBreadcrumbEvent : SentryRRWebCustomEvent
- (nonnull instancetype)initWithTimestamp:(NSDate * _Nonnull)timestamp category:(NSString * _Nonnull)category message:(NSString * _Nullable)message level:(enum SentryLevel)level data:(NSDictionary<NSString *, id> * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
@end





SWIFT_CLASS("_TtC6Sentry20SentryRRWebSpanEvent")
@interface SentryRRWebSpanEvent : SentryRRWebCustomEvent
- (nonnull instancetype)initWithTimestamp:(NSDate * _Nonnull)timestamp endTimestamp:(NSDate * _Nonnull)endTimestamp operation:(NSString * _Nonnull)operation description:(NSString * _Nonnull)description data:(NSDictionary<NSString *, id> * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP6Sentry19SentryRedactOptions_")
@protocol SentryRedactOptions
@property (nonatomic, readonly) BOOL maskAllText;
@property (nonatomic, readonly) BOOL maskAllImages;
@property (nonatomic, readonly, copy) NSArray<Class> * _Nonnull maskedViewClasses;
@property (nonatomic, readonly, copy) NSArray<Class> * _Nonnull unmaskedViewClasses;
@end


SWIFT_CLASS("_TtC6Sentry26SentryRedactDefaultOptions")
@interface SentryRedactDefaultOptions : NSObject <SentryRedactOptions>
@property (nonatomic) BOOL maskAllText;
@property (nonatomic) BOOL maskAllImages;
@property (nonatomic, copy) NSArray<Class> * _Nonnull maskedViewClasses;
@property (nonatomic, copy) NSArray<Class> * _Nonnull unmaskedViewClasses;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class SentryBreadcrumb;

SWIFT_PROTOCOL("_TtP6Sentry31SentryReplayBreadcrumbConverter_")
@protocol SentryReplayBreadcrumbConverter <NSObject>
- (id <SentryRRWebEvent> _Nullable)convertFrom:(SentryBreadcrumb * _Nonnull)breadcrumb SWIFT_WARN_UNUSED_RESULT;
@end

enum SentryReplayType : NSInteger;

SWIFT_CLASS("_TtC6Sentry17SentryReplayEvent")
@interface SentryReplayEvent : SentryEvent
@property (nonatomic, readonly, copy) NSDate * _Nonnull replayStartTimestamp;
@property (nonatomic, readonly) enum SentryReplayType replayType;
/// Number of the segment in the replay.
/// This is an incremental number
@property (nonatomic, readonly) NSInteger segmentId;
/// This will be used to store the name of the screens
/// that appear during the duration of the replay segment.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable urls;
- (nonnull instancetype)initWithEventId:(SentryId * _Nonnull)eventId replayStartTimestamp:(NSDate * _Nonnull)replayStartTimestamp replayType:(enum SentryReplayType)replayType segmentId:(NSInteger)segmentId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (NSDictionary<NSString *, id> * _Nonnull)serialize SWIFT_WARN_UNUSED_RESULT;
@end

enum SentryReplayQuality : NSInteger;

SWIFT_CLASS("_TtC6Sentry19SentryReplayOptions")
@interface SentryReplayOptions : NSObject <SentryRedactOptions>
/// Indicates the percentage in which the replay for the session will be created.
/// note:
/// The value needs to be <code>>= 0.0</code> and <code><= 1.0</code>. When setting a value out of range the SDK sets it
/// to the default.
/// note:
/// See <code>SentryReplayOptions.DefaultValues.sessionSegmentDuration</code> for the default duration of the replay.
/// <ul>
///   <li>
///     Specifying @c 0 means never, @c 1.0 means always.
///   </li>
/// </ul>
@property (nonatomic) float sessionSampleRate;
/// Indicates the percentage in which a 30 seconds replay will be send with error events.
/// note:
/// The value needs to be >= 0.0 and <= 1.0. When setting a value out of range the SDK sets it
/// to the default.
/// note:
/// See <code>SentryReplayOptions.DefaultValues.errorReplayDuration</code> for the default duration of the replay.
/// <ul>
///   <li>
///     Specifying 0 means never, 1.0 means always.
///   </li>
/// </ul>
@property (nonatomic) float onErrorSampleRate;
/// Indicates whether session replay should redact all text in the app
/// by drawing a black rectangle over it.
/// note:
/// See <code>SentryReplayOptions.DefaultValues.maskAllText</code> for the default value.
@property (nonatomic) BOOL maskAllText;
/// Indicates whether session replay should redact all non-bundled image
/// in the app by drawing a black rectangle over it.
/// note:
/// See <code>SentryReplayOptions.DefaultValues.maskAllImages</code> for the default value.
@property (nonatomic) BOOL maskAllImages;
/// Indicates the quality of the replay.
/// The higher the quality, the higher the CPU and bandwidth usage.
/// note:
/// See <code>SentryReplayOptions.DefaultValues.quality</code> for the default value.
@property (nonatomic) enum SentryReplayQuality quality;
/// A list of custom UIView subclasses that need
/// to be masked during session replay.
/// By default Sentry already mask text and image elements from UIKit
/// Every child of a view that is redacted will also be redacted.
/// note:
/// See <code>SentryReplayOptions.DefaultValues.maskedViewClasses</code> for the default value.
@property (nonatomic, copy) NSArray<Class> * _Nonnull maskedViewClasses;
/// A list of custom UIView subclasses to be ignored
/// during masking step of the session replay.
/// The views of given classes will not be redacted but their children may be.
/// This property has precedence over <code>redactViewTypes</code>.
/// note:
/// See <code>SentryReplayOptions.DefaultValues.unmaskedViewClasses</code> for the default value.
@property (nonatomic, copy) NSArray<Class> * _Nonnull unmaskedViewClasses;
/// Alias for <code>enableViewRendererV2</code>.
/// This flag is deprecated and will be removed in a future version.
/// Please use <code>enableViewRendererV2</code> instead.
@property (nonatomic) BOOL enableExperimentalViewRenderer SWIFT_DEPRECATED_MSG("", "enableViewRendererV2");
/// Enables the up to 5x faster new view renderer used by the Session Replay integration.
/// Enabling this flag will reduce the amount of time it takes to render each frame of the session replay on the main thread, therefore reducing
/// interruptions and visual lag. <a href="https://github.com/getsentry/sentry-cocoa/pull/4940">Our benchmarks</a> have shown a significant improvement of
/// <em>up to 4-5x faster rendering</em> (reducing <code>~160ms</code> to <code>~36ms</code> per frame) on older devices.
/// experiment:
/// In case you are noticing issues with the new view renderer, please report the issue on <a href="https://github.com/getsentry/sentry-cocoa">GitHub</a>.
/// Eventually, we will remove this feature flag and use the new view renderer by default.
/// note:
/// See <code>SentryReplayOptions.DefaultValues.enableViewRendererV2</code> for the default value.
@property (nonatomic) BOOL enableViewRendererV2;
/// Enables up to 5x faster but incommpelte view rendering used by the Session Replay integration.
/// Enabling this flag will reduce the amount of time it takes to render each frame of the session replay on the main thread, therefore reducing
/// interruptions and visual lag. <a href="https://github.com/getsentry/sentry-cocoa/pull/4940">Our benchmarks</a> have shown a significant improvement of
/// up to <em>5x faster render times</em> (reducing <code>~160ms</code> to <code>~30ms</code> per frame).
/// This flag controls the way the view hierarchy is drawn into a graphics context for the session replay. By default, the view hierarchy is drawn using
/// the <code>UIView.drawHierarchy(in:afterScreenUpdates:)</code> method, which is the most complete way to render the view hierarchy. However,
/// this method can be slow, especially when rendering complex views, therefore enabling this flag will switch to render the underlying <code>CALayer</code> instead.
/// note:
/// This flag can only be used together with <code>enableViewRendererV2</code> with up to 20% faster render times.
/// warning:
/// Rendering the view hiearchy using the <code>CALayer.render(in:)</code> method can lead to rendering issues, especially when using custom views.
/// For complete rendering, it is recommended to set this option to <code>false</code>. In case you prefer performance over completeness, you can
/// set this option to <code>true</code>.
/// experiment:
/// This is an experimental feature and is therefore disabled by default. In case you are noticing issues with the experimental
/// view renderer, please report the issue on <a href="https://github.com/getsentry/sentry-cocoa">GitHub</a>. Eventually, we will
/// mark this feature as stable and remove the experimental flag, but will keep it disabled by default.
/// note:
/// See <code>SentryReplayOptions.DefaultValues.enableFastViewRendering</code> for the default value.
@property (nonatomic) BOOL enableFastViewRendering;
/// Defines the quality of the session replay.
/// Higher bit rates better quality, but also bigger files to transfer.
/// note:
/// See <code>SentryReplayOptions.DefaultValues.quality</code> for the default value.
@property (nonatomic, readonly) NSInteger replayBitRate;
/// The scale related to the window size at which the replay will be created
/// note:
/// The scale is used to reduce the size of the replay.
@property (nonatomic, readonly) float sizeScale;
/// Number of frames per second of the replay.
/// The more the havier the process is.
/// The minimum is 1, if set to zero this will change to 1.
/// note:
/// See <code>SentryReplayOptions.DefaultValues.frameRate</code> for the default value.
@property (nonatomic) NSUInteger frameRate;
/// The maximum duration of replays for error events.
@property (nonatomic) NSTimeInterval errorReplayDuration;
/// The maximum duration of the segment of a session replay.
@property (nonatomic) NSTimeInterval sessionSegmentDuration;
/// The maximum duration of a replay session.
/// note:
/// See  <code>SentryReplayOptions.DefaultValues.maximumDuration</code> for the default value.
@property (nonatomic) NSTimeInterval maximumDuration;
/// Initialize session replay options disabled
/// note:
/// This initializer is added for Objective-C compatibility, as constructors with default values
/// are not supported in Objective-C.
/// note:
/// See <code>SentryReplayOptions.DefaultValues</code> for the default values of each parameter.
- (nonnull instancetype)init;
/// Initializes a new instance of <code>SentryReplayOptions</code> using a dictionary.
/// warning:
/// This initializer is primarily used by Hybrid SDKs and is not intended for public use.
/// \param dictionary A dictionary containing the configuration options for the session replay.
///
- (nonnull instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary;
/// Initializes a new instance of <code>SentryReplayOptions</code> with the specified parameters.
/// note:
/// See <code>SentryReplayOptions.DefaultValues</code> for the default values of each parameter.
/// \param sessionSampleRate Sample rate used to determine the percentage of replays of sessions that will be uploaded.
///
/// \param onErrorSampleRate Sample rate used to determine the percentage of replays of error events that will be uploaded.
///
/// \param maskAllText Flag to redact all text in the app by drawing a rectangle over it.
///
/// \param maskAllImages Flag to redact all images in the app by drawing a rectangle over it.
///
/// \param enableViewRendererV2 Enables the up to 5x faster view renderer.
///
/// \param enableFastViewRendering Enables faster but incomplete view rendering. See <code>SentryReplayOptions.enableFastViewRendering</code> for more information.
///
- (nonnull instancetype)initWithSessionSampleRate:(float)sessionSampleRate onErrorSampleRate:(float)onErrorSampleRate maskAllText:(BOOL)maskAllText maskAllImages:(BOOL)maskAllImages enableViewRendererV2:(BOOL)enableViewRendererV2 enableFastViewRendering:(BOOL)enableFastViewRendering;
@end

/// Enum to define the quality of the session replay.
typedef SWIFT_ENUM(NSInteger, SentryReplayQuality, open) {
/// Video Scale: 80%
/// Bit Rate: 20.000
  SentryReplayQualityLow = 0,
/// Video Scale: 100%
/// Bit Rate: 40.000
  SentryReplayQualityMedium = 1,
/// Video Scale: 100%
/// Bit Rate: 60.000
  SentryReplayQualityHigh = 2,
};

@class SentryVideoInfo;

SWIFT_CLASS("_TtC6Sentry21SentryReplayRecording")
@interface SentryReplayRecording : NSObject
- (nonnull instancetype)initWithSegmentId:(NSInteger)segmentId video:(SentryVideoInfo * _Nonnull)video extraEvents:(NSArray<id <SentryRRWebEvent>> * _Nonnull)extraEvents;
- (NSDictionary<NSString *, id> * _Nonnull)headerForReplayRecording SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSDictionary<NSString *, id> *> * _Nonnull)serialize SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, SentryReplayType, open) {
  SentryReplayTypeSession = 0,
  SentryReplayTypeBuffer = 1,
};

@class UIImage;

SWIFT_PROTOCOL("_TtP6Sentry22SentryReplayVideoMaker_")
@protocol SentryReplayVideoMaker <NSObject>
- (void)addFrameAsyncWithTimestamp:(NSDate * _Nonnull)timestamp maskedViewImage:(UIImage * _Nonnull)maskedViewImage forScreen:(NSString * _Nullable)forScreen;
- (void)releaseFramesUntil:(NSDate * _Nonnull)date;
- (void)createVideoInBackgroundWithBeginning:(NSDate * _Nonnull)beginning end:(NSDate * _Nonnull)end completion:(void (^ _Nonnull)(NSArray<SentryVideoInfo *> * _Nonnull))completion;
- (NSArray<SentryVideoInfo *> * _Nonnull)createVideoWithBeginning:(NSDate * _Nonnull)beginning end:(NSDate * _Nonnull)end SWIFT_WARN_UNUSED_RESULT;
@end


@protocol SentrySpan;
@class SentryScope;
@class SentryTransactionContext;
@class NSException;
@class SentryUserFeedback;
@class SentryUser;

/// The main entry point for the Sentry SDK.
/// We recommend using <code>start(configureOptions:)</code> to initialize Sentry.
SWIFT_CLASS("_TtC6Sentry9SentrySDK")
@interface SentrySDK : NSObject
/// The current active transaction or span bound to the scope.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <SentrySpan> _Nullable span;)
+ (id <SentrySpan> _Nullable)span SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether the Sentry SDK is enabled.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isEnabled;)
+ (BOOL)isEnabled SWIFT_WARN_UNUSED_RESULT;
/// API to access Sentry logs
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SentryLogger * _Nonnull logger;)
+ (SentryLogger * _Nonnull)logger SWIFT_WARN_UNUSED_RESULT;
/// Inits and configures Sentry (<code>SentryHub</code>, <code>SentryClient</code>) and sets up all integrations. Make sure to
/// set a valid DSN.
/// note:
/// Call this method on the main thread. When calling it from a background thread, the
/// SDK starts on the main thread async.
+ (void)startWithOptions:(SentryOptions * _Nonnull)options;
/// Inits and configures Sentry (<code>SentryHub</code>, <code>SentryClient</code>) and sets up all integrations. Make sure to
/// set a valid DSN.
/// note:
/// Call this method on the main thread. When calling it from a background thread, the
/// SDK starts on the main thread async.
+ (void)startWithConfigureOptions:(void (^ _Nonnull)(SentryOptions * _Nonnull))configureOptions;
/// Captures a manually created event and sends it to Sentry.
/// \param event The event to send to Sentry.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureEvent:(SentryEvent * _Nonnull)event;
/// Captures a manually created event and sends it to Sentry. Only the data in this scope object will
/// be added to the event. The global scope will be ignored.
/// \param event The event to send to Sentry.
///
/// \param scope The scope containing event metadata.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureEvent:(SentryEvent * _Nonnull)event withScope:(SentryScope * _Nonnull)scope;
/// Captures a manually created event and sends it to Sentry. Maintains the global scope but mutates
/// scope data for only this call.
/// \param event The event to send to Sentry.
///
/// \param block The block mutating the scope only for this call.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureEvent:(SentryEvent * _Nonnull)event withScopeBlock:(void (^ _Nonnull)(SentryScope * _Nonnull))block;
/// Creates a transaction, binds it to the hub and returns the instance.
/// \param name The transaction name.
///
/// \param operation Short code identifying the type of operation the span is measuring.
///
///
/// returns:
/// The created transaction.
+ (id <SentrySpan> _Nonnull)startTransactionWithName:(NSString * _Nonnull)name operation:(NSString * _Nonnull)operation;
/// Creates a transaction, binds it to the hub and returns the instance.
/// \param name The transaction name.
///
/// \param operation Short code identifying the type of operation the span is measuring.
///
/// \param bindToScope Indicates whether the SDK should bind the new transaction to the scope.
///
///
/// returns:
/// The created transaction.
+ (id <SentrySpan> _Nonnull)startTransactionWithName:(NSString * _Nonnull)name operation:(NSString * _Nonnull)operation bindToScope:(BOOL)bindToScope;
/// Creates a transaction, binds it to the hub and returns the instance.
/// \param transactionContext The transaction context.
///
///
/// returns:
/// The created transaction.
+ (id <SentrySpan> _Nonnull)startTransactionWithContext:(SentryTransactionContext * _Nonnull)transactionContext;
/// Creates a transaction, binds it to the hub and returns the instance.
/// \param transactionContext The transaction context.
///
/// \param bindToScope Indicates whether the SDK should bind the new transaction to the scope.
///
///
/// returns:
/// The created transaction.
+ (id <SentrySpan> _Nonnull)startTransactionWithContext:(SentryTransactionContext * _Nonnull)transactionContext bindToScope:(BOOL)bindToScope;
/// Creates a transaction, binds it to the hub and returns the instance.
/// \param transactionContext The transaction context.
///
/// \param bindToScope Indicates whether the SDK should bind the new transaction to the scope.
///
/// \param customSamplingContext Additional information about the sampling context.
///
///
/// returns:
/// The created transaction.
+ (id <SentrySpan> _Nonnull)startTransactionWithContext:(SentryTransactionContext * _Nonnull)transactionContext bindToScope:(BOOL)bindToScope customSamplingContext:(NSDictionary<NSString *, id> * _Nonnull)customSamplingContext;
/// Creates a transaction, binds it to the hub and returns the instance.
/// \param transactionContext The transaction context.
///
/// \param customSamplingContext Additional information about the sampling context.
///
///
/// returns:
/// The created transaction.
+ (id <SentrySpan> _Nonnull)startTransactionWithContext:(SentryTransactionContext * _Nonnull)transactionContext customSamplingContext:(NSDictionary<NSString *, id> * _Nonnull)customSamplingContext;
/// Captures an error event and sends it to Sentry.
/// \param error The error to send to Sentry.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureError:(NSError * _Nonnull)error;
/// Captures an error event and sends it to Sentry. Only the data in this scope object will be added
/// to the event. The global scope will be ignored.
/// \param error The error to send to Sentry.
///
/// \param scope The scope containing event metadata.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureError:(NSError * _Nonnull)error withScope:(SentryScope * _Nonnull)scope;
/// Captures an error event and sends it to Sentry. Maintains the global scope but mutates scope data
/// for only this call.
/// \param error The error to send to Sentry.
///
/// \param block The block mutating the scope only for this call.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureError:(NSError * _Nonnull)error withScopeBlock:(void (^ _Nonnull)(SentryScope * _Nonnull))block;
/// Captures an exception event and sends it to Sentry.
/// \param exception The exception to send to Sentry.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureException:(NSException * _Nonnull)exception;
/// Captures an exception event and sends it to Sentry. Only the data in this scope object will be
/// added to the event. The global scope will be ignored.
/// \param exception The exception to send to Sentry.
///
/// \param scope The scope containing event metadata.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureException:(NSException * _Nonnull)exception withScope:(SentryScope * _Nonnull)scope;
/// Captures an exception event and sends it to Sentry. Maintains the global scope but mutates scope
/// data for only this call.
/// \param exception The exception to send to Sentry.
///
/// \param block The block mutating the scope only for this call.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureException:(NSException * _Nonnull)exception withScopeBlock:(void (^ _Nonnull)(SentryScope * _Nonnull))block;
/// Captures a message event and sends it to Sentry.
/// \param message The message to send to Sentry.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureMessage:(NSString * _Nonnull)message;
/// Captures a message event and sends it to Sentry. Only the data in this scope object will be added
/// to the event. The global scope will be ignored.
/// \param message The message to send to Sentry.
///
/// \param scope The scope containing event metadata.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureMessage:(NSString * _Nonnull)message withScope:(SentryScope * _Nonnull)scope;
/// Captures a message event and sends it to Sentry. Maintains the global scope but mutates scope
/// data for only this call.
/// \param message The message to send to Sentry.
///
/// \param block The block mutating the scope only for this call.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureMessage:(NSString * _Nonnull)message withScopeBlock:(void (^ _Nonnull)(SentryScope * _Nonnull))block;
/// Captures user feedback that was manually gathered and sends it to Sentry.
/// \param userFeedback The user feedback to send to Sentry.
///
+ (void)captureUserFeedback:(SentryUserFeedback * _Nonnull)userFeedback SWIFT_DEPRECATED_MSG("Use SentrySDK.back or use or configure our new managed UX with SentryOptions.configureUserFeedback.");
/// Captures user feedback that was manually gathered and sends it to Sentry.
/// warning:
/// This is an experimental feature and may still have bugs.
/// note:
/// If you’d prefer not to have to build the UI required to gather the feedback from the user,
/// see <code>SentryOptions.configureUserFeedback</code> to customize a fully managed integration. See
/// https://docs.sentry.io/platforms/apple/user-feedback/ for more information.
/// \param feedback The feedback to send to Sentry.
///
+ (void)captureFeedback:(SentryFeedback * _Nonnull)feedback;
/// Adds a <code>Breadcrumb</code> to the current <code>Scope</code> of the current <code>Hub</code>. If the total number of breadcrumbs
/// exceeds the <code>SentryOptions.maxBreadcrumbs</code> the SDK removes the oldest breadcrumb.
/// \param crumb The <code>Breadcrumb</code> to add to the current <code>Scope</code> of the current <code>Hub</code>.
///
+ (void)addBreadcrumb:(SentryBreadcrumb * _Nonnull)crumb;
/// Use this method to modify the current <code>Scope</code> of the current <code>Hub</code>. The SDK uses the <code>Scope</code> to attach
/// contextual data to events.
/// \param callback The callback for configuring the current <code>Scope</code> of the current <code>Hub</code>.
///
+ (void)configureScope:(void (^ _Nonnull)(SentryScope * _Nonnull))callback;
/// Checks if the last program execution terminated with a crash.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL crashedLastRun;)
+ (BOOL)crashedLastRun SWIFT_WARN_UNUSED_RESULT;
/// Checks if the SDK detected a start-up crash during SDK initialization.
/// note:
/// The SDK init waits synchronously for up to 5 seconds to flush out events if the app crashes
/// within 2 seconds after the SDK init.
///
/// returns:
/// true if the SDK detected a start-up crash and false if not.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL detectedStartUpCrash;)
+ (BOOL)detectedStartUpCrash SWIFT_WARN_UNUSED_RESULT;
/// Set <code>user</code> to the current <code>Scope</code> of the current <code>Hub</code>.
/// note:
/// You must start the SDK before calling this method, otherwise it doesn’t set the user.
/// \param user The user to set to the current <code>Scope</code>.
///
+ (void)setUser:(SentryUser * _Nullable)user;
/// Starts a new <code>SentrySession</code>. If there’s a running <code>SentrySession</code>, it ends it before starting the
/// new one. You can use this method in combination with <code>endSession</code> to manually track
/// sessions. The SDK uses <code>SentrySession</code> to inform Sentry about release and project
/// associated project health.
+ (void)startSession;
/// Ends the current <code>SentrySession</code>. You can use this method in combination with <code>startSession</code> to
/// manually track <code>SentrySessions</code>. The SDK uses <code>SentrySession</code> to inform Sentry about release and
/// project associated project health.
+ (void)endSession;
/// This forces a crash, useful to test the <code>SentryCrash</code> integration.
/// note:
/// The SDK can’t report a crash when a debugger is attached. Your application needs to run
/// without a debugger attached to capture the crash and send it to Sentry the next time you launch
/// your application.
+ (void)crash;
/// Reports to the ongoing <code>UIViewController</code> transaction
/// that the screen contents are fully loaded and displayed,
/// which will create a new span.
/// seealso:
///
/// https://docs.sentry.io/platforms/cocoa/performance/instrumentation/automatic-instrumentation/#time-to-full-display
+ (void)reportFullyDisplayed;
/// Pauses sending detected app hangs to Sentry.
/// This method doesn’t close the detection of app hangs. Instead, the app hang detection
/// will ignore detected app hangs until you call <code>resumeAppHangTracking</code>.
+ (void)pauseAppHangTracking;
/// Resumes sending detected app hangs to Sentry.
+ (void)resumeAppHangTracking;
/// Waits synchronously for the SDK to flush out all queued and cached items for up to the specified
/// timeout in seconds. If there is no internet connection, the function returns immediately. The SDK
/// doesn’t dispose the client or the hub.
/// \param timeout The time to wait for the SDK to complete the flush.
///
+ (void)flush:(NSTimeInterval)timeout;
/// Closes the SDK, uninstalls all the integrations, and calls <code>flush</code> with
/// <code>SentryOptions.shutdownTimeInterval</code>.
+ (void)close;
/// note:
/// Conceptually internal but needs to be marked public with SPI for ObjC visibility
+ (void)clearLogger;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A note on the thread safety:
/// The methods configure and log don’t use synchronization mechanisms, meaning they aren’t strictly speaking thread-safe.
/// Still, you can use log from multiple threads. The problem is that when you call configure while
/// calling log from multiple threads, you experience a race condition. It can take a bit until all
/// threads know the new config. As the SDK should only call configure once when starting, we do accept
/// this race condition. Adding locks for evaluating the log level for every log invocation isn’t
/// acceptable, as this adds a significant overhead for every log call. Therefore, we exclude SentryLog
/// from the ThreadSanitizer as it produces false positives. The tests call configure multiple times,
/// and the thread sanitizer would surface these race conditions. We accept these race conditions for
/// the log messages in the tests over adding locking for all log messages.
SWIFT_CLASS("_TtC6Sentry12SentrySDKLog")
@interface SentrySDKLog : NSObject
+ (void)logWithMessage:(NSString * _Nonnull)message andLevel:(enum SentryLevel)level;
/// @return @c YES if the current logging configuration will log statements at the current level,
/// @c NO if not.
+ (BOOL)willLogAtLevel:(enum SentryLevel)level SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC6Sentry19SentrySDKLogSupport")
@interface SentrySDKLogSupport : NSObject
+ (void)configure:(BOOL)isDebug diagnosticLevel:(enum SentryLevel)diagnosticLevel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Sentry34SentrySRDefaultBreadcrumbConverter")
@interface SentrySRDefaultBreadcrumbConverter : NSObject <SentryReplayBreadcrumbConverter>
/// This function will convert the SDK breadcrumbs to session replay breadcrumbs in a format that the front-end understands.
/// Any deviation in the information will cause the breadcrumb or the information itself to be discarded
/// in order to avoid unknown behavior in the front-end.
- (id <SentryRRWebEvent> _Nullable)convertFrom:(SentryBreadcrumb * _Nonnull)breadcrumb SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Sentry26SentryScopePersistentStore")
@interface SentryScopePersistentStore : NSObject
- (nullable instancetype)initWithFileManager:(id <SentryFileManagerProtocol> _Nullable)fileManager OBJC_DESIGNATED_INITIALIZER;
- (void)moveAllCurrentStateToPreviousState;
- (NSDictionary<NSString *, NSDictionary<NSString *, id> *> * _Nullable)readPreviousContextFromDisk SWIFT_WARN_UNUSED_RESULT;
- (SentryUser * _Nullable)readPreviousUserFromDisk SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)readPreviousDistFromDisk SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)readPreviousEnvironmentFromDisk SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, NSString *> * _Nullable)readPreviousTagsFromDisk SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)readPreviousExtrasFromDisk SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nullable)readPreviousFingerprintFromDisk SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end









SWIFT_CLASS("_TtC6Sentry16SentrySdkPackage")
@interface SentrySdkPackage : NSObject
+ (NSDictionary<NSString *, NSString *> * _Nullable)global SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC6Sentry29SentrySwizzleClassNameExclude")
@interface SentrySwizzleClassNameExclude : NSObject
+ (BOOL)shouldExcludeClassWithClassName:(NSString * _Nonnull)className swizzleClassNameExcludes:(NSSet<NSString *> * _Nonnull)swizzleClassNameExcludes SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


typedef SWIFT_ENUM(NSInteger, SentryTransactionNameSource, open) {
  kSentryTransactionNameSourceCustom SWIFT_COMPILE_NAME("custom") = 0,
  kSentryTransactionNameSourceUrl SWIFT_COMPILE_NAME("url") = 1,
  kSentryTransactionNameSourceRoute SWIFT_COMPILE_NAME("route") = 2,
  kSentryTransactionNameSourceView SWIFT_COMPILE_NAME("view") = 3,
  kSentryTransactionNameSourceComponent SWIFT_COMPILE_NAME("component") = 4,
  kSentryTransactionNameSourceTask SWIFT_COMPILE_NAME("sourceTask") = 5,
};


/// Use this protocol to customize the name used in the automatic
/// UIViewController performance tracker, view hierarchy, and breadcrumbs.
SWIFT_PROTOCOL("_TtP6Sentry32SentryUIViewControllerDescriptor_")
@protocol SentryUIViewControllerDescriptor <NSObject>
/// The custom name of the UIViewController
/// that the Sentry SDK uses for transaction names, breadcrumbs, and
/// view hierarchy.
@property (nonatomic, readonly, copy) NSString * _Nonnull sentryName;
@end

@class SentryDsn;
@class NSURLRequest;

SWIFT_CLASS("_TtC6Sentry23SentryURLRequestFactory")
@interface SentryURLRequestFactory : NSObject
+ (NSURLRequest * _Nullable)envelopeRequestWith:(SentryDsn * _Nonnull)dsn data:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (NSURLRequest * _Nullable)envelopeRequestWith:(NSURL * _Nonnull)url data:(NSData * _Nonnull)data authHeader:(NSString * _Nullable)authHeader error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Sentry15SentryVideoInfo")
@interface SentryVideoInfo : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nonnull path;
@property (nonatomic, readonly, copy) NSDate * _Nonnull start;
@property (nonatomic, readonly, copy) NSDate * _Nonnull end;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Sentry44SentryWatchdogTerminationAttributesProcessor")
@interface SentryWatchdogTerminationAttributesProcessor : NSObject
- (nonnull instancetype)initWithDispatchQueueWrapper:(SentryDispatchQueueWrapper * _Nonnull)dispatchQueueWrapper scopePersistentStore:(SentryScopePersistentStore * _Nonnull)scopePersistentStore OBJC_DESIGNATED_INITIALIZER;
- (void)clear;
- (void)setContext:(NSDictionary<NSString *, NSDictionary<NSString *, id> *> * _Nullable)context;
- (void)setUser:(SentryUser * _Nullable)user;
- (void)setDist:(NSString * _Nullable)dist;
- (void)setEnvironment:(NSString * _Nullable)environment;
- (void)setTags:(NSDictionary<NSString *, NSString *> * _Nullable)tags;
- (void)setExtras:(NSDictionary<NSString *, id> * _Nullable)extras;
- (void)setFingerprint:(NSArray<NSString *> * _Nullable)fingerprint;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIViewController;

SWIFT_CLASS("_TtC6Sentry15SwiftDescriptor")
@interface SwiftDescriptor : NSObject
+ (NSString * _Nonnull)getObjectClassName:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getViewControllerClassName:(UIViewController * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getSwiftErrorDescription:(NSError * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLSessionTask;

SWIFT_CLASS("_TtC6Sentry20URLSessionTaskHelper")
@interface URLSessionTaskHelper : NSObject
+ (NSString * _Nullable)getGraphQLOperationNameFrom:(NSURLSessionTask * _Nullable)task SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLQueryItem;

SWIFT_CLASS("_TtC6Sentry12UrlSanitized")
@interface UrlSanitized : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable query;
@property (nonatomic, readonly, copy) NSArray<NSURLQueryItem *> * _Nullable queryItems;
@property (nonatomic, readonly, copy) NSString * _Nullable fragment;
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nullable sanitizedUrl;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Adds additional information about what happened to an event.
/// @deprecated Use <code>SentryFeedback</code>.
SWIFT_CLASS_NAMED("UserFeedback") SWIFT_DEPRECATED_MSG("Use SentryFeedback.")
@interface SentryUserFeedback : NSObject <SentrySerializable>
/// The eventId of the event to which the user feedback is associated.
@property (nonatomic, readonly, strong) SentryId * _Nonnull eventId;
/// The name of the user.
@property (nonatomic, copy) NSString * _Nonnull name;
/// The email of the user.
@property (nonatomic, copy) NSString * _Nonnull email;
/// Comments of the user about what happened.
@property (nonatomic, copy) NSString * _Nonnull comments;
/// Initializes SentryUserFeedback and sets the required eventId.
/// \param eventId The eventId of the event to which the user feedback is associated.
///
- (nonnull instancetype)initWithEventId:(SentryId * _Nonnull)eventId OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary<NSString *, id> * _Nonnull)serialize SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#if __has_include(<../../../swift/swiftToCxx/_SwiftCxxInteroperability.h>)
#include <../../../swift/swiftToCxx/_SwiftCxxInteroperability.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftCxxInteroperability.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftCxxInteroperability.h>
// Alternatively, allow user to find the header using additional include path into '<toolchain>/lib/swift'.
#elif __has_include(<swiftToCxx/_SwiftCxxInteroperability.h>)
#include <swiftToCxx/_SwiftCxxInteroperability.h>
#endif
#pragma clang diagnostic pop
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
#endif

#ifndef SWIFT_SWIFT_H
#define SWIFT_SWIFT_H
#ifdef SWIFT_SYMBOL
#undef SWIFT_SYMBOL
#endif
#define SWIFT_SYMBOL(usrValue) SWIFT_SYMBOL_MODULE_USR("swift", usrValue)
#ifndef SWIFT_CXX_INTEROP_HIDE_STL_OVERLAY
#include <string>
#endif
#include <new>
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"
#ifndef SWIFT_PRINTED_CORE
#define SWIFT_PRINTED_CORE
namespace swift SWIFT_PRIVATE_ATTR {

namespace _impl {

#ifdef __cplusplus
extern "C" {
#endif

// Swift type metadata response type.
struct MetadataResponseTy {
  void * _Null_unspecified _0;
  uint64_t _1;
};
// Swift type metadata request type.
typedef uint64_t MetadataRequestTy;

#if __cplusplus > 201402L
#  define SWIFT_NOEXCEPT_FUNCTION_PTR noexcept
#else
#  define SWIFT_NOEXCEPT_FUNCTION_PTR
#endif

using ValueWitnessInitializeBufferWithCopyOfBufferTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(55882))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessDestroyTy = void(* __ptrauth_swift_value_witness_function_pointer(1272))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(58298))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(34641))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(18648))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(61402))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessGetEnumTagSinglePayloadTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(24816))(const void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessStoreEnumTagSinglePayloadTy = void(* __ptrauth_swift_value_witness_function_pointer(41169))(void * _Nonnull, unsigned, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct ValueWitnessTable {
  ValueWitnessInitializeBufferWithCopyOfBufferTy _Nonnull initializeBufferWithCopyOfBuffer;
  ValueWitnessDestroyTy _Nonnull destroy;
  ValueWitnessInitializeWithCopyTy _Nonnull initializeWithCopy;
  ValueWitnessAssignWithCopyTy _Nonnull assignWithCopy;
  ValueWitnessInitializeWithTakeTy _Nonnull initializeWithTake;
  ValueWitnessAssignWithTakeTy _Nonnull assignWithTake;
  ValueWitnessGetEnumTagSinglePayloadTy _Nonnull getEnumTagSinglePayload;
  ValueWitnessStoreEnumTagSinglePayloadTy _Nonnull storeEnumTagSinglePayload;
  size_t size;
  size_t stride;
  unsigned flags;
  unsigned extraInhabitantCount;

  constexpr size_t getAlignment() const { return (flags & 255) + 1; }
};

using EnumValueWitnessGetEnumTagTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(41909))(const void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveProjectEnumDataTy = void(* __ptrauth_swift_value_witness_function_pointer(1053))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveInjectEnumTagTy = void(* __ptrauth_swift_value_witness_function_pointer(45796))(void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct EnumValueWitnessTable {
  ValueWitnessTable vwTable;
  EnumValueWitnessGetEnumTagTy _Nonnull getEnumTag;
  EnumValueWitnessDestructiveProjectEnumDataTy _Nonnull destructiveProjectEnumData;
  EnumValueWitnessDestructiveInjectEnumTagTy _Nonnull destructiveInjectEnumTag;
};

#undef SWIFT_NOEXCEPT_FUNCTION_PTR


// type metadata address for Bool.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSbN;
// type metadata address for Int8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss4Int8VN;
// type metadata address for UInt8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5UInt8VN;
// type metadata address for Int16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int16VN;
// type metadata address for UInt16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt16VN;
// type metadata address for Int32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int32VN;
// type metadata address for UInt32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt32VN;
// type metadata address for Int64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int64VN;
// type metadata address for UInt64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt64VN;
// type metadata address for Float.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSfN;
// type metadata address for Double.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSdN;
// type metadata address for OpaquePointer.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss13OpaquePointerVN;
// type metadata address for Int.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSiN;
// type metadata address for UInt.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSuN;

#ifdef __cplusplus
}
#endif


} // namespace _impl


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<bool> = true;

template<>
struct TypeMetadataTrait<bool> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSbN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int8_t> = true;

template<>
struct TypeMetadataTrait<int8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss4Int8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint8_t> = true;

template<>
struct TypeMetadataTrait<uint8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5UInt8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int16_t> = true;

template<>
struct TypeMetadataTrait<int16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint16_t> = true;

template<>
struct TypeMetadataTrait<uint16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int32_t> = true;

template<>
struct TypeMetadataTrait<int32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint32_t> = true;

template<>
struct TypeMetadataTrait<uint32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int64_t> = true;

template<>
struct TypeMetadataTrait<int64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint64_t> = true;

template<>
struct TypeMetadataTrait<uint64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<float> = true;

template<>
struct TypeMetadataTrait<float> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSfN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<double> = true;

template<>
struct TypeMetadataTrait<double> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSdN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<void *> = true;

template<>
struct TypeMetadataTrait<void *> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss13OpaquePointerVN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::Int> = true;

template<>
struct TypeMetadataTrait<swift::Int> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSiN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::UInt> = true;

template<>
struct TypeMetadataTrait<swift::UInt> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSuN;
  }
};

#pragma clang diagnostic pop

} // namespace swift

#endif
#ifdef __cplusplus
namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {
extern "C" {
#endif

// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_void_ptr_0_8(char * _Nonnull result, struct swift_interop_returnStub_swift_void_ptr_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sS2ayxGycfC(void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init()
SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSa9repeating5countSayxGx_SitcfC(const void * _Nonnull repeatedValue, ptrdiff_t count, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(repeating:count:)
SWIFT_EXTERN void $sSa15reserveCapacityyySiF(ptrdiff_t minimumCapacity, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // reserveCapacity(_:)
SWIFT_EXTERN void $sSa6appendyyxnF(const void * _Nonnull newElement, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(_:)
SWIFT_EXTERN void $sSa17_customRemoveLastxSgyF(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _customRemoveLast()
SWIFT_EXTERN void $sSa6remove2atxSi_tF(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t index, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // remove(at:)
SWIFT_EXTERN void $sSa6insert_2atyxn_SitF(const void * _Nonnull newElement, ptrdiff_t i, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // insert(_:at:)
SWIFT_EXTERN void $sSa9removeAll15keepingCapacityySb_tF(bool keepCapacity, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // removeAll(keepingCapacity:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_void_ptr_0_8 swift_interop_passDirect_swift_void_ptr_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_void_ptr_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN ptrdiff_t $sSa10startIndexSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa8endIndexSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa8distance4from2toS2i_SitF(ptrdiff_t start, ptrdiff_t end, struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
SWIFT_EXTERN void $sSayxSicig(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t index, struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa5countSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $sSa29_hoistableIsNativeTypeCheckedSbyF(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _hoistableIsNativeTypeChecked()
SWIFT_EXTERN ptrdiff_t $sSa8capacitySivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSa11descriptionSSvg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSa16debugDescriptionSSvg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSa12arrayLiteralSayxGxd_tcfC(struct swift_interop_passStub_swift_void_ptr_0_8 elements, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(arrayLiteral:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_uint64_t_0_8 swift_interop_passDirect_swift_uint64_t_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_uint64_t_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN ptrdiff_t $sSS5IndexV13encodedOffsetSivg(struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS5IndexV13encodedOffsetABSi_tcfC(ptrdiff_t offset) SWIFT_NOEXCEPT SWIFT_CALL; // init(encodedOffset:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 {
  uint64_t _1;
  uint8_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 1);
}

// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 result;
  memcpy(&result._1, value + 0, 8);
  memcpy(&result._2, value + 8, 8);
  return result;
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV_6withinABSgAB_SStcfC(struct swift_interop_passStub_swift_uint64_t_0_8 sourcePosition, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 target) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:within:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 utf8, struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // samePosition(in:)
SWIFT_EXTERN ptrdiff_t $sSS5IndexV9hashValueSivg(struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV12samePosition2inABSgSS_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 characters, struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // samePosition(in:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfC(struct swift_interop_passStub_swift_uint64_t_0_8 idx, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 target) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:within:)
struct Swift_String_Index {
  _Alignas(8) char _storage[8];
};

SWIFT_EXTERN void $sSqyxSgxcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull some, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:)
SWIFT_EXTERN void $sSq17unsafelyUnwrappedxvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sS2SycfC(void) SWIFT_NOEXCEPT SWIFT_CALL; // init()
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS10startIndexSS0B0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8endIndexSS0B0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS5countSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS8distance4from2toSiSS5IndexV_AEtF(struct swift_interop_passStub_swift_uint64_t_0_8 start, struct swift_interop_passStub_swift_uint64_t_0_8 end, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
SWIFT_EXTERN void $sSS15reserveCapacityyySiF(ptrdiff_t n, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // reserveCapacity(_:)
SWIFT_EXTERN void $sSS6appendyySSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 other, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(_:)
SWIFT_EXTERN void $sSS6append10contentsOfySS_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newElements, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(contentsOf:)
SWIFT_EXTERN void $sSS9removeAll15keepingCapacityySb_tF(bool keepCapacity, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // removeAll(keepingCapacity:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_uint64_t_8_16 {
  uint64_t _1;
  uint64_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_uint64_t_8_16(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_uint64_t_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS4utf8SS8UTF8ViewVvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS4utf8SS8UTF8ViewVvs(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10charactersSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS10charactersSSvs(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS9hashValueSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSS13_nfcCodeUnitsSays5UInt8VGvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $sSS7isEmptySbvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10lowercasedSSyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // lowercased()
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10uppercasedSSyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // uppercased()
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS16debugDescriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS11descriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS5writeyySSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 other, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // write(_:)
SWIFT_EXTERN void $sSS5_dumpyyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _dump()
SWIFT_EXTERN bool $sSS9hasPrefixySbSSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 prefix, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // hasPrefix(_:)
SWIFT_EXTERN bool $sSS9hasSuffixySbSSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 suffix, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // hasSuffix(_:)
struct swift_interop_stub_Swift_String {
#if UINTPTR_MAX == 0xFFFFFFFFFFFFFFFFu
uint64_t _1;
void * _Nullable _2;
#elif UINTPTR_MAX == 0xFFFFFFFF
uint32_t _1;
uint32_t _2;
uint32_t _3;
#endif
};
static SWIFT_INLINE_THUNK struct swift_interop_stub_Swift_String swift_interop_passDirect_Swift_String(const char * _Nonnull value) {
struct swift_interop_stub_Swift_String result;
#if UINTPTR_MAX == 0xFFFFFFFFFFFFFFFFu
memcpy(&result._1, value, 8);
memcpy(&result._2, value + 8, 8);
#elif UINTPTR_MAX == 0xFFFFFFFF
memcpy(&result._1, value, 4);
memcpy(&result._2, value + 4, 4);
memcpy(&result._3, value + 8, 4);
#endif
return result;
}
SWIFT_EXTERN void *_Nonnull $sSS10FoundationE19_bridgeToObjectiveCSo8NSStringCyF(swift_interop_stub_Swift_String) SWIFT_NOEXCEPT SWIFT_CALL;
SWIFT_EXTERN swift_interop_stub_Swift_String $sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(void * _Nullable) SWIFT_NOEXCEPT SWIFT_CALL;
SWIFT_EXTERN swift_interop_stub_Swift_String $sSS7cStringSSSPys4Int8VG_tcfC(const char * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;
struct Swift_String {
  _Alignas(8) char _storage[16];
};

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV10startIndexSS0D0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV8endIndexSS0D0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index5afterSS5IndexVAF_tF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(after:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index6beforeSS5IndexVAF_tF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(before:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF(struct swift_interop_passStub_swift_uint64_t_0_8 i, ptrdiff_t n, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(_:offsetBy:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF(struct swift_interop_passStub_swift_uint64_t_0_8 i, ptrdiff_t n, struct swift_interop_passStub_swift_uint64_t_0_8 limit, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(_:offsetBy:limitedBy:)
SWIFT_EXTERN ptrdiff_t $sSS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8 j, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
SWIFT_EXTERN uint8_t $sSS8UTF8ViewVys5UInt8VSS5IndexVcig(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS8UTF8ViewV11descriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS8UTF8ViewV16debugDescriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS8UTF8ViewV5countSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
struct Swift_UTF8View {
  _Alignas(8) char _storage[16];
};

}
}
}
namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {




























template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sq") Optional;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
class SWIFT_SYMBOL("s:SS") String;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::String> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sa") Array;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Array;

static_assert(1 <= 3, "unsupported generic requirement list for metadata func");
// Type metadata accessor for Array
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSaMa(swift::_impl::MetadataRequestTy, void * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sa") Array final {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK ~Array() noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Array(const Array &other) noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Array &operator =(const Array &other) noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Array &operator =(Array &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Array(Array &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
/// Creates a new, empty array.
/// This is equivalent to initializing with an empty array literal.
/// For example:
/// \code
/// var emptyArray = Array<Int>()
/// print(emptyArray.isEmpty)
/// // Prints "true"
///
/// emptyArray = []
/// print(emptyArray.isEmpty)
/// // Prints "true"
///
/// \endcode
  static SWIFT_INLINE_THUNK Array<T_0_0> init() SWIFT_SYMBOL("s:S2ayxGycfc");
/// Creates a new array containing the specified number of a single, repeated
/// value.
/// Here’s an example of creating an array initialized with five strings
/// containing the letter <em>Z</em>.
/// \code
/// let fiveZs = Array(repeating: "Z", count: 5)
/// print(fiveZs)
/// // Prints "["Z", "Z", "Z", "Z", "Z"]"
///
/// \endcode\param repeatedValue The element to repeat.
///
/// \param count The number of times to repeat the value passed in the
/// <code>repeating</code> parameter. <code>count</code> must be zero or greater.
///
  static SWIFT_INLINE_THUNK Array<T_0_0> init(const T_0_0& repeatedValue, swift::Int count) SWIFT_SYMBOL("s:Sa9repeating5countSayxGx_Sitcfc");
/// Reserves enough space to store the specified number of elements.
/// If you are adding a known number of elements to an array, use this method
/// to avoid multiple reallocations. This method ensures that the array has
/// unique, mutable, contiguous storage, with space allocated for at least
/// the requested number of elements.
/// Calling the <code>reserveCapacity(_:)</code> method on an array with bridged storage
/// triggers a copy to contiguous storage even if the existing storage
/// has room to store <code>minimumCapacity</code> elements.
/// For performance reasons, the size of the newly allocated storage might be
/// greater than the requested capacity. Use the array’s <code>capacity</code> property
/// to determine the size of the new storage.
/// <h1>Preserving an Array’s Geometric Growth Strategy</h1>
/// If you implement a custom data structure backed by an array that grows
/// dynamically, naively calling the <code>reserveCapacity(_:)</code> method can lead
/// to worse than expected performance. Arrays need to follow a geometric
/// allocation pattern for appending elements to achieve amortized
/// constant-time performance. The <code>Array</code> type’s <code>append(_:)</code> and
/// <code>append(contentsOf:)</code> methods take care of this detail for you, but
/// <code>reserveCapacity(_:)</code> allocates only as much space as you tell it to
/// (padded to a round value), and no more. This avoids over-allocation, but
/// can result in insertion not having amortized constant-time performance.
/// The following code declares <code>values</code>, an array of integers, and the
/// <code>addTenQuadratic()</code> function, which adds ten more values to the <code>values</code>
/// array on each call.
/// \code
///   var values: [Int] = [0, 1, 2, 3]
///
///   // Don't use 'reserveCapacity(_:)' like this
///   func addTenQuadratic() {
///       let newCount = values.count + 10
///       values.reserveCapacity(newCount)
///       for n in values.count..<newCount {
///           values.append(n)
///       }
///   }
///
/// \endcodeThe call to <code>reserveCapacity(_:)</code> increases the <code>values</code> array’s capacity
/// by exactly 10 elements on each pass through <code>addTenQuadratic()</code>, which
/// is linear growth. Instead of having constant time when averaged over
/// many calls, the function may decay to performance that is linear in
/// <code>values.count</code>. This is almost certainly not what you want.
/// In cases like this, the simplest fix is often to simply remove the call
/// to <code>reserveCapacity(_:)</code>, and let the <code>append(_:)</code> method grow the array
/// for you.
/// \code
///   func addTen() {
///       let newCount = values.count + 10
///       for n in values.count..<newCount {
///           values.append(n)
///       }
///   }
///
/// \endcodeIf you need more control over the capacity of your array, implement your
/// own geometric growth strategy, passing the size you compute to
/// <code>reserveCapacity(_:)</code>.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the number of elements in the array.
/// \param minimumCapacity The requested number of elements to store.
///
  SWIFT_INLINE_THUNK void reserveCapacity(swift::Int minimumCapacity) SWIFT_SYMBOL("s:Sa15reserveCapacityyySiF");
/// Adds a new element at the end of the array.
/// Use this method to append a single element to the end of a mutable array.
/// \code
/// var numbers = [1, 2, 3, 4, 5]
/// numbers.append(100)
/// print(numbers)
/// // Prints "[1, 2, 3, 4, 5, 100]"
///
/// \endcodeBecause arrays increase their allocated capacity using an exponential
/// strategy, appending a single element to an array is an O(1) operation
/// when averaged over many calls to the <code>append(_:)</code> method. When an array
/// has additional capacity and is not sharing its storage with another
/// instance, appending an element is O(1). When an array needs to
/// reallocate storage before appending or its storage is shared with
/// another copy, appending is O(<em>n</em>), where <em>n</em> is the length of the array.
/// complexity:
/// O(1) on average, over many calls to <code>append(_:)</code> on the
/// same array.
/// \param newElement The element to append to the array.
///
  SWIFT_INLINE_THUNK void append(const T_0_0& newElement) SWIFT_SYMBOL("s:Sa6appendyyxnF");
  SWIFT_INLINE_THUNK swift::Optional<T_0_0> _customRemoveLast() SWIFT_SYMBOL("s:Sa17_customRemoveLastxSgyF");
/// Removes and returns the element at the specified position.
/// All the elements following the specified position are moved up to
/// close the gap.
/// \code
/// var measurements: [Double] = [1.1, 1.5, 2.9, 1.2, 1.5, 1.3, 1.2]
/// let removed = measurements.remove(at: 2)
/// print(measurements)
/// // Prints "[1.1, 1.5, 1.2, 1.5, 1.3, 1.2]"
///
/// \endcodecomplexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array.
/// \param index The position of the element to remove. <code>index</code> must
/// be a valid index of the array.
///
///
/// returns:
/// The element at the specified index.
  SWIFT_INLINE_THUNK T_0_0 removeAt(swift::Int index) SWIFT_SYMBOL("s:Sa6remove2atxSi_tF");
/// Inserts a new element at the specified position.
/// The new element is inserted before the element currently at the specified
/// index. If you pass the array’s <code>endIndex</code> property as the <code>index</code>
/// parameter, the new element is appended to the array.
/// \code
/// var numbers = [1, 2, 3, 4, 5]
/// numbers.insert(100, at: 3)
/// numbers.insert(200, at: numbers.endIndex)
///
/// print(numbers)
/// // Prints "[1, 2, 3, 100, 4, 5, 200]"
///
/// \endcodecomplexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array. If
/// <code>i == endIndex</code>, this method is equivalent to <code>append(_:)</code>.
/// \param newElement The new element to insert into the array.
///
/// \param i The position at which to insert the new element.
/// <code>index</code> must be a valid index of the array or equal to its <code>endIndex</code>
/// property.
///
  SWIFT_INLINE_THUNK void insertAt(const T_0_0& newElement, swift::Int i) SWIFT_SYMBOL("s:Sa6insert_2atyxn_SitF");
/// Removes all elements from the array.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array.
/// \param keepCapacity Pass <code>true</code> to keep the existing capacity of
/// the array after removing its elements. The default value is
/// <code>false</code>.
///
  SWIFT_INLINE_THUNK void removeAllKeepingCapacity(bool keepCapacity) SWIFT_SYMBOL("s:Sa9removeAll15keepingCapacityySb_tF");
  SWIFT_INLINE_THUNK swift::Int getStartIndex() const SWIFT_SYMBOL("s:Sa10startIndexSivp");
  SWIFT_INLINE_THUNK swift::Int getEndIndex() const SWIFT_SYMBOL("s:Sa8endIndexSivp");
/// Returns the distance between two indices.
/// \param start A valid index of the collection.
///
/// \param end Another valid index of the collection. If <code>end</code> is equal to
/// <code>start</code>, the result is zero.
///
///
/// returns:
/// The distance between <code>start</code> and <code>end</code>.
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(swift::Int start, swift::Int end) const SWIFT_SYMBOL("s:Sa8distance4from2toS2i_SitF");
SWIFT_INLINE_THUNK T_0_0 operator [](swift::Int index) const SWIFT_SYMBOL("s:SayxSicig");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:Sa5countSivp");
/// Returns <code>true</code> if the array is native and does not need a deferred
/// type check.  May be hoisted by the optimizer, which means its
/// results may be stale by the time they are used if there is an
/// inout violation in user code.
  SWIFT_INLINE_THUNK bool _hoistableIsNativeTypeChecked() const SWIFT_SYMBOL("s:Sa29_hoistableIsNativeTypeCheckedSbyF");
  SWIFT_INLINE_THUNK swift::Int getCapacity() const SWIFT_SYMBOL("s:Sa8capacitySivp");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:Sa11descriptionSSvp");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:Sa16debugDescriptionSSvp");
/// Creates an array from the given array literal.
/// Do not call this initializer directly. It is used by the compiler
/// when you use an array literal. Instead, create a new array by using an
/// array literal as its value. To do this, enclose a comma-separated list of
/// values in square brackets.
/// Here, an array of strings is created from an array literal holding
/// only strings.
/// \code
/// let ingredients = ["cocoa beans", "sugar", "cocoa butter", "salt"]
///
/// \endcode\param elements A variadic list of elements of the new array.
///
  static SWIFT_INLINE_THUNK Array<T_0_0> init(const Array<T_0_0>& elements) SWIFT_SYMBOL("s:Sa12arrayLiteralSayxGxd_tcfc");
private:
  SWIFT_INLINE_THUNK Array(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Array _make() noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Array(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Array<T_0_0>;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSayxGD;
  static inline constexpr $sSayxGD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Array {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Array<T_0_0> &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Array<T_0_0> &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Array<T_0_0> returnNewValue(T callable) {
    auto result = Array<T_0_0>::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
struct TypeMetadataTrait<swift::Array<T_0_0>> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata())._0;
  }
};
namespace _impl{
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {

























































































































































































































































































































class SWIFT_SYMBOL("s:SS8UTF8ViewV") UTF8View;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::UTF8View> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
class SWIFT_SYMBOL("s:SS5IndexV") String_Index;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::String_Index> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {

class _impl_String_Index;

// Type metadata accessor for Index
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSS5IndexVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS5IndexV") String_Index final {
public:
  SWIFT_INLINE_THUNK ~String_Index() noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK String_Index(const String_Index &other) noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK String_Index &operator =(const String_Index &other) noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK String_Index &operator =(String_Index &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER String_Index(String_Index &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Int getEncodedOffset() const SWIFT_SYMBOL("s:SS5IndexV13encodedOffsetSivp");
/// Creates a new index at the specified code unit offset.
/// \param offset An offset in code units.
///
  static SWIFT_INLINE_THUNK String_Index init(swift::Int offset) SWIFT_SYMBOL("s:SS5IndexV13encodedOffsetABSi_tcfc");
/// Creates an index in the given string that corresponds exactly to the
/// specified position.
/// If the index passed as <code>sourcePosition</code> represents the start of an
/// extended grapheme cluster—the element type of a string—then the
/// initializer succeeds.
/// The following example converts the position of the Unicode scalar <code>"e"</code>
/// into its corresponding position in the string. The character at that
/// position is the composed <code>"é"</code> character.
/// \code
/// let cafe = "Cafe\u{0301}"
/// print(cafe)
/// // Prints "Café"
///
/// let scalarsIndex = cafe.unicodeScalars.firstIndex(of: "e")!
/// let stringIndex = String.Index(scalarsIndex, within: cafe)!
///
/// print(cafe[...stringIndex])
/// // Prints "Café"
///
/// \endcodeIf the index passed as <code>sourcePosition</code> doesn’t have an exact
/// corresponding position in <code>target</code>, the result of the initializer is
/// <code>nil</code>. For example, an attempt to convert the position of the combining
/// acute accent (<code>"\u{0301}"</code>) fails. Combining Unicode scalars do not have
/// their own position in a string.
/// \code
/// let nextScalarsIndex = cafe.unicodeScalars.index(after: scalarsIndex)
/// let nextStringIndex = String.Index(nextScalarsIndex, within: cafe)
///
/// print(nextStringIndex)
/// // Prints "nil"
///
/// \endcode\param sourcePosition A position in a view of the <code>target</code> parameter.
/// <code>sourcePosition</code> must be a valid index of at least one of the views
/// of <code>target</code>.
///
/// \param target The string referenced by the resulting index.
///
  static SWIFT_INLINE_THUNK swift::Optional<String_Index> init(const String_Index& sourcePosition, const String& target) SWIFT_SYMBOL("s:SS5IndexV_6withinABSgAB_SStcfc");
/// Returns the position in the given UTF-8 view that corresponds exactly to
/// this index.
/// This example first finds the position of the character <code>"é"</code>, and then
/// uses this method find the same position in the string’s <code>utf8</code> view.
/// \code
/// let cafe = "Café"
/// if let i = cafe.firstIndex(of: "é") {
///     let j = i.samePosition(in: cafe.utf8)!
///     print(Array(cafe.utf8[j...]))
/// }
/// // Prints "[195, 169]"
///
/// \endcode\param utf8 The view to use for the index conversion. This index
/// must be a valid index of at least one view of the string shared by
/// <code>utf8</code>.
///
///
/// returns:
/// The position in <code>utf8</code> that corresponds exactly to this index.
/// If this index does not have an exact corresponding position in <code>utf8</code>,
/// this method returns <code>nil</code>. For example, an attempt to convert the
/// position of a UTF-16 trailing surrogate returns <code>nil</code>.
  SWIFT_INLINE_THUNK swift::Optional<String_Index> samePositionIn(const UTF8View& utf8) const SWIFT_SYMBOL("s:SS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF");
  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:SS5IndexV9hashValueSivp");
/// Returns the position in the given string that corresponds exactly to this
/// index.
/// This example first finds the position of a space (UTF-8 code point <code>32</code>)
/// in a string’s <code>utf8</code> view and then uses this method find the same position
/// in the string.
/// \code
/// let cafe = "Café 🍵"
/// let i = cafe.unicodeScalars.firstIndex(of: "🍵")!
/// let j = i.samePosition(in: cafe)!
/// print(cafe[j...])
/// // Prints "🍵"
///
/// \endcode\param characters The string to use for the index conversion.
/// This index must be a valid index of at least one view of <code>characters</code>.
///
///
/// returns:
/// The position in <code>characters</code> that corresponds exactly to
/// this index. If this index does not have an exact corresponding
/// position in <code>characters</code>, this method returns <code>nil</code>. For example,
/// an attempt to convert the position of a UTF-8 continuation byte
/// returns <code>nil</code>.
  SWIFT_INLINE_THUNK swift::Optional<String_Index> samePositionIn(const String& characters) const SWIFT_SYMBOL("s:SS5IndexV12samePosition2inABSgSS_tF");
/// Creates an index in the given UTF-8 view that corresponds exactly to the
/// specified <code>UTF16View</code> position.
/// The following example finds the position of a space in a string’s <code>utf16</code>
/// view and then converts that position to an index in the string’s
/// <code>utf8</code> view.
/// \code
/// let cafe = "Café 🍵"
///
/// let utf16Index = cafe.utf16.firstIndex(of: 32)!
/// let utf8Index = String.UTF8View.Index(utf16Index, within: cafe.utf8)!
///
/// print(Array(cafe.utf8[..<utf8Index]))
/// // Prints "[67, 97, 102, 195, 169]"
///
/// \endcodeIf the position passed in <code>utf16Index</code> doesn’t have an exact
/// corresponding position in <code>utf8</code>, the result of the initializer is
/// <code>nil</code>. For example, because UTF-8 and UTF-16 represent high Unicode code
/// points differently, an attempt to convert the position of the trailing
/// surrogate of a UTF-16 surrogate pair fails.
/// The next example attempts to convert the indices of the two UTF-16 code
/// points that represent the teacup emoji (<code>"🍵"</code>). The index of the lead
/// surrogate is successfully converted to a position in <code>utf8</code>, but the
/// index of the trailing surrogate is not.
/// \code
/// let emojiHigh = cafe.utf16.index(after: utf16Index)
/// print(String.UTF8View.Index(emojiHigh, within: cafe.utf8))
/// // Prints "Optional(String.Index(...))"
///
/// let emojiLow = cafe.utf16.index(after: emojiHigh)
/// print(String.UTF8View.Index(emojiLow, within: cafe.utf8))
/// // Prints "nil"
///
/// \endcode\param sourcePosition A position in a <code>String</code> or one of its views.
///
/// \param target The <code>UTF8View</code> in which to find the new position.
///
  static SWIFT_INLINE_THUNK swift::Optional<String_Index> init(const String_Index& idx, const UTF8View& target) SWIFT_SYMBOL("s:SS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfc");
private:
  SWIFT_INLINE_THUNK String_Index() noexcept {}
  static SWIFT_INLINE_THUNK String_Index _make() noexcept { return String_Index(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[8];
  friend class _impl::_impl_String_Index;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSS5IndexVD;
  static inline constexpr $sSS5IndexVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_String_Index {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(String_Index &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const String_Index &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER String_Index returnNewValue(T callable) {
    auto result = String_Index::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::String_Index> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSS5IndexVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::String_Index> = true;
template<>
struct implClassFor<swift::String_Index> { using type = swift::_impl::_impl_String_Index; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
































































































































































































































































/// A type that represents either a wrapped value or the absence of a value.
/// You use the <code>Optional</code> type whenever you use optional values, even if you
/// never type the word <code>Optional</code>. Swift’s type system usually shows the
/// wrapped type’s name with a trailing question mark (<code>?</code>) instead of showing
/// the full type name. For example, if a variable has the type <code>Int?</code>, that’s
/// just another way of writing <code>Optional<Int></code>. The shortened form is
/// preferred for ease of reading and writing code.
/// The types of <code>shortForm</code> and <code>longForm</code> in the following code sample are
/// the same:
/// \code
/// let shortForm: Int? = Int("42")
/// let longForm: Optional<Int> = Int("42")
///
/// \endcodeThe <code>Optional</code> type is an enumeration with two cases. <code>Optional.none</code> is
/// equivalent to the <code>nil</code> literal. <code>Optional.some(Wrapped)</code> stores a wrapped
/// value. For example:
/// \code
/// let number: Int? = Optional.some(42)
/// let noNumber: Int? = Optional.none
/// print(noNumber == nil)
/// // Prints "true"
///
/// \endcodeYou must unwrap the value of an <code>Optional</code> instance before you can use it
/// in many contexts. Because Swift provides several ways to safely unwrap
/// optional values, you can choose the one that helps you write clear,
/// concise code.
/// The following examples use this dictionary of image names and file paths:
/// \code
/// let imagePaths = ["star": "/glyphs/star.png",
///                   "portrait": "/images/content/portrait.jpg",
///                   "spacer": "/images/shared/spacer.gif"]
///
/// \endcodeGetting a dictionary’s value using a key returns an optional value, so
/// <code>imagePaths["star"]</code> has type <code>Optional<String></code> or, written in the
/// preferred manner, <code>String?</code>.
/// <h2>Optional Binding</h2>
/// To conditionally bind the wrapped value of an <code>Optional</code> instance to a new
/// variable, use one of the optional binding control structures, including
/// <code>if let</code>, <code>guard let</code>, and <code>switch</code>.
/// \code
/// if let starPath = imagePaths["star"] {
///     print("The star image is at '\(starPath)'")
/// } else {
///     print("Couldn't find the star image")
/// }
/// // Prints "The star image is at '/glyphs/star.png'"
///
/// \endcode<h2>Optional Chaining</h2>
/// To safely access the properties and methods of a wrapped instance, use the
/// postfix optional chaining operator (postfix <code>?</code>). The following example uses
/// optional chaining to access the <code>hasSuffix(_:)</code> method on a <code>String?</code>
/// instance.
/// \code
/// if imagePaths["star"]?.hasSuffix(".png") == true {
///     print("The star image is in PNG format")
/// }
/// // Prints "The star image is in PNG format"
///
/// \endcode<h2>Using the Nil-Coalescing Operator</h2>
/// Use the nil-coalescing operator (<code>??</code>) to supply a default value in case
/// the <code>Optional</code> instance is <code>nil</code>. Here a default path is supplied for an
/// image that is missing from <code>imagePaths</code>.
/// \code
/// let defaultImagePath = "/images/default.png"
/// let heartPath = imagePaths["heart"] ?? defaultImagePath
/// print(heartPath)
/// // Prints "/images/default.png"
///
/// \endcodeThe <code>??</code> operator also works with another <code>Optional</code> instance on the
/// right-hand side. As a result, you can chain multiple <code>??</code> operators
/// together.
/// \code
/// let shapePath = imagePaths["cir"] ?? imagePaths["squ"] ?? defaultImagePath
/// print(shapePath)
/// // Prints "/images/default.png"
///
/// \endcode<h2>Unconditional Unwrapping</h2>
/// When you’re certain that an instance of <code>Optional</code> contains a value, you
/// can unconditionally unwrap the value by using the forced
/// unwrap operator (postfix <code>!</code>). For example, the result of the failable <code>Int</code>
/// initializer is unconditionally unwrapped in the example below.
/// \code
/// let number = Int("42")!
/// print(number)
/// // Prints "42"
///
/// \endcodeYou can also perform unconditional optional chaining by using the postfix
/// <code>!</code> operator.
/// \code
/// let isPNG = imagePaths["star"]!.hasSuffix(".png")
/// print(isPNG)
/// // Prints "true"
///
/// \endcodeUnconditionally unwrapping a <code>nil</code> instance with <code>!</code> triggers a runtime
/// error.
namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Optional;

static_assert(1 <= 3, "unsupported generic requirement list for metadata func");
// Type metadata accessor for Optional
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSqMa(swift::_impl::MetadataRequestTy, void * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum Optional
extern "C" {
extern unsigned $sSq4noneyxSgABmlFWC;
extern unsigned $sSq4someyxSgxcABmlFWC;
}

} // namespace _impl

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sq") Optional final {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK ~Optional() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Optional(const Optional &other) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Optional &operator =(const Optional &other) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Optional &operator =(Optional &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Optional(Optional &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    some SWIFT_SYMBOL("s:Sq4someyxSgxcABmlF"),
    none SWIFT_SYMBOL("s:Sq4noneyxSgABmlF")
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_some {  // impl struct for case some
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::some;
    }
    SWIFT_INLINE_THUNK Optional<T_0_0> operator()(const T_0_0& val) const;
  } some SWIFT_SYMBOL("s:Sq4someyxSgxcABmlF");
  SWIFT_INLINE_THUNK bool isSome() const;
  SWIFT_INLINE_THUNK T_0_0 getSome() const;

  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK Optional<T_0_0> operator()() const;
  } none SWIFT_SYMBOL("s:Sq4noneyxSgABmlF");
  SWIFT_INLINE_THUNK bool isNone() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    switch (_getEnumTag()) {
      case 0: return cases::some;
      case 1: return cases::none;
      default: abort();
    }
  }

/// Creates an instance that stores the given value.
  static SWIFT_INLINE_THUNK swift::Optional<T_0_0> init(const T_0_0& some_) SWIFT_SYMBOL("s:SqyxSgxcfc");
  SWIFT_INLINE_THUNK T_0_0 getUnsafelyUnwrapped() const SWIFT_SYMBOL("s:Sq17unsafelyUnwrappedxvp");
#define SWIFT_CXX_INTEROP_OPTIONAL_MIXIN
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#if __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Alternatively, allow user to find the header using additional include path into '<toolchain>/lib/swift'.
#elif __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop
private:
  SWIFT_INLINE_THUNK Optional(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Optional _make() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Optional(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Optional<T_0_0>;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sxSgD;
  static inline constexpr $sxSgD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Optional {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Optional<T_0_0> &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Optional<T_0_0> &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Optional<T_0_0> returnNewValue(T callable) {
    auto result = Optional<T_0_0>::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
struct TypeMetadataTrait<swift::Optional<T_0_0>> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata())._0;
  }
};
namespace _impl{
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {

























































































































































































































































































































































































































namespace _impl {

class _impl_String;

// Type metadata accessor for String
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSSMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS") String final {
public:
  SWIFT_INLINE_THUNK ~String() noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK String(const String &other) noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK String &operator =(const String &other) noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK String &operator =(String &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER String(String &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
/// Creates an empty string.
/// Using this initializer is equivalent to initializing a string with an
/// empty string literal.
/// \code
/// let empty = ""
/// let alsoEmpty = String()
///
/// \endcode
  static SWIFT_INLINE_THUNK String init() SWIFT_SYMBOL("s:S2Sycfc");
  SWIFT_INLINE_THUNK String_Index getStartIndex() const SWIFT_SYMBOL("s:SS10startIndexSS0B0Vvp");
  SWIFT_INLINE_THUNK String_Index getEndIndex() const SWIFT_SYMBOL("s:SS8endIndexSS0B0Vvp");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:SS5countSivp");
/// Returns the distance between two indices.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the resulting distance.
/// \param start A valid index of the collection.
///
/// \param end Another valid index of the collection. If <code>end</code> is equal to
/// <code>start</code>, the result is zero.
///
///
/// returns:
/// The distance between <code>start</code> and <code>end</code>.
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(const String_Index& start, const String_Index& end) const SWIFT_SYMBOL("s:SS8distance4from2toSiSS5IndexV_AEtF");
/// Reserves enough space in the string’s underlying storage to store the
/// specified number of ASCII characters.
/// Because each character in a string can require more than a single ASCII
/// character’s worth of storage, additional allocation may be necessary
/// when adding characters to a string after a call to
/// <code>reserveCapacity(_:)</code>.
/// complexity:
/// O(<em>n</em>)
/// \param n The minimum number of ASCII character’s worth of storage
/// to allocate.
///
  SWIFT_INLINE_THUNK void reserveCapacity(swift::Int n) SWIFT_SYMBOL("s:SS15reserveCapacityyySiF");
/// Appends the given string to this string.
/// The following example builds a customized greeting by using the
/// <code>append(_:)</code> method:
/// \code
/// var greeting = "Hello, "
/// if let name = getUserName() {
///     greeting.append(name)
/// } else {
///     greeting.append("friend")
/// }
/// print(greeting)
/// // Prints "Hello, friend"
///
/// \endcode\param other Another string.
///
  SWIFT_INLINE_THUNK void append(const String& other) SWIFT_SYMBOL("s:SS6appendyySSF");
  SWIFT_INLINE_THUNK void appendContentsOf(const String& newElements) SWIFT_SYMBOL("s:SS6append10contentsOfySS_tF");
/// Replaces this string with the empty string.
/// Calling this method invalidates any existing indices for use with this
/// string.
/// \param keepCapacity Pass <code>true</code> to prevent the release of the
/// string’s allocated storage. Retaining the storage can be a useful
/// optimization when you’re planning to grow the string again. The
/// default value is <code>false</code>.
///
  SWIFT_INLINE_THUNK void removeAllKeepingCapacity(bool keepCapacity) SWIFT_SYMBOL("s:SS9removeAll15keepingCapacityySb_tF");
  SWIFT_INLINE_THUNK UTF8View getUtf8() const SWIFT_SYMBOL("s:SS4utf8SS8UTF8ViewVvp");
  SWIFT_INLINE_THUNK void setUtf8(const UTF8View& newValue) SWIFT_SYMBOL("s:SS4utf8SS8UTF8ViewVvp");
  SWIFT_INLINE_THUNK String getCharacters() const SWIFT_SYMBOL("s:SS10charactersSSvp");
  SWIFT_INLINE_THUNK void setCharacters(const String& newValue) SWIFT_SYMBOL("s:SS10charactersSSvp");
  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:SS9hashValueSivp");
  SWIFT_INLINE_THUNK Array<uint8_t> get_nfcCodeUnits() const SWIFT_SYMBOL("s:SS13_nfcCodeUnitsSays5UInt8VGvp");
  SWIFT_INLINE_THUNK bool isEmpty() const SWIFT_SYMBOL("s:SS7isEmptySbvp");
/// Returns a lowercase version of the string.
/// Here’s an example of transforming a string to all lowercase letters.
/// \code
/// let cafe = "BBQ Café 🍵"
/// print(cafe.lowercased())
/// // Prints "bbq café 🍵"
///
/// \endcodecomplexity:
/// O(<em>n</em>)
///
/// returns:
/// A lowercase copy of the string.
  SWIFT_INLINE_THUNK String lowercased() const SWIFT_SYMBOL("s:SS10lowercasedSSyF");
/// Returns an uppercase version of the string.
/// The following example transforms a string to uppercase letters:
/// \code
/// let cafe = "Café 🍵"
/// print(cafe.uppercased())
/// // Prints "CAFÉ 🍵"
///
/// \endcodecomplexity:
/// O(<em>n</em>)
///
/// returns:
/// An uppercase copy of the string.
  SWIFT_INLINE_THUNK String uppercased() const SWIFT_SYMBOL("s:SS10uppercasedSSyF");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:SS16debugDescriptionSSvp");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:SS11descriptionSSvp");
/// Appends the given string to this string.
/// \param other A string to append.
///
  SWIFT_INLINE_THUNK void write(const String& other) SWIFT_SYMBOL("s:SS5writeyySSF");
  SWIFT_INLINE_THUNK void _dump() const SWIFT_SYMBOL("s:SS5_dumpyyF");
  SWIFT_INLINE_THUNK bool hasPrefix(const String& prefix) const SWIFT_SYMBOL("s:SS9hasPrefixySbSSF");
  SWIFT_INLINE_THUNK bool hasSuffix(const String& suffix) const SWIFT_SYMBOL("s:SS9hasSuffixySbSSF");
#if defined(__OBJC__)
  SWIFT_INLINE_THUNK operator NSString * _Nonnull () const noexcept {
    return (__bridge_transfer NSString *)(_impl::$sSS10FoundationE19_bridgeToObjectiveCSo8NSStringCyF(_impl::swift_interop_passDirect_Swift_String(_getOpaquePointer())));
  }
static SWIFT_INLINE_THUNK String init(NSString * _Nonnull nsString) noexcept {
    auto result = _make();
    auto res = _impl::$sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ((__bridge void *)nsString);
    memcpy(result._getOpaquePointer(), &res, sizeof(res));
    return result;
  }

#endif
#define SWIFT_CXX_INTEROP_STRING_MIXIN
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#if __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Alternatively, allow user to find the header using additional include path into '<toolchain>/lib/swift'.
#elif __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop
private:
  SWIFT_INLINE_THUNK String() noexcept {}
  static SWIFT_INLINE_THUNK String _make() noexcept { return String(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[16];
  friend class _impl::_impl_String;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSSD;
  static inline constexpr $sSSD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_String {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(String &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const String &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER String returnNewValue(T callable) {
    auto result = String::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::String> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSSMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::String> = true;
template<>
struct implClassFor<swift::String> { using type = swift::_impl::_impl_String; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {




















































































































































































namespace _impl {

class _impl_UTF8View;

// Type metadata accessor for UTF8View
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSS8UTF8ViewVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS8UTF8ViewV") UTF8View final {
public:
  SWIFT_INLINE_THUNK ~UTF8View() noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK UTF8View(const UTF8View &other) noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK UTF8View &operator =(const UTF8View &other) noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK UTF8View &operator =(UTF8View &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER UTF8View(UTF8View &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK String_Index getStartIndex() const SWIFT_SYMBOL("s:SS8UTF8ViewV10startIndexSS0D0Vvp");
  SWIFT_INLINE_THUNK String_Index getEndIndex() const SWIFT_SYMBOL("s:SS8UTF8ViewV8endIndexSS0D0Vvp");
/// Returns the next consecutive position after <code>i</code>.
/// precondition:
/// The next position is representable.
  SWIFT_INLINE_THUNK String_Index indexAfter(const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index5afterSS5IndexVAF_tF");
  SWIFT_INLINE_THUNK String_Index indexBefore(const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index6beforeSS5IndexVAF_tF");
  SWIFT_INLINE_THUNK String_Index indexOffsetBy(const String_Index& i, swift::Int n) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF");
  SWIFT_INLINE_THUNK swift::Optional<String_Index> indexOffsetByLimitedBy(const String_Index& i, swift::Int n, const String_Index& limit) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF");
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(const String_Index& i, const String_Index& j) const SWIFT_SYMBOL("s:SS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF");
SWIFT_INLINE_THUNK uint8_t operator [](const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewVys5UInt8VSS5IndexVcig");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:SS8UTF8ViewV11descriptionSSvp");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:SS8UTF8ViewV16debugDescriptionSSvp");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:SS8UTF8ViewV5countSivp");
private:
  SWIFT_INLINE_THUNK UTF8View() noexcept {}
  static SWIFT_INLINE_THUNK UTF8View _make() noexcept { return UTF8View(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[16];
  friend class _impl::_impl_UTF8View;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSS8UTF8ViewVD;
  static inline constexpr $sSS8UTF8ViewVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_UTF8View {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(UTF8View &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const UTF8View &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER UTF8View returnNewValue(T callable) {
    auto result = UTF8View::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::UTF8View> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSS8UTF8ViewVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::UTF8View> = true;
template<>
struct implClassFor<swift::UTF8View> { using type = swift::_impl::_impl_UTF8View; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {


















































































































































































































































































































  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init() {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sS2ayxGycfC(swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init(const T_0_0& repeatedValue, swift::Int count) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSa9repeating5countSayxGx_SitcfC(swift::_impl::getOpaquePointer(repeatedValue), count, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::reserveCapacity(swift::Int minimumCapacity) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa15reserveCapacityyySiF(minimumCapacity, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::append(const T_0_0& newElement) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa6appendyyxnF(swift::_impl::getOpaquePointer(newElement), swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> Array<T_0_0>::_customRemoveLast() {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$sSa17_customRemoveLastxSgyF(result, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Array<T_0_0>::removeAt(swift::Int index) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSa6remove2atxSi_tF(reinterpret_cast<void *>(&returnValue), index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSa6remove2atxSi_tF(returnValue, index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSa6remove2atxSi_tF(storage, index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSa6remove2atxSi_tF(reinterpret_cast<void *>(&returnValue), index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::insertAt(const T_0_0& newElement, swift::Int i) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa6insert_2atyxn_SitF(swift::_impl::getOpaquePointer(newElement), i, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::removeAllKeepingCapacity(bool keepCapacity) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa9removeAll15keepingCapacityySb_tF(keepCapacity, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getStartIndex() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa10startIndexSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getEndIndex() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8endIndexSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::distanceFromTo(swift::Int start, swift::Int end) const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8distance4from2toS2i_SitF(start, end, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Array<T_0_0>::operator [](swift::Int index) const SWIFT_SYMBOL("s:SayxSicig") {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSayxSicig(reinterpret_cast<void *>(&returnValue), index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSayxSicig(returnValue, index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSayxSicig(storage, index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSayxSicig(reinterpret_cast<void *>(&returnValue), index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getCount() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa5countSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK bool Array<T_0_0>::_hoistableIsNativeTypeChecked() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa29_hoistableIsNativeTypeCheckedSbyF(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getCapacity() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8capacitySivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK String Array<T_0_0>::getDescription() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSa11descriptionSSvg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK String Array<T_0_0>::getDebugDescription() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSa16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init(const Array<T_0_0>& elements) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSa12arrayLiteralSayxGxd_tcfC(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_impl::_impl_Array<T_0_0>::getOpaquePointer(elements)), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String_Index::getEncodedOffset() const {
  return _impl::$sSS5IndexV13encodedOffsetSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String_Index String_Index::init(swift::Int offset) {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS5IndexV13encodedOffsetABSi_tcfC(offset));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::init(const String_Index& sourcePosition, const String& target) {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV_6withinABSgAB_SStcfC(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(sourcePosition)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(target))));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::samePositionIn(const UTF8View& utf8) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(utf8)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String_Index::getHashValue() const {
  return _impl::$sSS5IndexV9hashValueSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::samePositionIn(const String& characters) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV12samePosition2inABSgSS_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(characters)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::init(const String_Index& idx, const UTF8View& target) {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfC(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(idx)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(target))));
  });
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK Optional<T_0_0> Optional<T_0_0>::_impl_some::operator()(const T_0_0& val) const {
    auto result = Optional<T_0_0>::_make();
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
    void *ptr = ::swift::_impl::_impl_RefCountedClass::copyOpaquePointer(val);
    memcpy(result._getOpaquePointer(), &ptr, sizeof(ptr));
} else if constexpr (::swift::_impl::isValueType<T_0_0>) {
    alignas(T_0_0) unsigned char buffer[sizeof(T_0_0)];
    auto *valCopy = new(buffer) T_0_0(val);
    swift::_impl::implClassFor<T_0_0>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<T_0_0>::type::getOpaquePointer(*valCopy));
} else {
    memcpy(result._getOpaquePointer(), &val, sizeof(val));
}
#pragma clang diagnostic pop
    result._destructiveInjectEnumTag(0);
    return result;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK  bool Optional<T_0_0>::isSome() const {
    return *this == Optional<T_0_0>::some;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK T_0_0 Optional<T_0_0>::getSome() const {
    if (!isSome()) abort();
    alignas(Optional) unsigned char buffer[sizeof(Optional)];
    auto *thisCopy = new(buffer) Optional(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  returnValue = *reinterpret_cast<void **>(payloadFromDestruction);
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
  return ::swift::_impl::implClassFor<T_0_0>::type::initializeWithTake(reinterpret_cast<char * _Nonnull>(returnValue), payloadFromDestruction);
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
abort();
  } else {
  T_0_0 returnValue;
memcpy(&returnValue, payloadFromDestruction, sizeof(returnValue));
  return returnValue;
  }
#pragma clang diagnostic pop
}
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK Optional<T_0_0> Optional<T_0_0>::_impl_none::operator()() const {
    auto result = Optional<T_0_0>::_make();
    result._destructiveInjectEnumTag(1);
    return result;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK  bool Optional<T_0_0>::isNone() const {
    return *this == Optional<T_0_0>::none;
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> Optional<T_0_0>::init(const T_0_0& some_) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$sSqyxSgxcfC(result, swift::_impl::getOpaquePointer(some_), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Optional<T_0_0>::getUnsafelyUnwrapped() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSq17unsafelyUnwrappedxvg(reinterpret_cast<void *>(&returnValue), swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSq17unsafelyUnwrappedxvg(returnValue, swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSq17unsafelyUnwrappedxvg(storage, swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSq17unsafelyUnwrappedxvg(reinterpret_cast<void *>(&returnValue), swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  SWIFT_INLINE_THUNK String String::init() {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sS2SycfC());
  });
  }
  SWIFT_INLINE_THUNK String_Index String::getStartIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS10startIndexSS0B0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index String::getEndIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8endIndexSS0B0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String::getCount() const {
  return _impl::$sSS5countSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK swift::Int String::distanceFromTo(const String_Index& start, const String_Index& end) const {
  return _impl::$sSS8distance4from2toSiSS5IndexV_AEtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(start)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(end)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK void String::reserveCapacity(swift::Int n) {
  return _impl::$sSS15reserveCapacityyySiF(n, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::append(const String& other) {
  return _impl::$sSS6appendyySSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(other)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::appendContentsOf(const String& newElements) {
  return _impl::$sSS6append10contentsOfySS_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(newElements)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::removeAllKeepingCapacity(bool keepCapacity) {
  return _impl::$sSS9removeAll15keepingCapacityySb_tF(keepCapacity, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK UTF8View String::getUtf8() const {
  return _impl::_impl_UTF8View::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS4utf8SS8UTF8ViewVvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::setUtf8(const UTF8View& newValue) {
  return _impl::$sSS4utf8SS8UTF8ViewVvs(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(newValue)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK String String::getCharacters() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10charactersSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::setCharacters(const String& newValue) {
  return _impl::$sSS10charactersSSvs(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(newValue)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int String::getHashValue() const {
  return _impl::$sSS9hashValueSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK Array<uint8_t> String::get_nfcCodeUnits() const {
  return _impl::_impl_Array<uint8_t>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSS13_nfcCodeUnitsSays5UInt8VGvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK bool String::isEmpty() const {
  return _impl::$sSS7isEmptySbvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String String::lowercased() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10lowercasedSSyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String String::uppercased() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10uppercasedSSyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String String::getDebugDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String String::getDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS11descriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::write(const String& other) {
  return _impl::$sSS5writeyySSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(other)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::_dump() const {
  return _impl::$sSS5_dumpyyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK bool String::hasPrefix(const String& prefix) const {
  return _impl::$sSS9hasPrefixySbSSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(prefix)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK bool String::hasSuffix(const String& suffix) const {
  return _impl::$sSS9hasSuffixySbSSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(suffix)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::getStartIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV10startIndexSS0D0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::getEndIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV8endIndexSS0D0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexAfter(const String_Index& i) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index5afterSS5IndexVAF_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexBefore(const String_Index& i) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index6beforeSS5IndexVAF_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexOffsetBy(const String_Index& i, swift::Int n) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), n, _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> UTF8View::indexOffsetByLimitedBy(const String_Index& i, swift::Int n, const String_Index& limit) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), n, _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(limit)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int UTF8View::distanceFromTo(const String_Index& i, const String_Index& j) const {
  return _impl::$sSS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(j)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
SWIFT_INLINE_THUNK uint8_t UTF8View::operator [](const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewVys5UInt8VSS5IndexVcig") {
  return _impl::$sSS8UTF8ViewVys5UInt8VSS5IndexVcig(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String UTF8View::getDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS8UTF8ViewV11descriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String UTF8View::getDebugDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS8UTF8ViewV16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int UTF8View::getCount() const {
  return _impl::$sSS8UTF8ViewV5countSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!==(_:_:)'.

// Unavailable in C++: Swift operator function '%(_:_:)'.

// Unavailable in C++: Swift operator function '%=(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '===(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '??(_:_:)'.

// Unavailable in C++: Swift operator function '??(_:_:)'.

class AdditiveArithmetic { } SWIFT_UNAVAILABLE_MSG("protocol 'AdditiveArithmetic' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'AnyClass'.

class AnyKeyPath { } SWIFT_UNAVAILABLE_MSG("class 'AnyKeyPath' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'AnyObject'.

// Unavailable in C++: Swift type alias 'ArrayLiteralConvertible'.

class BidirectionalCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'BidirectionalCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'BidirectionalIndexable'.

// Unavailable in C++: Swift type alias 'BidirectionalSlice'.

class BinaryFloatingPoint { } SWIFT_UNAVAILABLE_MSG("protocol 'BinaryFloatingPoint' can not yet be represented in C++");

class BinaryInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'BinaryInteger' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'BooleanLiteralConvertible'.

// Unavailable in C++: Swift type alias 'BooleanLiteralType'.

// Unavailable in C++: Swift type alias 'CBool'.

// Unavailable in C++: Swift type alias 'CChar'.

// Unavailable in C++: Swift type alias 'CChar16'.

// Unavailable in C++: Swift type alias 'CChar32'.

// Unavailable in C++: Swift type alias 'CDouble'.

// Unavailable in C++: Swift type alias 'CFloat'.

// Unavailable in C++: Swift type alias 'CFloat16'.

// Unavailable in C++: Swift type alias 'CInt'.

// Unavailable in C++: Swift type alias 'CLong'.

// Unavailable in C++: Swift type alias 'CLongDouble'.

// Unavailable in C++: Swift type alias 'CLongLong'.

// Unavailable in C++: Swift type alias 'CShort'.

// Unavailable in C++: Swift type alias 'CSignedChar'.

// Unavailable in C++: Swift type alias 'CUnsignedChar'.

// Unavailable in C++: Swift type alias 'CUnsignedInt'.

// Unavailable in C++: Swift type alias 'CUnsignedLong'.

// Unavailable in C++: Swift type alias 'CUnsignedLongLong'.

// Unavailable in C++: Swift type alias 'CUnsignedShort'.

class CVarArg { } SWIFT_UNAVAILABLE_MSG("protocol 'CVarArg' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CWideChar'.

class CaseIterable { } SWIFT_UNAVAILABLE_MSG("protocol 'CaseIterable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ClosedRangeIndex'.

// Unavailable in C++: Swift type alias 'Codable'.

class CodingKey { } SWIFT_UNAVAILABLE_MSG("protocol 'CodingKey' can not yet be represented in C++");

class CodingKeyRepresentable { } SWIFT_UNAVAILABLE_MSG("protocol 'CodingKeyRepresentable' can not yet be represented in C++");

class Collection { } SWIFT_UNAVAILABLE_MSG("protocol 'Collection' can not yet be represented in C++");

class CommandLine { } SWIFT_UNAVAILABLE_MSG("enum 'CommandLine' is not yet exposed to C++");

class Comparable { } SWIFT_UNAVAILABLE_MSG("protocol 'Comparable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ConcurrentValue'.

// Unavailable in C++: Swift type alias 'CountableClosedRange'.

// Unavailable in C++: Swift type alias 'CountablePartialRangeFrom'.

// Unavailable in C++: Swift type alias 'CountableRange'.

class CustomDebugStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomDebugStringConvertible' can not yet be represented in C++");

class CustomLeafReflectable { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomLeafReflectable' can not yet be represented in C++");

class CustomPlaygroundDisplayConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomPlaygroundDisplayConvertible' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CustomPlaygroundQuickLookable'.

class CustomReflectable { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomReflectable' can not yet be represented in C++");

class CustomStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomStringConvertible' can not yet be represented in C++");

class Decodable { } SWIFT_UNAVAILABLE_MSG("protocol 'Decodable' can not yet be represented in C++");

class Decoder { } SWIFT_UNAVAILABLE_MSG("protocol 'Decoder' can not yet be represented in C++");

class DecodingError { } SWIFT_UNAVAILABLE_MSG("enum 'DecodingError' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'DefaultBidirectionalIndices'.

// Unavailable in C++: Swift type alias 'DefaultRandomAccessIndices'.

// Unavailable in C++: Swift type alias 'DictionaryIndex'.

// Unavailable in C++: Swift type alias 'DictionaryIterator'.

// Unavailable in C++: Swift type alias 'DictionaryLiteral'.

// Unavailable in C++: Swift type alias 'DictionaryLiteralConvertible'.

class DurationProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'DurationProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'EmptyIterator'.

class Encodable { } SWIFT_UNAVAILABLE_MSG("protocol 'Encodable' can not yet be represented in C++");

class Encoder { } SWIFT_UNAVAILABLE_MSG("protocol 'Encoder' can not yet be represented in C++");

class EncodingError { } SWIFT_UNAVAILABLE_MSG("enum 'EncodingError' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'EnumeratedIterator'.

class Equatable { } SWIFT_UNAVAILABLE_MSG("protocol 'Equatable' can not yet be represented in C++");

class ExpressibleByArrayLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByArrayLiteral' can not yet be represented in C++");

class ExpressibleByBooleanLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByBooleanLiteral' can not yet be represented in C++");

class ExpressibleByDictionaryLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByDictionaryLiteral' can not yet be represented in C++");

class ExpressibleByExtendedGraphemeClusterLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByExtendedGraphemeClusterLiteral' can not yet be represented in C++");

class ExpressibleByFloatLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByFloatLiteral' can not yet be represented in C++");

class ExpressibleByIntegerLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByIntegerLiteral' can not yet be represented in C++");

class ExpressibleByNilLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByNilLiteral' can not yet be represented in C++");

class ExpressibleByStringInterpolation { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByStringInterpolation' can not yet be represented in C++");

class ExpressibleByStringLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByStringLiteral' can not yet be represented in C++");

class ExpressibleByUnicodeScalarLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByUnicodeScalarLiteral' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ExtendedGraphemeClusterLiteralConvertible'.

// Unavailable in C++: Swift type alias 'ExtendedGraphemeClusterType'.

class FixedWidthInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'FixedWidthInteger' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'FlattenBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'FlattenBidirectionalCollectionIndex'.

// Unavailable in C++: Swift type alias 'FlattenCollection'.

// Unavailable in C++: Swift type alias 'FlattenCollectionIndex'.

// Unavailable in C++: Swift type alias 'Float32'.

// Unavailable in C++: Swift type alias 'Float64'.

// Unavailable in C++: Swift type alias 'FloatLiteralConvertible'.

// Unavailable in C++: Swift type alias 'FloatLiteralType'.

class FloatingPoint { } SWIFT_UNAVAILABLE_MSG("protocol 'FloatingPoint' can not yet be represented in C++");

class FloatingPointClassification { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointClassification' is not yet exposed to C++");

class FloatingPointRoundingRule { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointRoundingRule' is not yet exposed to C++");

class FloatingPointSign { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointSign' is not yet exposed to C++");

class Hashable { } SWIFT_UNAVAILABLE_MSG("protocol 'Hashable' can not yet be represented in C++");

class Identifiable { } SWIFT_UNAVAILABLE_MSG("protocol 'Identifiable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ImplicitlyUnwrappedOptional'.

// Unavailable in C++: Swift type alias 'Indexable'.

// Unavailable in C++: Swift type alias 'IndexableBase'.

class InstantProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'InstantProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'IntegerLiteralConvertible'.

// Unavailable in C++: Swift type alias 'IntegerLiteralType'.

// Unavailable in C++: Swift type alias 'IteratorOverOne'.

class IteratorProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'IteratorProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'JoinedIterator'.

class KeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'KeyPath' can not yet be exposed to C++");

class KeyedDecodingContainerProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'KeyedDecodingContainerProtocol' can not yet be represented in C++");

class KeyedEncodingContainerProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'KeyedEncodingContainerProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'LazyBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyCollection'.

class LazyCollectionProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'LazyCollectionProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'LazyDropWhileBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyDropWhileCollection'.

// Unavailable in C++: Swift type alias 'LazyDropWhileIndex'.

// Unavailable in C++: Swift type alias 'LazyDropWhileIterator'.

// Unavailable in C++: Swift type alias 'LazyFilterBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyFilterCollection'.

// Unavailable in C++: Swift type alias 'LazyFilterIndex'.

// Unavailable in C++: Swift type alias 'LazyFilterIterator'.

// Unavailable in C++: Swift type alias 'LazyMapBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyMapCollection'.

// Unavailable in C++: Swift type alias 'LazyMapIterator'.

// Unavailable in C++: Swift type alias 'LazyMapRandomAccessCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileIndex'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileIterator'.

// Unavailable in C++: Swift type alias 'LazyRandomAccessCollection'.

class LazySequenceProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'LazySequenceProtocol' can not yet be represented in C++");

class LosslessStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'LosslessStringConvertible' can not yet be represented in C++");

class ManagedBuffer { } SWIFT_UNAVAILABLE_MSG("generic generic class 'ManagedBuffer' can not yet be exposed to C++");

class MemoryLayout { } SWIFT_UNAVAILABLE_MSG("generic enum 'MemoryLayout' is not yet exposed to C++");

class MirrorPath { } SWIFT_UNAVAILABLE_MSG("protocol 'MirrorPath' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'MutableBidirectionalSlice'.

class MutableCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'MutableCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'MutableIndexable'.

// Unavailable in C++: Swift type alias 'MutableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableBidirectionalSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableSlice'.

// Unavailable in C++: Swift type alias 'MutableSlice'.

class Never { } SWIFT_UNAVAILABLE_MSG("enum 'Never' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'NilLiteralConvertible'.

class Numeric { } SWIFT_UNAVAILABLE_MSG("protocol 'Numeric' can not yet be represented in C++");

class OptionSet { } SWIFT_UNAVAILABLE_MSG("protocol 'OptionSet' can not yet be represented in C++");

class PartialKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'PartialKeyPath' can not yet be exposed to C++");

// Unavailable in C++: Swift type alias 'PlaygroundQuickLook'.

class RandomAccessCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'RandomAccessCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RandomAccessIndexable'.

// Unavailable in C++: Swift type alias 'RandomAccessSlice'.

class RandomNumberGenerator { } SWIFT_UNAVAILABLE_MSG("protocol 'RandomNumberGenerator' can not yet be represented in C++");

class RangeExpression { } SWIFT_UNAVAILABLE_MSG("protocol 'RangeExpression' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RangeReplaceableBidirectionalSlice'.

class RangeReplaceableCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'RangeReplaceableCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RangeReplaceableIndexable'.

// Unavailable in C++: Swift type alias 'RangeReplaceableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'RangeReplaceableSlice'.

class RawRepresentable { } SWIFT_UNAVAILABLE_MSG("protocol 'RawRepresentable' can not yet be represented in C++");

class ReferenceWritableKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'ReferenceWritableKeyPath' can not yet be exposed to C++");

class Result { } SWIFT_UNAVAILABLE_MSG("generic requirements for generic enum 'Result' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ReversedIndex'.

// Unavailable in C++: Swift type alias 'ReversedRandomAccessCollection'.

class SIMD { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMD' can not yet be represented in C++");

class SIMDScalar { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMDScalar' can not yet be represented in C++");

class SIMDStorage { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMDStorage' can not yet be represented in C++");

class Sendable { } SWIFT_UNAVAILABLE_MSG("protocol 'Sendable' can not yet be represented in C++");

class Sequence { } SWIFT_UNAVAILABLE_MSG("protocol 'Sequence' can not yet be represented in C++");

class SetAlgebra { } SWIFT_UNAVAILABLE_MSG("protocol 'SetAlgebra' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'SetIndex'.

// Unavailable in C++: Swift type alias 'SetIterator'.

class SignedInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'SignedInteger' can not yet be represented in C++");

class SignedNumeric { } SWIFT_UNAVAILABLE_MSG("protocol 'SignedNumeric' can not yet be represented in C++");

class SingleValueDecodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'SingleValueDecodingContainer' can not yet be represented in C++");

class SingleValueEncodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'SingleValueEncodingContainer' can not yet be represented in C++");

class Strideable { } SWIFT_UNAVAILABLE_MSG("protocol 'Strideable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'StringInterpolationConvertible'.

class StringInterpolationProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'StringInterpolationProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'StringLiteralConvertible'.

// Unavailable in C++: Swift type alias 'StringLiteralType'.

class StringProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'StringProtocol' can not yet be represented in C++");

class TextOutputStream { } SWIFT_UNAVAILABLE_MSG("protocol 'TextOutputStream' can not yet be represented in C++");

class TextOutputStreamable { } SWIFT_UNAVAILABLE_MSG("protocol 'TextOutputStreamable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'UTF16'.

// Unavailable in C++: Swift type alias 'UTF32'.

// Unavailable in C++: Swift type alias 'UTF8'.

// Unavailable in C++: Swift type alias 'UnboundedRange'.

class UnboundedRange_ { } SWIFT_UNAVAILABLE_MSG("enum 'UnboundedRange_' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'UnfoldFirstSequence'.

class Unicode { } SWIFT_UNAVAILABLE_MSG("enum 'Unicode' is not yet exposed to C++");

class UnicodeCodec { } SWIFT_UNAVAILABLE_MSG("protocol 'UnicodeCodec' can not yet be represented in C++");

class UnicodeDecodingResult { } SWIFT_UNAVAILABLE_MSG("enum 'UnicodeDecodingResult' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'UnicodeScalar'.

// Unavailable in C++: Swift type alias 'UnicodeScalarLiteralConvertible'.

// Unavailable in C++: Swift type alias 'UnicodeScalarType'.

class UnkeyedDecodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'UnkeyedDecodingContainer' can not yet be represented in C++");

class UnkeyedEncodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'UnkeyedEncodingContainer' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'UnsafeBufferPointerIterator'.

// Unavailable in C++: Swift type alias 'UnsafeConcurrentValue'.

// Unavailable in C++: Swift type alias 'UnsafeMutableRawBufferPointerIterator'.

// Unavailable in C++: Swift type alias 'UnsafeRawBufferPointerIterator'.

class UnsafeSendable { } SWIFT_UNAVAILABLE_MSG("protocol 'UnsafeSendable' can not yet be represented in C++");

class UnsignedInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'UnsignedInteger' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'Void'.

class WritableKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'WritableKeyPath' can not yet be exposed to C++");

// Unavailable in C++: Swift type alias 'Zip2Iterator'.

// Unavailable in C++: Swift global function 'abs(_:)'.

// Unavailable in C++: Swift global function 'all(_:)'.

// Unavailable in C++: Swift global function 'any(_:)'.

// Unavailable in C++: Swift global function 'assert(_:_:file:line:)'.

// Unavailable in C++: Swift global function 'assertionFailure(_:file:line:)'.

// Unavailable in C++: Swift macro 'column()'.

// Unavailable in C++: Swift global function 'debugPrint(_:separator:terminator:)'.

// Unavailable in C++: Swift global function 'debugPrint(_:separator:terminator:to:)'.

// Unavailable in C++: Swift macro 'dsohandle()'.

// Unavailable in C++: Swift global function 'dump(_:name:indent:maxDepth:maxItems:)'.

// Unavailable in C++: Swift global function 'dump(_:to:name:indent:maxDepth:maxItems:)'.

// Unavailable in C++: Swift macro 'error(_:)'.

// Unavailable in C++: Swift macro 'externalMacro(module:type:)'.

// Unavailable in C++: Swift global function 'fatalError(_:file:line:)'.

// Unavailable in C++: Swift macro 'file()'.

// Unavailable in C++: Swift macro 'fileID()'.

// Unavailable in C++: Swift macro 'filePath()'.

// Unavailable in C++: Swift macro 'function()'.

// Unavailable in C++: Swift global function 'getVaList(_:)'.

// Unavailable in C++: Swift global function 'isKnownUniquelyReferenced(_:)'.

// Unavailable in C++: Swift global function 'isKnownUniquelyReferenced(_:)'.

// Unavailable in C++: Swift macro 'line()'.

// Unavailable in C++: Swift global function 'max(_:_:)'.

// Unavailable in C++: Swift global function 'max(_:_:_:_:)'.

// Unavailable in C++: Swift global function 'min(_:_:)'.

// Unavailable in C++: Swift global function 'min(_:_:_:_:)'.

// Unavailable in C++: Swift global function 'numericCast(_:)'.

// Unavailable in C++: Swift global function 'pointwiseMax(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMax(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMin(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMin(_:_:)'.

// Unavailable in C++: Swift global function 'precondition(_:_:file:line:)'.

// Unavailable in C++: Swift global function 'preconditionFailure(_:file:line:)'.

// Unavailable in C++: Swift global function 'print(_:separator:terminator:)'.

// Unavailable in C++: Swift global function 'print(_:separator:terminator:to:)'.

// Unavailable in C++: Swift global function 'readLine(strippingNewline:)'.

// Unavailable in C++: Swift global function 'repeatElement(_:count:)'.

// Unavailable in C++: Swift global function 'sequence(first:next:)'.

// Unavailable in C++: Swift global function 'sequence(state:next:)'.

// Unavailable in C++: Swift global function 'stride(from:through:by:)'.

// Unavailable in C++: Swift global function 'stride(from:to:by:)'.

// Unavailable in C++: Swift global function 'swap(_:_:)'.

// Unavailable in C++: Swift global function 'transcode(_:_:_:_:stopOnError:)'.

// Unavailable in C++: Swift global function 'transcode(_:from:to:stoppingOnError:into:)'.

// Unavailable in C++: Swift global function 'type(of:)'.

// Unavailable in C++: Swift global function 'unsafeBitCast(_:to:)'.

// Unavailable in C++: Swift global function 'unsafeDowncast(_:to:)'.

// Unavailable in C++: Swift macro 'warning(_:)'.

// Unavailable in C++: Swift global function 'withExtendedLifetime(_:_:)'.

// Unavailable in C++: Swift global function 'withExtendedLifetime(_:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeMutableBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeMutablePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeTemporaryAllocation(byteCount:alignment:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeTemporaryAllocation(of:capacity:_:)'.

// Unavailable in C++: Swift global function 'withVaList(_:_:)'.

// Unavailable in C++: Swift global function 'withoutActuallyEscaping(_:do:)'.

// Unavailable in C++: Swift global function 'zip(_:_:)'.

// Unavailable in C++: Swift operator function '~=(_:_:)'.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#if __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Alternatively, allow user to find the header using additional include path into '<toolchain>/lib/swift'.
#elif __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop

} // namespace swift

#pragma clang diagnostic pop
#undef SWIFT_SYMBOL
#endif // SWIFT_SWIFT_H
#ifdef SWIFT_SYMBOL
#undef SWIFT_SYMBOL
#endif
#define SWIFT_SYMBOL(usrValue) SWIFT_SYMBOL_MODULE_USR("Sentry", usrValue)
#ifndef SWIFT_PRINTED_CORE
#define SWIFT_PRINTED_CORE
namespace swift SWIFT_PRIVATE_ATTR {

namespace _impl {

#ifdef __cplusplus
extern "C" {
#endif

// Swift type metadata response type.
struct MetadataResponseTy {
  void * _Null_unspecified _0;
  uint64_t _1;
};
// Swift type metadata request type.
typedef uint64_t MetadataRequestTy;

#if __cplusplus > 201402L
#  define SWIFT_NOEXCEPT_FUNCTION_PTR noexcept
#else
#  define SWIFT_NOEXCEPT_FUNCTION_PTR
#endif

using ValueWitnessInitializeBufferWithCopyOfBufferTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(55882))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessDestroyTy = void(* __ptrauth_swift_value_witness_function_pointer(1272))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(58298))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(34641))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(18648))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(61402))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessGetEnumTagSinglePayloadTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(24816))(const void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessStoreEnumTagSinglePayloadTy = void(* __ptrauth_swift_value_witness_function_pointer(41169))(void * _Nonnull, unsigned, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct ValueWitnessTable {
  ValueWitnessInitializeBufferWithCopyOfBufferTy _Nonnull initializeBufferWithCopyOfBuffer;
  ValueWitnessDestroyTy _Nonnull destroy;
  ValueWitnessInitializeWithCopyTy _Nonnull initializeWithCopy;
  ValueWitnessAssignWithCopyTy _Nonnull assignWithCopy;
  ValueWitnessInitializeWithTakeTy _Nonnull initializeWithTake;
  ValueWitnessAssignWithTakeTy _Nonnull assignWithTake;
  ValueWitnessGetEnumTagSinglePayloadTy _Nonnull getEnumTagSinglePayload;
  ValueWitnessStoreEnumTagSinglePayloadTy _Nonnull storeEnumTagSinglePayload;
  size_t size;
  size_t stride;
  unsigned flags;
  unsigned extraInhabitantCount;

  constexpr size_t getAlignment() const { return (flags & 255) + 1; }
};

using EnumValueWitnessGetEnumTagTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(41909))(const void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveProjectEnumDataTy = void(* __ptrauth_swift_value_witness_function_pointer(1053))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveInjectEnumTagTy = void(* __ptrauth_swift_value_witness_function_pointer(45796))(void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct EnumValueWitnessTable {
  ValueWitnessTable vwTable;
  EnumValueWitnessGetEnumTagTy _Nonnull getEnumTag;
  EnumValueWitnessDestructiveProjectEnumDataTy _Nonnull destructiveProjectEnumData;
  EnumValueWitnessDestructiveInjectEnumTagTy _Nonnull destructiveInjectEnumTag;
};

#undef SWIFT_NOEXCEPT_FUNCTION_PTR


// type metadata address for Bool.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSbN;
// type metadata address for Int8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss4Int8VN;
// type metadata address for UInt8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5UInt8VN;
// type metadata address for Int16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int16VN;
// type metadata address for UInt16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt16VN;
// type metadata address for Int32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int32VN;
// type metadata address for UInt32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt32VN;
// type metadata address for Int64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int64VN;
// type metadata address for UInt64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt64VN;
// type metadata address for Float.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSfN;
// type metadata address for Double.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSdN;
// type metadata address for OpaquePointer.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss13OpaquePointerVN;
// type metadata address for Int.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSiN;
// type metadata address for UInt.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSuN;

#ifdef __cplusplus
}
#endif


} // namespace _impl


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<bool> = true;

template<>
struct TypeMetadataTrait<bool> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSbN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int8_t> = true;

template<>
struct TypeMetadataTrait<int8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss4Int8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint8_t> = true;

template<>
struct TypeMetadataTrait<uint8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5UInt8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int16_t> = true;

template<>
struct TypeMetadataTrait<int16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint16_t> = true;

template<>
struct TypeMetadataTrait<uint16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int32_t> = true;

template<>
struct TypeMetadataTrait<int32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint32_t> = true;

template<>
struct TypeMetadataTrait<uint32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int64_t> = true;

template<>
struct TypeMetadataTrait<int64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint64_t> = true;

template<>
struct TypeMetadataTrait<uint64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<float> = true;

template<>
struct TypeMetadataTrait<float> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSfN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<double> = true;

template<>
struct TypeMetadataTrait<double> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSdN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<void *> = true;

template<>
struct TypeMetadataTrait<void *> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss13OpaquePointerVN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::Int> = true;

template<>
struct TypeMetadataTrait<swift::Int> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSiN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::UInt> = true;

template<>
struct TypeMetadataTrait<swift::UInt> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSuN;
  }
};

#pragma clang diagnostic pop

} // namespace swift

#endif
#endif
#ifdef __cplusplus
namespace Sentry SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("Sentry") {
namespace _impl {
extern "C" {
#endif

// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_Sentry_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_Sentry_uint64_t_0_8_void_ptr_8_16 swift_interop_passDirect_Sentry_uint64_t_0_8_void_ptr_8_16(const char * _Nonnull value) {
  struct swift_interop_passStub_Sentry_uint64_t_0_8_void_ptr_8_16 result;
  memcpy(&result._1, value + 0, 8);
  memcpy(&result._2, value + 8, 8);
  return result;
}

SWIFT_EXTERN void $s6Sentry0A10LogMessageV13stringLiteralACSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_Sentry_uint64_t_0_8_void_ptr_8_16 value) SWIFT_NOEXCEPT SWIFT_CALL; // init(stringLiteral:)
SWIFT_EXTERN void $s6Sentry0A16RedactRegionTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_Sentry_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_Sentry_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_Sentry_uint64_t_0_8_void_ptr_8_16(char * _Nonnull result, struct swift_interop_returnStub_Sentry_uint64_t_0_8_void_ptr_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_Sentry_uint64_t_0_8_void_ptr_8_16 $s6Sentry0A16RedactRegionTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _

#ifdef __cplusplus
}
}
}
namespace Sentry SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("Sentry") {


























class SWIFT_SYMBOL("s:6Sentry0A10LogMessageV19StringInterpolationV") StringInterpolation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<Sentry::StringInterpolation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace Sentry SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("Sentry") {
class SWIFT_SYMBOL("s:6Sentry0A10LogMessageV") SentryLogMessage;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<Sentry::SentryLogMessage> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace Sentry SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("Sentry") {
namespace _impl {

class _impl_SentryLogMessage;

// Type metadata accessor for SentryLogMessage
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s6Sentry0A10LogMessageVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:6Sentry0A10LogMessageV") SentryLogMessage final {
public:
  SWIFT_INLINE_THUNK ~SentryLogMessage() noexcept {
    auto metadata = _impl::$s6Sentry0A10LogMessageVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK SentryLogMessage(const SentryLogMessage &other) noexcept {
    auto metadata = _impl::$s6Sentry0A10LogMessageVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK SentryLogMessage &operator =(const SentryLogMessage &other) noexcept {
    auto metadata = _impl::$s6Sentry0A10LogMessageVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK SentryLogMessage &operator =(SentryLogMessage &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER SentryLogMessage(SentryLogMessage &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  static SWIFT_INLINE_THUNK SentryLogMessage init(const swift::String& value) SWIFT_SYMBOL("s:6Sentry0A10LogMessageV13stringLiteralACSS_tcfc");
private:
  SWIFT_INLINE_THUNK SentryLogMessage(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK SentryLogMessage _make() noexcept {
    auto metadata = _impl::$s6Sentry0A10LogMessageVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return SentryLogMessage(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_SentryLogMessage;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s6Sentry0A10LogMessageVD;
  static inline constexpr $s6Sentry0A10LogMessageVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_SentryLogMessage {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(SentryLogMessage &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const SentryLogMessage &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER SentryLogMessage returnNewValue(T callable) {
    auto result = SentryLogMessage::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s6Sentry0A10LogMessageVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<Sentry::SentryLogMessage> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return Sentry::_impl::$s6Sentry0A10LogMessageVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<Sentry::SentryLogMessage> = true;
template<>
static inline const constexpr bool isOpaqueLayout<Sentry::SentryLogMessage> = true;
template<>
struct implClassFor<Sentry::SentryLogMessage> { using type = Sentry::_impl::_impl_SentryLogMessage; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace Sentry SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("Sentry") {



class SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO") SentryRedactRegionType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<Sentry::SentryRedactRegionType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace Sentry SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("Sentry") {
namespace _impl {

class _impl_SentryRedactRegionType;

// Type metadata accessor for SentryRedactRegionType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s6Sentry0A16RedactRegionTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum SentryRedactRegionType
extern "C" {
extern unsigned $s6Sentry0A16RedactRegionTypeO6redactyA2CmFWC;
extern unsigned $s6Sentry0A16RedactRegionTypeO7clipOutyA2CmFWC;
extern unsigned $s6Sentry0A16RedactRegionTypeO9clipBeginyA2CmFWC;
extern unsigned $s6Sentry0A16RedactRegionTypeO7clipEndyA2CmFWC;
extern unsigned $s6Sentry0A16RedactRegionTypeO13redactSwiftUIyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO") SentryRedactRegionType final {
public:
  SWIFT_INLINE_THUNK ~SentryRedactRegionType() noexcept {
    auto metadata = _impl::$s6Sentry0A16RedactRegionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK SentryRedactRegionType(const SentryRedactRegionType &other) noexcept {
    auto metadata = _impl::$s6Sentry0A16RedactRegionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK SentryRedactRegionType &operator =(const SentryRedactRegionType &other) noexcept {
    auto metadata = _impl::$s6Sentry0A16RedactRegionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK SentryRedactRegionType &operator =(SentryRedactRegionType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER SentryRedactRegionType(SentryRedactRegionType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    redact SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO6redactyA2CmF"),
    clipOut SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO7clipOutyA2CmF"),
    clipBegin SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO9clipBeginyA2CmF"),
    clipEnd SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO7clipEndyA2CmF"),
    redactSwiftUI SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO13redactSwiftUIyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_redact {  // impl struct for case redact
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::redact;
    }
    SWIFT_INLINE_THUNK SentryRedactRegionType operator()() const;
  } redact SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO6redactyA2CmF");
  SWIFT_INLINE_THUNK bool isRedact() const;

  inline const static struct _impl_clipOut {  // impl struct for case clipOut
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::clipOut;
    }
    SWIFT_INLINE_THUNK SentryRedactRegionType operator()() const;
  } clipOut SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO7clipOutyA2CmF");
  SWIFT_INLINE_THUNK bool isClipOut() const;

  inline const static struct _impl_clipBegin {  // impl struct for case clipBegin
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::clipBegin;
    }
    SWIFT_INLINE_THUNK SentryRedactRegionType operator()() const;
  } clipBegin SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO9clipBeginyA2CmF");
  SWIFT_INLINE_THUNK bool isClipBegin() const;

  inline const static struct _impl_clipEnd {  // impl struct for case clipEnd
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::clipEnd;
    }
    SWIFT_INLINE_THUNK SentryRedactRegionType operator()() const;
  } clipEnd SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO7clipEndyA2CmF");
  SWIFT_INLINE_THUNK bool isClipEnd() const;

  inline const static struct _impl_redactSwiftUI {  // impl struct for case redactSwiftUI
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::redactSwiftUI;
    }
    SWIFT_INLINE_THUNK SentryRedactRegionType operator()() const;
  } redactSwiftUI SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO13redactSwiftUIyA2CmF");
  SWIFT_INLINE_THUNK bool isRedactSwiftUI() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s6Sentry0A16RedactRegionTypeO6redactyA2CmFWC) return cases::redact;
    if (tag == _impl::$s6Sentry0A16RedactRegionTypeO7clipOutyA2CmFWC) return cases::clipOut;
    if (tag == _impl::$s6Sentry0A16RedactRegionTypeO9clipBeginyA2CmFWC) return cases::clipBegin;
    if (tag == _impl::$s6Sentry0A16RedactRegionTypeO7clipEndyA2CmFWC) return cases::clipEnd;
    if (tag == _impl::$s6Sentry0A16RedactRegionTypeO13redactSwiftUIyA2CmFWC) return cases::redactSwiftUI;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<SentryRedactRegionType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK SentryRedactRegionType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK SentryRedactRegionType _make() noexcept {
    auto metadata = _impl::$s6Sentry0A16RedactRegionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return SentryRedactRegionType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s6Sentry0A16RedactRegionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s6Sentry0A16RedactRegionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s6Sentry0A16RedactRegionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_SentryRedactRegionType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s6Sentry0A16RedactRegionTypeOD;
  static inline constexpr $s6Sentry0A16RedactRegionTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_SentryRedactRegionType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(SentryRedactRegionType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const SentryRedactRegionType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER SentryRedactRegionType returnNewValue(T callable) {
    auto result = SentryRedactRegionType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s6Sentry0A16RedactRegionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<Sentry::SentryRedactRegionType> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return Sentry::_impl::$s6Sentry0A16RedactRegionTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<Sentry::SentryRedactRegionType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<Sentry::SentryRedactRegionType> = true;
template<>
struct implClassFor<Sentry::SentryRedactRegionType> { using type = Sentry::_impl::_impl_SentryRedactRegionType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace Sentry SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("Sentry") {

















  SWIFT_INLINE_THUNK SentryLogMessage SentryLogMessage::init(const swift::String& value) {
  return _impl::_impl_SentryLogMessage::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s6Sentry0A10LogMessageV13stringLiteralACSS_tcfC(result, _impl::swift_interop_passDirect_Sentry_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)));
  });
  }
  SWIFT_INLINE_THUNK SentryRedactRegionType SentryRedactRegionType::_impl_redact::operator()() const {
    auto result = SentryRedactRegionType::_make();
    result._destructiveInjectEnumTag(_impl::$s6Sentry0A16RedactRegionTypeO6redactyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool SentryRedactRegionType::isRedact() const {
    return *this == SentryRedactRegionType::redact;
  }
  SWIFT_INLINE_THUNK SentryRedactRegionType SentryRedactRegionType::_impl_clipOut::operator()() const {
    auto result = SentryRedactRegionType::_make();
    result._destructiveInjectEnumTag(_impl::$s6Sentry0A16RedactRegionTypeO7clipOutyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool SentryRedactRegionType::isClipOut() const {
    return *this == SentryRedactRegionType::clipOut;
  }
  SWIFT_INLINE_THUNK SentryRedactRegionType SentryRedactRegionType::_impl_clipBegin::operator()() const {
    auto result = SentryRedactRegionType::_make();
    result._destructiveInjectEnumTag(_impl::$s6Sentry0A16RedactRegionTypeO9clipBeginyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool SentryRedactRegionType::isClipBegin() const {
    return *this == SentryRedactRegionType::clipBegin;
  }
  SWIFT_INLINE_THUNK SentryRedactRegionType SentryRedactRegionType::_impl_clipEnd::operator()() const {
    auto result = SentryRedactRegionType::_make();
    result._destructiveInjectEnumTag(_impl::$s6Sentry0A16RedactRegionTypeO7clipEndyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool SentryRedactRegionType::isClipEnd() const {
    return *this == SentryRedactRegionType::clipEnd;
  }
  SWIFT_INLINE_THUNK SentryRedactRegionType SentryRedactRegionType::_impl_redactSwiftUI::operator()() const {
    auto result = SentryRedactRegionType::_make();
    result._destructiveInjectEnumTag(_impl::$s6Sentry0A16RedactRegionTypeO13redactSwiftUIyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool SentryRedactRegionType::isRedactSwiftUI() const {
    return *this == SentryRedactRegionType::redactSwiftUI;
  }
  SWIFT_INLINE_THUNK  bool SentryRedactRegionType::isUnknownDefault() const {
    return *this == SentryRedactRegionType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<SentryRedactRegionType> SentryRedactRegionType::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<SentryRedactRegionType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s6Sentry0A16RedactRegionTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_Sentry_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String SentryRedactRegionType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_Sentry_uint64_t_0_8_void_ptr_8_16(result, _impl::$s6Sentry0A16RedactRegionTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }

} // namespace Sentry

#undef SWIFT_SYMBOL
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef SENTRY_SWIFT_H
#define SENTRY_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#import <Sentry/Sentry.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Sentry",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)


@class SentryDispatchQueueWrapper;
@class SentryDefaultCurrentDateProvider;

SWIFT_CLASS_NAMED("Dependencies")
@interface SentryDependencies : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SentryDispatchQueueWrapper * _Nonnull dispatchQueueWrapper;)
+ (SentryDispatchQueueWrapper * _Nonnull)dispatchQueueWrapper SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SentryDefaultCurrentDateProvider * _Nonnull dateProvider;)
+ (SentryDefaultCurrentDateProvider * _Nonnull)dateProvider SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





@class NSString;

SWIFT_CLASS("_TtC6Sentry19HTTPHeaderSanitizer")
@interface HTTPHeaderSanitizer : NSObject
+ (NSDictionary<NSString *, NSString *> * _Nonnull)sanitizeHeaders:(NSDictionary<NSString *, NSString *> * _Nonnull)headers SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNumber;

SWIFT_CLASS("_TtC6Sentry13LoadValidator")
@interface LoadValidator : NSObject
+ (void)checkForDuplicatedSDKWithImageName:(NSString * _Nonnull)imageName imageAddress:(NSNumber * _Nonnull)imageAddress imageSize:(NSNumber * _Nonnull)imageSize dispatchQueueWrapper:(SentryDispatchQueueWrapper * _Nonnull)dispatchQueueWrapper;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





@class NSOperationQueue;
@class NSNotification;
@protocol NSObject;

SWIFT_PROTOCOL("_TtP6Sentry33SentryNSNotificationCenterWrapper_")
@protocol SentryNSNotificationCenterWrapper
- (void)addObserver:(id _Nonnull)observer selector:(SEL _Nonnull)aSelector name:(NSNotificationName _Nullable)aName object:(id _Nullable)anObject;
- (id <NSObject> _Nonnull)addObserverForName:(NSNotificationName _Nullable)name object:(id _Nullable)obj queue:(NSOperationQueue * _Nullable)queue usingBlock:(void (^ _Nonnull)(NSNotification * _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
- (void)removeObserver:(id _Nonnull)observer name:(NSNotificationName _Nullable)aName object:(id _Nullable)anObject;
- (void)postNotification:(NSNotification * _Nonnull)notification;
@end


@interface NSNotificationCenter (SWIFT_EXTENSION(Sentry)) <SentryNSNotificationCenterWrapper>
@end

@class SentryExperimentalOptions;

@interface SentryOptions (SWIFT_EXTENSION(Sentry))
/// This aggregates options for experimental features.
/// Be aware that the options available for experimental can change at any time.
@property (nonatomic, readonly, strong) SentryExperimentalOptions * _Nonnull experimental;
@end


SWIFT_CLASS("_TtC6Sentry22SentryANRStoppedResult")
@interface SentryANRStoppedResult : NSObject
@property (nonatomic, readonly) NSTimeInterval minDuration;
@property (nonatomic, readonly) NSTimeInterval maxDuration;
- (nonnull instancetype)initWithMinDuration:(NSTimeInterval)minDuration maxDuration:(NSTimeInterval)maxDuration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol SentryANRTrackerDelegate;

SWIFT_PROTOCOL("_TtP6Sentry16SentryANRTracker_")
@protocol SentryANRTracker
- (void)addListener:(id <SentryANRTrackerDelegate> _Nonnull)listener;
- (void)removeListener:(id <SentryANRTrackerDelegate> _Nonnull)listener;
/// Only used for tests.
- (void)clear;
@end

enum SentryANRType : NSInteger;

/// The  methods are called from a  background thread.
SWIFT_PROTOCOL("_TtP6Sentry24SentryANRTrackerDelegate_")
@protocol SentryANRTrackerDelegate
- (void)anrDetectedWithType:(enum SentryANRType)type;
- (void)anrStoppedWithResult:(SentryANRStoppedResult * _Nullable)result;
@end

typedef SWIFT_ENUM(NSInteger, SentryANRType, open) {
  SentryANRTypeFatalFullyBlocking = 0,
  SentryANRTypeFatalNonFullyBlocking = 1,
  SentryANRTypeFullyBlocking = 2,
  SentryANRTypeNonFullyBlocking = 3,
  SentryANRTypeUnknown = 4,
};


SWIFT_CLASS("_TtC6Sentry23SentryAppHangTypeMapper")
@interface SentryAppHangTypeMapper : NSObject
+ (NSString * _Nonnull)getExceptionTypeWithAnrType:(enum SentryANRType)anrType SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getFatalExceptionTypeWithNonFatalErrorType:(NSString * _Nonnull)nonFatalErrorType SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isExceptionTypeAppHangWithExceptionType:(NSString * _Nonnull)exceptionType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Sentry26SentryBaggageSerialization")
@interface SentryBaggageSerialization : NSObject
+ (NSString * _Nonnull)encodeDictionary:(NSDictionary<NSString *, NSString *> * _Nonnull)dictionary SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)decode:(NSString * _Nonnull)baggage SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;

/// We need a protocol to expose SentryCurrentDateProvider to tests.
/// Mocking the previous private class from <code>SentryTestUtils</code> stopped working in Xcode 16.
SWIFT_PROTOCOL("_TtP6Sentry25SentryCurrentDateProvider_")
@protocol SentryCurrentDateProvider
- (NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)timezoneOffset SWIFT_WARN_UNUSED_RESULT;
- (uint64_t)systemTime SWIFT_WARN_UNUSED_RESULT;
- (NSTimeInterval)systemUptime SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6Sentry32SentryDefaultCurrentDateProvider")
@interface SentryDefaultCurrentDateProvider : NSObject <SentryCurrentDateProvider>
- (NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)timezoneOffset SWIFT_WARN_UNUSED_RESULT;
/// Returns the absolute timestamp, which has no defined reference point or unit
/// as it is platform dependent.
- (uint64_t)systemTime SWIFT_WARN_UNUSED_RESULT;
- (NSTimeInterval)systemUptime SWIFT_WARN_UNUSED_RESULT;
+ (uint64_t)getAbsoluteTime SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Sentry26SentryDispatchQueueWrapper")
@interface SentryDispatchQueueWrapper : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithName:(char const * _Nonnull)name attributes:(dispatch_queue_attr_t _Nullable)attributes OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) dispatch_queue_t _Nonnull queue;
- (void)dispatchAsyncWithBlock:(void (^ _Nonnull)(void))block;
- (void)dispatchAsyncOnMainQueue:(void (^ _Nonnull)(void))block;
- (void)dispatchSyncOnMainQueue:(void (^ _Nonnull)(void))block;
- (void)dispatchSyncOnMainQueue:(void (^ _Nonnull)(void))block timeout:(double)timeout;
- (void)dispatchAfter:(NSTimeInterval)interval block:(void (^ _Nonnull)(void))block;
- (void)dispatchOnce:(long * _Nonnull)predicate block:(void (^ _Nonnull)(void))block;
@property (nonatomic, readonly) BOOL shouldDispatchCancel;
@property (nonatomic, readonly) BOOL shouldCreateDispatchBlock;
@end


SWIFT_CLASS("_TtC6Sentry28SentryEnabledFeaturesBuilder")
@interface SentryEnabledFeaturesBuilder : NSObject
+ (NSArray<NSString *> * _Nonnull)getEnabledFeaturesWithOptions:(SentryOptions * _Nullable)options SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("This is only marked as deprecated because enableAppLaunchProfiling is marked as deprecated. Once that is removed this can be removed.");
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Subclass of SentryEvent so we can add the Decodable implementation via a Swift extension. We need
/// this due to our mixed use of public Swift and ObjC classes. We could avoid this class by
/// converting SentryReplayEvent back to ObjC, but we rather accept this tradeoff as we want to
/// convert all public classes to Swift in the future. This does not need to be public, but was previously
/// defined in objc and was public. In the next major version of the SDK we should make it <code>internal</code> and <code>final</code>
/// and remove the <code>@objc</code> annotation.
/// @note: We can’t add the extension for Decodable directly on SentryEvent, because we get an error
/// in SentryReplayEvent: ‘required’ initializer ‘init(from:)’ must be provided by subclass of
/// ‘Event’ Once we add the initializer with required convenience public init(from decoder: any
/// Decoder) throws { fatalError(“init(from:) has not been implemented”)
/// }
/// we get the error initializer ‘init(from:)’ is declared in extension of ‘Event’ and cannot be
/// overridden. Therefore, we add the Decodable implementation not on the Event, but to a subclass of
/// the event.
SWIFT_CLASS_NAMED("SentryEventDecodable")
@interface SentryEventDecodable : SentryEvent
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;

SWIFT_CLASS("_TtC6Sentry18SentryEventDecoder")
@interface SentryEventDecoder : NSObject
+ (SentryEvent * _Nullable)decodeEventWithJsonData:(NSData * _Nonnull)jsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Sentry25SentryExperimentalOptions")
@interface SentryExperimentalOptions : NSObject
/// Enables swizzling of<code>NSData</code> to automatically track file operations.
/// note:
/// Swizzling is enabled by setting <code>SentryOptions.enableSwizzling</code> to <code>true</code>.
/// This option allows you to disable swizzling for <code>NSData</code> only, while keeping swizzling enabled for other classes.
/// This is useful if you want to use manual tracing for file operations.
@property (nonatomic) BOOL enableDataSwizzling;
/// Enables swizzling of<code>NSFileManager</code> to automatically track file operations.
/// note:
/// Swizzling is enabled by setting <code>SentryOptions.enableSwizzling</code> to <code>true</code>.
/// This option allows you to disable swizzling for <code>NSFileManager</code> only, while keeping swizzling enabled for other classes.
/// This is useful if you want to use manual tracing for file operations.
/// experiment:
/// This is an experimental feature and is therefore disabled by default. We’ll enable it by default in a future release.
@property (nonatomic) BOOL enableFileManagerSwizzling;
/// A more reliable way to report unhandled C++ exceptions.
/// This approach hooks into all instances of the <code>__cxa_throw</code> function, which provides a more comprehensive and consistent exception handling across an app’s runtime, regardless of the number of C++ modules or how they’re linked. It helps in obtaining accurate stack traces.
/// note:
/// The mechanism of hooking into <code>__cxa_throw</code> could cause issues with symbolication on iOS due to caching of symbol references.
/// experiment:
/// This is an experimental feature and is therefore disabled by default. We’ll enable it by default in a future major release.
@property (nonatomic) BOOL enableUnhandledCPPExceptionsV2;
/// Logs are considered beta.
@property (nonatomic) BOOL enableLogs;
- (void)validateOptions:(NSDictionary<NSString *, id> * _Nullable)options;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSMutableSet;

SWIFT_CLASS("_TtC6Sentry19SentryExtraPackages")
@interface SentryExtraPackages : NSObject
+ (void)addPackageName:(NSString * _Nullable)name version:(NSString * _Nullable)version;
+ (NSMutableSet * _Nonnull)getPackages SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class SentryId;
enum SentryFeedbackSource : NSInteger;

SWIFT_CLASS("_TtC6Sentry14SentryFeedback")
@interface SentryFeedback : NSObject
@property (nonatomic, readonly, strong) SentryId * _Nonnull eventId;
/// \param associatedEventId The ID for an event you’d like associated with the feedback. 
///
/// \param attachments Data objects for any attachments. Currently the web UI only supports showing one attached image, like for a screenshot. 
///
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message name:(NSString * _Nullable)name email:(NSString * _Nullable)email source:(enum SentryFeedbackSource)source associatedEventId:(SentryId * _Nullable)associatedEventId attachments:(NSArray<NSData *> * _Nullable)attachments OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, SentryFeedbackSource, open) {
  SentryFeedbackSourceWidget = 0,
  SentryFeedbackSourceCustom = 1,
};


@interface SentryFeedback (SWIFT_EXTENSION(Sentry)) <SentrySerializable>
@end


@interface SentryFeedback (SWIFT_EXTENSION(Sentry))
- (NSDictionary<NSString *, id> * _Nonnull)serialize SWIFT_WARN_UNUSED_RESULT;
@end

@class SentryAttachment;

@interface SentryFeedback (SWIFT_EXTENSION(Sentry))
/// note:
/// Currently there is only a single attachment possible, for the screenshot, of which there can be only one.
- (NSArray<SentryAttachment *> * _Nonnull)attachmentsForEnvelope SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6Sentry18SentryFileContents")
@interface SentryFileContents : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull path;
@property (nonatomic, readonly, copy) NSData * _Nonnull contents;
- (nonnull instancetype)initWithPath:(NSString * _Nonnull)path contents:(NSData * _Nonnull)contents OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSURL;

SWIFT_PROTOCOL("_TtP6Sentry25SentryFileManagerProtocol_")
@protocol SentryFileManagerProtocol
- (void)moveState:(NSString * _Nonnull)stateFilePath toPreviousState:(NSString * _Nonnull)previousStateFilePath;
- (NSData * _Nullable)readDataFromPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (BOOL)writeData:(NSData * _Nonnull)data toPath:(NSString * _Nonnull)path;
- (void)removeFileAtPath:(NSString * _Nonnull)path;
- (NSURL * _Nonnull)getSentryPathAsURL SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6Sentry23SentryFramesDelayResult")
@interface SentryFramesDelayResult : NSObject
/// The frames delay for the passed time period. If frame delay can’t be calculated this is -1.
@property (nonatomic, readonly) CFTimeInterval delayDuration;
@property (nonatomic, readonly) NSUInteger framesContributingToDelayCount;
- (nonnull instancetype)initWithDelayDuration:(CFTimeInterval)delayDuration framesContributingToDelayCount:(NSUInteger)framesContributingToDelayCount OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSUUID;

SWIFT_CLASS("_TtC6Sentry8SentryId")
@interface SentryId : NSObject
/// A @c SentryId with an empty UUID “00000000000000000000000000000000”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SentryId * _Nonnull empty;)
+ (SentryId * _Nonnull)empty SWIFT_WARN_UNUSED_RESULT;
/// Returns a 32 lowercase character hexadecimal string description of the @c SentryId, such as
/// “12c2d058d58442709aa2eca08bf20986”.
@property (nonatomic, readonly, copy) NSString * _Nonnull sentryIdString;
/// Creates a @c SentryId with a random UUID.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Creates a SentryId with the given UUID.
- (nonnull instancetype)initWithUuid:(NSUUID * _Nonnull)uuid OBJC_DESIGNATED_INITIALIZER;
/// Creates a @c SentryId from a 32 character hexadecimal string without dashes such as
/// “12c2d058d58442709aa2eca08bf20986” or a 36 character hexadecimal string such as such as
/// “12c2d058-d584-4270-9aa2-eca08bf20986”.
/// @return SentryId.empty for invalid strings.
- (nonnull instancetype)initWithUUIDString:(NSString * _Nonnull)uuidString OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
@end


typedef SWIFT_ENUM(NSUInteger, SentryLevel, open) {
  kSentryLevelNone SWIFT_COMPILE_NAME("none") = 0,
  kSentryLevelDebug SWIFT_COMPILE_NAME("debug") = 1,
  kSentryLevelInfo SWIFT_COMPILE_NAME("info") = 2,
  kSentryLevelWarning SWIFT_COMPILE_NAME("warning") = 3,
  kSentryLevelError SWIFT_COMPILE_NAME("error") = 4,
  kSentryLevelFatal SWIFT_COMPILE_NAME("fatal") = 5,
};


SWIFT_CLASS("_TtC6Sentry17SentryLevelHelper")
@interface SentryLevelHelper : NSObject
+ (NSString * _Nonnull)nameForLevel:(enum SentryLevel)level SWIFT_WARN_UNUSED_RESULT;
+ (enum SentryLevel)levelForName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class SentryClient;

SWIFT_CLASS("_TtC6Sentry16SentryLogBatcher")
@interface SentryLogBatcher : NSObject
/// Initializes a new SentryLogBatcher.
/// important:
/// The <code>dispatchQueue</code> parameter MUST be a serial queue to ensure thread safety.
/// Passing a concurrent queue will result in undefined behavior and potential data races.
/// \param client The SentryClient to use for sending logs
///
/// \param flushTimeout The timeout interval after which buffered logs will be flushed
///
/// \param maxBufferSizeBytes The maximum buffer size in bytes before triggering an immediate flush
///
/// \param dispatchQueue A <em>serial</em> dispatch queue wrapper for thread-safe access to mutable state
///
- (nonnull instancetype)initWithClient:(SentryClient * _Nonnull)client flushTimeout:(NSTimeInterval)flushTimeout maxBufferSizeBytes:(NSInteger)maxBufferSizeBytes dispatchQueue:(SentryDispatchQueueWrapper * _Nonnull)dispatchQueue OBJC_DESIGNATED_INITIALIZER;
/// Convenience initializer with default flush timeout and buffer size.
/// important:
/// The <code>dispatchQueue</code> parameter MUST be a serial queue to ensure thread safety.
/// Passing a concurrent queue will result in undefined behavior and potential data races.
/// \param client The SentryClient to use for sending logs
///
/// \param dispatchQueue A <em>serial</em> dispatch queue wrapper for thread-safe access to mutable state
///
- (nonnull instancetype)initWithClient:(SentryClient * _Nonnull)client dispatchQueue:(SentryDispatchQueueWrapper * _Nonnull)dispatchQueue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <em>EXPERIMENTAL</em> - A structured logging API for Sentry.
/// <code>SentryLogger</code> provides a structured logging interface that captures log entries
/// and sends them to Sentry. Supports multiple log levels (trace, debug, info, warn,
/// error, fatal) and allows attaching arbitrary attributes for enhanced context.
/// <h2>Supported Attribute Types</h2>
/// note:
/// Sentry Logs is currently in Beta. See the <a href="https://docs.sentry.io/product/explore/logs/">Sentry Logs Documentation</a>.
/// warning:
/// This API is experimental and subject to change without notice.
/// <ul>
///   <li>
///     <code>String</code>, <code>Bool</code>, <code>Int</code>, <code>Double</code>
///   </li>
///   <li>
///     <code>Float</code> (converted to <code>Double</code>)
///   </li>
///   <li>
///     Other types (converted to string)
///   </li>
/// </ul>
/// <h2>Usage</h2>
/// \code
/// let logger = SentrySDK.logger
/// logger.info("User logged in", attributes: ["userId": "12345"])
/// logger.error("Payment failed", attributes: ["errorCode": 500])
///
/// // Structured string interpolation with automatic type detection
/// logger.info("User \(userId) processed \(count) items with \(percentage)% success")
/// logger.debug("Processing \(itemCount) items, active: \(isActive)")
/// logger.warn("Retry attempt \(currentAttempt) of \(maxAttempts) failed")
///
/// \endcode
SWIFT_CLASS("_TtC6Sentry12SentryLogger")
@interface SentryLogger : NSObject
/// Logs a trace-level message.
- (void)trace:(NSString * _Nonnull)body;
/// Logs a trace-level message with additional attributes.
- (void)trace:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
/// Logs a debug-level message.
- (void)debug:(NSString * _Nonnull)body;
/// Logs a debug-level message with additional attributes.
- (void)debug:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
/// Logs an info-level message.
- (void)info:(NSString * _Nonnull)body;
/// Logs an info-level message with additional attributes.
- (void)info:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
/// Logs a warning-level message.
- (void)warn:(NSString * _Nonnull)body;
/// Logs a warning-level message with additional attributes.
- (void)warn:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
/// Logs an error-level message.
- (void)error:(NSString * _Nonnull)body;
/// Logs an error-level message with additional attributes.
- (void)error:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
/// Logs a fatal-level message.
- (void)fatal:(NSString * _Nonnull)body;
/// Logs a fatal-level message with additional attributes.
- (void)fatal:(NSString * _Nonnull)body attributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





SWIFT_PROTOCOL_NAMED("SentryRRWebEventProtocol")
@protocol SentryRRWebEvent <SentrySerializable>
@end


SWIFT_CLASS("_TtC6Sentry16SentryRRWebEvent")
@interface SentryRRWebEvent : NSObject <SentryRRWebEvent>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable data;
- (NSDictionary<NSString *, id> * _Nonnull)serialize SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Sentry22SentryRRWebCustomEvent")
@interface SentryRRWebCustomEvent : SentryRRWebEvent
@end


SWIFT_CLASS("_TtC6Sentry26SentryRRWebBreadcrumbEvent")
@interface SentryRRWebBreadcrumbEvent : SentryRRWebCustomEvent
- (nonnull instancetype)initWithTimestamp:(NSDate * _Nonnull)timestamp category:(NSString * _Nonnull)category message:(NSString * _Nullable)message level:(enum SentryLevel)level data:(NSDictionary<NSString *, id> * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
@end





SWIFT_CLASS("_TtC6Sentry20SentryRRWebSpanEvent")
@interface SentryRRWebSpanEvent : SentryRRWebCustomEvent
- (nonnull instancetype)initWithTimestamp:(NSDate * _Nonnull)timestamp endTimestamp:(NSDate * _Nonnull)endTimestamp operation:(NSString * _Nonnull)operation description:(NSString * _Nonnull)description data:(NSDictionary<NSString *, id> * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP6Sentry19SentryRedactOptions_")
@protocol SentryRedactOptions
@property (nonatomic, readonly) BOOL maskAllText;
@property (nonatomic, readonly) BOOL maskAllImages;
@property (nonatomic, readonly, copy) NSArray<Class> * _Nonnull maskedViewClasses;
@property (nonatomic, readonly, copy) NSArray<Class> * _Nonnull unmaskedViewClasses;
@end


SWIFT_CLASS("_TtC6Sentry26SentryRedactDefaultOptions")
@interface SentryRedactDefaultOptions : NSObject <SentryRedactOptions>
@property (nonatomic) BOOL maskAllText;
@property (nonatomic) BOOL maskAllImages;
@property (nonatomic, copy) NSArray<Class> * _Nonnull maskedViewClasses;
@property (nonatomic, copy) NSArray<Class> * _Nonnull unmaskedViewClasses;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class SentryBreadcrumb;

SWIFT_PROTOCOL("_TtP6Sentry31SentryReplayBreadcrumbConverter_")
@protocol SentryReplayBreadcrumbConverter <NSObject>
- (id <SentryRRWebEvent> _Nullable)convertFrom:(SentryBreadcrumb * _Nonnull)breadcrumb SWIFT_WARN_UNUSED_RESULT;
@end

enum SentryReplayType : NSInteger;

SWIFT_CLASS("_TtC6Sentry17SentryReplayEvent")
@interface SentryReplayEvent : SentryEvent
@property (nonatomic, readonly, copy) NSDate * _Nonnull replayStartTimestamp;
@property (nonatomic, readonly) enum SentryReplayType replayType;
/// Number of the segment in the replay.
/// This is an incremental number
@property (nonatomic, readonly) NSInteger segmentId;
/// This will be used to store the name of the screens
/// that appear during the duration of the replay segment.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable urls;
- (nonnull instancetype)initWithEventId:(SentryId * _Nonnull)eventId replayStartTimestamp:(NSDate * _Nonnull)replayStartTimestamp replayType:(enum SentryReplayType)replayType segmentId:(NSInteger)segmentId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (NSDictionary<NSString *, id> * _Nonnull)serialize SWIFT_WARN_UNUSED_RESULT;
@end

enum SentryReplayQuality : NSInteger;

SWIFT_CLASS("_TtC6Sentry19SentryReplayOptions")
@interface SentryReplayOptions : NSObject <SentryRedactOptions>
/// Indicates the percentage in which the replay for the session will be created.
/// note:
/// The value needs to be <code>>= 0.0</code> and <code><= 1.0</code>. When setting a value out of range the SDK sets it
/// to the default.
/// note:
/// See <code>SentryReplayOptions.DefaultValues.sessionSegmentDuration</code> for the default duration of the replay.
/// <ul>
///   <li>
///     Specifying @c 0 means never, @c 1.0 means always.
///   </li>
/// </ul>
@property (nonatomic) float sessionSampleRate;
/// Indicates the percentage in which a 30 seconds replay will be send with error events.
/// note:
/// The value needs to be >= 0.0 and <= 1.0. When setting a value out of range the SDK sets it
/// to the default.
/// note:
/// See <code>SentryReplayOptions.DefaultValues.errorReplayDuration</code> for the default duration of the replay.
/// <ul>
///   <li>
///     Specifying 0 means never, 1.0 means always.
///   </li>
/// </ul>
@property (nonatomic) float onErrorSampleRate;
/// Indicates whether session replay should redact all text in the app
/// by drawing a black rectangle over it.
/// note:
/// See <code>SentryReplayOptions.DefaultValues.maskAllText</code> for the default value.
@property (nonatomic) BOOL maskAllText;
/// Indicates whether session replay should redact all non-bundled image
/// in the app by drawing a black rectangle over it.
/// note:
/// See <code>SentryReplayOptions.DefaultValues.maskAllImages</code> for the default value.
@property (nonatomic) BOOL maskAllImages;
/// Indicates the quality of the replay.
/// The higher the quality, the higher the CPU and bandwidth usage.
/// note:
/// See <code>SentryReplayOptions.DefaultValues.quality</code> for the default value.
@property (nonatomic) enum SentryReplayQuality quality;
/// A list of custom UIView subclasses that need
/// to be masked during session replay.
/// By default Sentry already mask text and image elements from UIKit
/// Every child of a view that is redacted will also be redacted.
/// note:
/// See <code>SentryReplayOptions.DefaultValues.maskedViewClasses</code> for the default value.
@property (nonatomic, copy) NSArray<Class> * _Nonnull maskedViewClasses;
/// A list of custom UIView subclasses to be ignored
/// during masking step of the session replay.
/// The views of given classes will not be redacted but their children may be.
/// This property has precedence over <code>redactViewTypes</code>.
/// note:
/// See <code>SentryReplayOptions.DefaultValues.unmaskedViewClasses</code> for the default value.
@property (nonatomic, copy) NSArray<Class> * _Nonnull unmaskedViewClasses;
/// Alias for <code>enableViewRendererV2</code>.
/// This flag is deprecated and will be removed in a future version.
/// Please use <code>enableViewRendererV2</code> instead.
@property (nonatomic) BOOL enableExperimentalViewRenderer SWIFT_DEPRECATED_MSG("", "enableViewRendererV2");
/// Enables the up to 5x faster new view renderer used by the Session Replay integration.
/// Enabling this flag will reduce the amount of time it takes to render each frame of the session replay on the main thread, therefore reducing
/// interruptions and visual lag. <a href="https://github.com/getsentry/sentry-cocoa/pull/4940">Our benchmarks</a> have shown a significant improvement of
/// <em>up to 4-5x faster rendering</em> (reducing <code>~160ms</code> to <code>~36ms</code> per frame) on older devices.
/// experiment:
/// In case you are noticing issues with the new view renderer, please report the issue on <a href="https://github.com/getsentry/sentry-cocoa">GitHub</a>.
/// Eventually, we will remove this feature flag and use the new view renderer by default.
/// note:
/// See <code>SentryReplayOptions.DefaultValues.enableViewRendererV2</code> for the default value.
@property (nonatomic) BOOL enableViewRendererV2;
/// Enables up to 5x faster but incommpelte view rendering used by the Session Replay integration.
/// Enabling this flag will reduce the amount of time it takes to render each frame of the session replay on the main thread, therefore reducing
/// interruptions and visual lag. <a href="https://github.com/getsentry/sentry-cocoa/pull/4940">Our benchmarks</a> have shown a significant improvement of
/// up to <em>5x faster render times</em> (reducing <code>~160ms</code> to <code>~30ms</code> per frame).
/// This flag controls the way the view hierarchy is drawn into a graphics context for the session replay. By default, the view hierarchy is drawn using
/// the <code>UIView.drawHierarchy(in:afterScreenUpdates:)</code> method, which is the most complete way to render the view hierarchy. However,
/// this method can be slow, especially when rendering complex views, therefore enabling this flag will switch to render the underlying <code>CALayer</code> instead.
/// note:
/// This flag can only be used together with <code>enableViewRendererV2</code> with up to 20% faster render times.
/// warning:
/// Rendering the view hiearchy using the <code>CALayer.render(in:)</code> method can lead to rendering issues, especially when using custom views.
/// For complete rendering, it is recommended to set this option to <code>false</code>. In case you prefer performance over completeness, you can
/// set this option to <code>true</code>.
/// experiment:
/// This is an experimental feature and is therefore disabled by default. In case you are noticing issues with the experimental
/// view renderer, please report the issue on <a href="https://github.com/getsentry/sentry-cocoa">GitHub</a>. Eventually, we will
/// mark this feature as stable and remove the experimental flag, but will keep it disabled by default.
/// note:
/// See <code>SentryReplayOptions.DefaultValues.enableFastViewRendering</code> for the default value.
@property (nonatomic) BOOL enableFastViewRendering;
/// Defines the quality of the session replay.
/// Higher bit rates better quality, but also bigger files to transfer.
/// note:
/// See <code>SentryReplayOptions.DefaultValues.quality</code> for the default value.
@property (nonatomic, readonly) NSInteger replayBitRate;
/// The scale related to the window size at which the replay will be created
/// note:
/// The scale is used to reduce the size of the replay.
@property (nonatomic, readonly) float sizeScale;
/// Number of frames per second of the replay.
/// The more the havier the process is.
/// The minimum is 1, if set to zero this will change to 1.
/// note:
/// See <code>SentryReplayOptions.DefaultValues.frameRate</code> for the default value.
@property (nonatomic) NSUInteger frameRate;
/// The maximum duration of replays for error events.
@property (nonatomic) NSTimeInterval errorReplayDuration;
/// The maximum duration of the segment of a session replay.
@property (nonatomic) NSTimeInterval sessionSegmentDuration;
/// The maximum duration of a replay session.
/// note:
/// See  <code>SentryReplayOptions.DefaultValues.maximumDuration</code> for the default value.
@property (nonatomic) NSTimeInterval maximumDuration;
/// Initialize session replay options disabled
/// note:
/// This initializer is added for Objective-C compatibility, as constructors with default values
/// are not supported in Objective-C.
/// note:
/// See <code>SentryReplayOptions.DefaultValues</code> for the default values of each parameter.
- (nonnull instancetype)init;
/// Initializes a new instance of <code>SentryReplayOptions</code> using a dictionary.
/// warning:
/// This initializer is primarily used by Hybrid SDKs and is not intended for public use.
/// \param dictionary A dictionary containing the configuration options for the session replay.
///
- (nonnull instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary;
/// Initializes a new instance of <code>SentryReplayOptions</code> with the specified parameters.
/// note:
/// See <code>SentryReplayOptions.DefaultValues</code> for the default values of each parameter.
/// \param sessionSampleRate Sample rate used to determine the percentage of replays of sessions that will be uploaded.
///
/// \param onErrorSampleRate Sample rate used to determine the percentage of replays of error events that will be uploaded.
///
/// \param maskAllText Flag to redact all text in the app by drawing a rectangle over it.
///
/// \param maskAllImages Flag to redact all images in the app by drawing a rectangle over it.
///
/// \param enableViewRendererV2 Enables the up to 5x faster view renderer.
///
/// \param enableFastViewRendering Enables faster but incomplete view rendering. See <code>SentryReplayOptions.enableFastViewRendering</code> for more information.
///
- (nonnull instancetype)initWithSessionSampleRate:(float)sessionSampleRate onErrorSampleRate:(float)onErrorSampleRate maskAllText:(BOOL)maskAllText maskAllImages:(BOOL)maskAllImages enableViewRendererV2:(BOOL)enableViewRendererV2 enableFastViewRendering:(BOOL)enableFastViewRendering;
@end

/// Enum to define the quality of the session replay.
typedef SWIFT_ENUM(NSInteger, SentryReplayQuality, open) {
/// Video Scale: 80%
/// Bit Rate: 20.000
  SentryReplayQualityLow = 0,
/// Video Scale: 100%
/// Bit Rate: 40.000
  SentryReplayQualityMedium = 1,
/// Video Scale: 100%
/// Bit Rate: 60.000
  SentryReplayQualityHigh = 2,
};

@class SentryVideoInfo;

SWIFT_CLASS("_TtC6Sentry21SentryReplayRecording")
@interface SentryReplayRecording : NSObject
- (nonnull instancetype)initWithSegmentId:(NSInteger)segmentId video:(SentryVideoInfo * _Nonnull)video extraEvents:(NSArray<id <SentryRRWebEvent>> * _Nonnull)extraEvents;
- (NSDictionary<NSString *, id> * _Nonnull)headerForReplayRecording SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSDictionary<NSString *, id> *> * _Nonnull)serialize SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, SentryReplayType, open) {
  SentryReplayTypeSession = 0,
  SentryReplayTypeBuffer = 1,
};

@class UIImage;

SWIFT_PROTOCOL("_TtP6Sentry22SentryReplayVideoMaker_")
@protocol SentryReplayVideoMaker <NSObject>
- (void)addFrameAsyncWithTimestamp:(NSDate * _Nonnull)timestamp maskedViewImage:(UIImage * _Nonnull)maskedViewImage forScreen:(NSString * _Nullable)forScreen;
- (void)releaseFramesUntil:(NSDate * _Nonnull)date;
- (void)createVideoInBackgroundWithBeginning:(NSDate * _Nonnull)beginning end:(NSDate * _Nonnull)end completion:(void (^ _Nonnull)(NSArray<SentryVideoInfo *> * _Nonnull))completion;
- (NSArray<SentryVideoInfo *> * _Nonnull)createVideoWithBeginning:(NSDate * _Nonnull)beginning end:(NSDate * _Nonnull)end SWIFT_WARN_UNUSED_RESULT;
@end


@protocol SentrySpan;
@class SentryScope;
@class SentryTransactionContext;
@class NSException;
@class SentryUserFeedback;
@class SentryUser;

/// The main entry point for the Sentry SDK.
/// We recommend using <code>start(configureOptions:)</code> to initialize Sentry.
SWIFT_CLASS("_TtC6Sentry9SentrySDK")
@interface SentrySDK : NSObject
/// The current active transaction or span bound to the scope.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <SentrySpan> _Nullable span;)
+ (id <SentrySpan> _Nullable)span SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether the Sentry SDK is enabled.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isEnabled;)
+ (BOOL)isEnabled SWIFT_WARN_UNUSED_RESULT;
/// API to access Sentry logs
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SentryLogger * _Nonnull logger;)
+ (SentryLogger * _Nonnull)logger SWIFT_WARN_UNUSED_RESULT;
/// Inits and configures Sentry (<code>SentryHub</code>, <code>SentryClient</code>) and sets up all integrations. Make sure to
/// set a valid DSN.
/// note:
/// Call this method on the main thread. When calling it from a background thread, the
/// SDK starts on the main thread async.
+ (void)startWithOptions:(SentryOptions * _Nonnull)options;
/// Inits and configures Sentry (<code>SentryHub</code>, <code>SentryClient</code>) and sets up all integrations. Make sure to
/// set a valid DSN.
/// note:
/// Call this method on the main thread. When calling it from a background thread, the
/// SDK starts on the main thread async.
+ (void)startWithConfigureOptions:(void (^ _Nonnull)(SentryOptions * _Nonnull))configureOptions;
/// Captures a manually created event and sends it to Sentry.
/// \param event The event to send to Sentry.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureEvent:(SentryEvent * _Nonnull)event;
/// Captures a manually created event and sends it to Sentry. Only the data in this scope object will
/// be added to the event. The global scope will be ignored.
/// \param event The event to send to Sentry.
///
/// \param scope The scope containing event metadata.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureEvent:(SentryEvent * _Nonnull)event withScope:(SentryScope * _Nonnull)scope;
/// Captures a manually created event and sends it to Sentry. Maintains the global scope but mutates
/// scope data for only this call.
/// \param event The event to send to Sentry.
///
/// \param block The block mutating the scope only for this call.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureEvent:(SentryEvent * _Nonnull)event withScopeBlock:(void (^ _Nonnull)(SentryScope * _Nonnull))block;
/// Creates a transaction, binds it to the hub and returns the instance.
/// \param name The transaction name.
///
/// \param operation Short code identifying the type of operation the span is measuring.
///
///
/// returns:
/// The created transaction.
+ (id <SentrySpan> _Nonnull)startTransactionWithName:(NSString * _Nonnull)name operation:(NSString * _Nonnull)operation;
/// Creates a transaction, binds it to the hub and returns the instance.
/// \param name The transaction name.
///
/// \param operation Short code identifying the type of operation the span is measuring.
///
/// \param bindToScope Indicates whether the SDK should bind the new transaction to the scope.
///
///
/// returns:
/// The created transaction.
+ (id <SentrySpan> _Nonnull)startTransactionWithName:(NSString * _Nonnull)name operation:(NSString * _Nonnull)operation bindToScope:(BOOL)bindToScope;
/// Creates a transaction, binds it to the hub and returns the instance.
/// \param transactionContext The transaction context.
///
///
/// returns:
/// The created transaction.
+ (id <SentrySpan> _Nonnull)startTransactionWithContext:(SentryTransactionContext * _Nonnull)transactionContext;
/// Creates a transaction, binds it to the hub and returns the instance.
/// \param transactionContext The transaction context.
///
/// \param bindToScope Indicates whether the SDK should bind the new transaction to the scope.
///
///
/// returns:
/// The created transaction.
+ (id <SentrySpan> _Nonnull)startTransactionWithContext:(SentryTransactionContext * _Nonnull)transactionContext bindToScope:(BOOL)bindToScope;
/// Creates a transaction, binds it to the hub and returns the instance.
/// \param transactionContext The transaction context.
///
/// \param bindToScope Indicates whether the SDK should bind the new transaction to the scope.
///
/// \param customSamplingContext Additional information about the sampling context.
///
///
/// returns:
/// The created transaction.
+ (id <SentrySpan> _Nonnull)startTransactionWithContext:(SentryTransactionContext * _Nonnull)transactionContext bindToScope:(BOOL)bindToScope customSamplingContext:(NSDictionary<NSString *, id> * _Nonnull)customSamplingContext;
/// Creates a transaction, binds it to the hub and returns the instance.
/// \param transactionContext The transaction context.
///
/// \param customSamplingContext Additional information about the sampling context.
///
///
/// returns:
/// The created transaction.
+ (id <SentrySpan> _Nonnull)startTransactionWithContext:(SentryTransactionContext * _Nonnull)transactionContext customSamplingContext:(NSDictionary<NSString *, id> * _Nonnull)customSamplingContext;
/// Captures an error event and sends it to Sentry.
/// \param error The error to send to Sentry.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureError:(NSError * _Nonnull)error;
/// Captures an error event and sends it to Sentry. Only the data in this scope object will be added
/// to the event. The global scope will be ignored.
/// \param error The error to send to Sentry.
///
/// \param scope The scope containing event metadata.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureError:(NSError * _Nonnull)error withScope:(SentryScope * _Nonnull)scope;
/// Captures an error event and sends it to Sentry. Maintains the global scope but mutates scope data
/// for only this call.
/// \param error The error to send to Sentry.
///
/// \param block The block mutating the scope only for this call.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureError:(NSError * _Nonnull)error withScopeBlock:(void (^ _Nonnull)(SentryScope * _Nonnull))block;
/// Captures an exception event and sends it to Sentry.
/// \param exception The exception to send to Sentry.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureException:(NSException * _Nonnull)exception;
/// Captures an exception event and sends it to Sentry. Only the data in this scope object will be
/// added to the event. The global scope will be ignored.
/// \param exception The exception to send to Sentry.
///
/// \param scope The scope containing event metadata.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureException:(NSException * _Nonnull)exception withScope:(SentryScope * _Nonnull)scope;
/// Captures an exception event and sends it to Sentry. Maintains the global scope but mutates scope
/// data for only this call.
/// \param exception The exception to send to Sentry.
///
/// \param block The block mutating the scope only for this call.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureException:(NSException * _Nonnull)exception withScopeBlock:(void (^ _Nonnull)(SentryScope * _Nonnull))block;
/// Captures a message event and sends it to Sentry.
/// \param message The message to send to Sentry.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureMessage:(NSString * _Nonnull)message;
/// Captures a message event and sends it to Sentry. Only the data in this scope object will be added
/// to the event. The global scope will be ignored.
/// \param message The message to send to Sentry.
///
/// \param scope The scope containing event metadata.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureMessage:(NSString * _Nonnull)message withScope:(SentryScope * _Nonnull)scope;
/// Captures a message event and sends it to Sentry. Maintains the global scope but mutates scope
/// data for only this call.
/// \param message The message to send to Sentry.
///
/// \param block The block mutating the scope only for this call.
///
///
/// returns:
/// The <code>SentryId</code> of the event or <code>SentryId.empty</code> if the event is not sent.
+ (SentryId * _Nonnull)captureMessage:(NSString * _Nonnull)message withScopeBlock:(void (^ _Nonnull)(SentryScope * _Nonnull))block;
/// Captures user feedback that was manually gathered and sends it to Sentry.
/// \param userFeedback The user feedback to send to Sentry.
///
+ (void)captureUserFeedback:(SentryUserFeedback * _Nonnull)userFeedback SWIFT_DEPRECATED_MSG("Use SentrySDK.back or use or configure our new managed UX with SentryOptions.configureUserFeedback.");
/// Captures user feedback that was manually gathered and sends it to Sentry.
/// warning:
/// This is an experimental feature and may still have bugs.
/// note:
/// If you’d prefer not to have to build the UI required to gather the feedback from the user,
/// see <code>SentryOptions.configureUserFeedback</code> to customize a fully managed integration. See
/// https://docs.sentry.io/platforms/apple/user-feedback/ for more information.
/// \param feedback The feedback to send to Sentry.
///
+ (void)captureFeedback:(SentryFeedback * _Nonnull)feedback;
/// Adds a <code>Breadcrumb</code> to the current <code>Scope</code> of the current <code>Hub</code>. If the total number of breadcrumbs
/// exceeds the <code>SentryOptions.maxBreadcrumbs</code> the SDK removes the oldest breadcrumb.
/// \param crumb The <code>Breadcrumb</code> to add to the current <code>Scope</code> of the current <code>Hub</code>.
///
+ (void)addBreadcrumb:(SentryBreadcrumb * _Nonnull)crumb;
/// Use this method to modify the current <code>Scope</code> of the current <code>Hub</code>. The SDK uses the <code>Scope</code> to attach
/// contextual data to events.
/// \param callback The callback for configuring the current <code>Scope</code> of the current <code>Hub</code>.
///
+ (void)configureScope:(void (^ _Nonnull)(SentryScope * _Nonnull))callback;
/// Checks if the last program execution terminated with a crash.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL crashedLastRun;)
+ (BOOL)crashedLastRun SWIFT_WARN_UNUSED_RESULT;
/// Checks if the SDK detected a start-up crash during SDK initialization.
/// note:
/// The SDK init waits synchronously for up to 5 seconds to flush out events if the app crashes
/// within 2 seconds after the SDK init.
///
/// returns:
/// true if the SDK detected a start-up crash and false if not.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL detectedStartUpCrash;)
+ (BOOL)detectedStartUpCrash SWIFT_WARN_UNUSED_RESULT;
/// Set <code>user</code> to the current <code>Scope</code> of the current <code>Hub</code>.
/// note:
/// You must start the SDK before calling this method, otherwise it doesn’t set the user.
/// \param user The user to set to the current <code>Scope</code>.
///
+ (void)setUser:(SentryUser * _Nullable)user;
/// Starts a new <code>SentrySession</code>. If there’s a running <code>SentrySession</code>, it ends it before starting the
/// new one. You can use this method in combination with <code>endSession</code> to manually track
/// sessions. The SDK uses <code>SentrySession</code> to inform Sentry about release and project
/// associated project health.
+ (void)startSession;
/// Ends the current <code>SentrySession</code>. You can use this method in combination with <code>startSession</code> to
/// manually track <code>SentrySessions</code>. The SDK uses <code>SentrySession</code> to inform Sentry about release and
/// project associated project health.
+ (void)endSession;
/// This forces a crash, useful to test the <code>SentryCrash</code> integration.
/// note:
/// The SDK can’t report a crash when a debugger is attached. Your application needs to run
/// without a debugger attached to capture the crash and send it to Sentry the next time you launch
/// your application.
+ (void)crash;
/// Reports to the ongoing <code>UIViewController</code> transaction
/// that the screen contents are fully loaded and displayed,
/// which will create a new span.
/// seealso:
///
/// https://docs.sentry.io/platforms/cocoa/performance/instrumentation/automatic-instrumentation/#time-to-full-display
+ (void)reportFullyDisplayed;
/// Pauses sending detected app hangs to Sentry.
/// This method doesn’t close the detection of app hangs. Instead, the app hang detection
/// will ignore detected app hangs until you call <code>resumeAppHangTracking</code>.
+ (void)pauseAppHangTracking;
/// Resumes sending detected app hangs to Sentry.
+ (void)resumeAppHangTracking;
/// Waits synchronously for the SDK to flush out all queued and cached items for up to the specified
/// timeout in seconds. If there is no internet connection, the function returns immediately. The SDK
/// doesn’t dispose the client or the hub.
/// \param timeout The time to wait for the SDK to complete the flush.
///
+ (void)flush:(NSTimeInterval)timeout;
/// Closes the SDK, uninstalls all the integrations, and calls <code>flush</code> with
/// <code>SentryOptions.shutdownTimeInterval</code>.
+ (void)close;
/// note:
/// Conceptually internal but needs to be marked public with SPI for ObjC visibility
+ (void)clearLogger;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A note on the thread safety:
/// The methods configure and log don’t use synchronization mechanisms, meaning they aren’t strictly speaking thread-safe.
/// Still, you can use log from multiple threads. The problem is that when you call configure while
/// calling log from multiple threads, you experience a race condition. It can take a bit until all
/// threads know the new config. As the SDK should only call configure once when starting, we do accept
/// this race condition. Adding locks for evaluating the log level for every log invocation isn’t
/// acceptable, as this adds a significant overhead for every log call. Therefore, we exclude SentryLog
/// from the ThreadSanitizer as it produces false positives. The tests call configure multiple times,
/// and the thread sanitizer would surface these race conditions. We accept these race conditions for
/// the log messages in the tests over adding locking for all log messages.
SWIFT_CLASS("_TtC6Sentry12SentrySDKLog")
@interface SentrySDKLog : NSObject
+ (void)logWithMessage:(NSString * _Nonnull)message andLevel:(enum SentryLevel)level;
/// @return @c YES if the current logging configuration will log statements at the current level,
/// @c NO if not.
+ (BOOL)willLogAtLevel:(enum SentryLevel)level SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC6Sentry19SentrySDKLogSupport")
@interface SentrySDKLogSupport : NSObject
+ (void)configure:(BOOL)isDebug diagnosticLevel:(enum SentryLevel)diagnosticLevel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Sentry34SentrySRDefaultBreadcrumbConverter")
@interface SentrySRDefaultBreadcrumbConverter : NSObject <SentryReplayBreadcrumbConverter>
/// This function will convert the SDK breadcrumbs to session replay breadcrumbs in a format that the front-end understands.
/// Any deviation in the information will cause the breadcrumb or the information itself to be discarded
/// in order to avoid unknown behavior in the front-end.
- (id <SentryRRWebEvent> _Nullable)convertFrom:(SentryBreadcrumb * _Nonnull)breadcrumb SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Sentry26SentryScopePersistentStore")
@interface SentryScopePersistentStore : NSObject
- (nullable instancetype)initWithFileManager:(id <SentryFileManagerProtocol> _Nullable)fileManager OBJC_DESIGNATED_INITIALIZER;
- (void)moveAllCurrentStateToPreviousState;
- (NSDictionary<NSString *, NSDictionary<NSString *, id> *> * _Nullable)readPreviousContextFromDisk SWIFT_WARN_UNUSED_RESULT;
- (SentryUser * _Nullable)readPreviousUserFromDisk SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)readPreviousDistFromDisk SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)readPreviousEnvironmentFromDisk SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, NSString *> * _Nullable)readPreviousTagsFromDisk SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nullable)readPreviousExtrasFromDisk SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nullable)readPreviousFingerprintFromDisk SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end









SWIFT_CLASS("_TtC6Sentry16SentrySdkPackage")
@interface SentrySdkPackage : NSObject
+ (NSDictionary<NSString *, NSString *> * _Nullable)global SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC6Sentry29SentrySwizzleClassNameExclude")
@interface SentrySwizzleClassNameExclude : NSObject
+ (BOOL)shouldExcludeClassWithClassName:(NSString * _Nonnull)className swizzleClassNameExcludes:(NSSet<NSString *> * _Nonnull)swizzleClassNameExcludes SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


typedef SWIFT_ENUM(NSInteger, SentryTransactionNameSource, open) {
  kSentryTransactionNameSourceCustom SWIFT_COMPILE_NAME("custom") = 0,
  kSentryTransactionNameSourceUrl SWIFT_COMPILE_NAME("url") = 1,
  kSentryTransactionNameSourceRoute SWIFT_COMPILE_NAME("route") = 2,
  kSentryTransactionNameSourceView SWIFT_COMPILE_NAME("view") = 3,
  kSentryTransactionNameSourceComponent SWIFT_COMPILE_NAME("component") = 4,
  kSentryTransactionNameSourceTask SWIFT_COMPILE_NAME("sourceTask") = 5,
};


/// Use this protocol to customize the name used in the automatic
/// UIViewController performance tracker, view hierarchy, and breadcrumbs.
SWIFT_PROTOCOL("_TtP6Sentry32SentryUIViewControllerDescriptor_")
@protocol SentryUIViewControllerDescriptor <NSObject>
/// The custom name of the UIViewController
/// that the Sentry SDK uses for transaction names, breadcrumbs, and
/// view hierarchy.
@property (nonatomic, readonly, copy) NSString * _Nonnull sentryName;
@end

@class SentryDsn;
@class NSURLRequest;

SWIFT_CLASS("_TtC6Sentry23SentryURLRequestFactory")
@interface SentryURLRequestFactory : NSObject
+ (NSURLRequest * _Nullable)envelopeRequestWith:(SentryDsn * _Nonnull)dsn data:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (NSURLRequest * _Nullable)envelopeRequestWith:(NSURL * _Nonnull)url data:(NSData * _Nonnull)data authHeader:(NSString * _Nullable)authHeader error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Sentry15SentryVideoInfo")
@interface SentryVideoInfo : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nonnull path;
@property (nonatomic, readonly, copy) NSDate * _Nonnull start;
@property (nonatomic, readonly, copy) NSDate * _Nonnull end;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Sentry44SentryWatchdogTerminationAttributesProcessor")
@interface SentryWatchdogTerminationAttributesProcessor : NSObject
- (nonnull instancetype)initWithDispatchQueueWrapper:(SentryDispatchQueueWrapper * _Nonnull)dispatchQueueWrapper scopePersistentStore:(SentryScopePersistentStore * _Nonnull)scopePersistentStore OBJC_DESIGNATED_INITIALIZER;
- (void)clear;
- (void)setContext:(NSDictionary<NSString *, NSDictionary<NSString *, id> *> * _Nullable)context;
- (void)setUser:(SentryUser * _Nullable)user;
- (void)setDist:(NSString * _Nullable)dist;
- (void)setEnvironment:(NSString * _Nullable)environment;
- (void)setTags:(NSDictionary<NSString *, NSString *> * _Nullable)tags;
- (void)setExtras:(NSDictionary<NSString *, id> * _Nullable)extras;
- (void)setFingerprint:(NSArray<NSString *> * _Nullable)fingerprint;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIViewController;

SWIFT_CLASS("_TtC6Sentry15SwiftDescriptor")
@interface SwiftDescriptor : NSObject
+ (NSString * _Nonnull)getObjectClassName:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getViewControllerClassName:(UIViewController * _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getSwiftErrorDescription:(NSError * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLSessionTask;

SWIFT_CLASS("_TtC6Sentry20URLSessionTaskHelper")
@interface URLSessionTaskHelper : NSObject
+ (NSString * _Nullable)getGraphQLOperationNameFrom:(NSURLSessionTask * _Nullable)task SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURLQueryItem;

SWIFT_CLASS("_TtC6Sentry12UrlSanitized")
@interface UrlSanitized : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable query;
@property (nonatomic, readonly, copy) NSArray<NSURLQueryItem *> * _Nullable queryItems;
@property (nonatomic, readonly, copy) NSString * _Nullable fragment;
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nullable sanitizedUrl;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Adds additional information about what happened to an event.
/// @deprecated Use <code>SentryFeedback</code>.
SWIFT_CLASS_NAMED("UserFeedback") SWIFT_DEPRECATED_MSG("Use SentryFeedback.")
@interface SentryUserFeedback : NSObject <SentrySerializable>
/// The eventId of the event to which the user feedback is associated.
@property (nonatomic, readonly, strong) SentryId * _Nonnull eventId;
/// The name of the user.
@property (nonatomic, copy) NSString * _Nonnull name;
/// The email of the user.
@property (nonatomic, copy) NSString * _Nonnull email;
/// Comments of the user about what happened.
@property (nonatomic, copy) NSString * _Nonnull comments;
/// Initializes SentryUserFeedback and sets the required eventId.
/// \param eventId The eventId of the event to which the user feedback is associated.
///
- (nonnull instancetype)initWithEventId:(SentryId * _Nonnull)eventId OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary<NSString *, id> * _Nonnull)serialize SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#if __has_include(<../../../swift/swiftToCxx/_SwiftCxxInteroperability.h>)
#include <../../../swift/swiftToCxx/_SwiftCxxInteroperability.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftCxxInteroperability.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftCxxInteroperability.h>
// Alternatively, allow user to find the header using additional include path into '<toolchain>/lib/swift'.
#elif __has_include(<swiftToCxx/_SwiftCxxInteroperability.h>)
#include <swiftToCxx/_SwiftCxxInteroperability.h>
#endif
#pragma clang diagnostic pop
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
#endif

#ifndef SWIFT_SWIFT_H
#define SWIFT_SWIFT_H
#ifdef SWIFT_SYMBOL
#undef SWIFT_SYMBOL
#endif
#define SWIFT_SYMBOL(usrValue) SWIFT_SYMBOL_MODULE_USR("swift", usrValue)
#ifndef SWIFT_CXX_INTEROP_HIDE_STL_OVERLAY
#include <string>
#endif
#include <new>
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"
#ifndef SWIFT_PRINTED_CORE
#define SWIFT_PRINTED_CORE
namespace swift SWIFT_PRIVATE_ATTR {

namespace _impl {

#ifdef __cplusplus
extern "C" {
#endif

// Swift type metadata response type.
struct MetadataResponseTy {
  void * _Null_unspecified _0;
  uint64_t _1;
};
// Swift type metadata request type.
typedef uint64_t MetadataRequestTy;

#if __cplusplus > 201402L
#  define SWIFT_NOEXCEPT_FUNCTION_PTR noexcept
#else
#  define SWIFT_NOEXCEPT_FUNCTION_PTR
#endif

using ValueWitnessInitializeBufferWithCopyOfBufferTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(55882))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessDestroyTy = void(* __ptrauth_swift_value_witness_function_pointer(1272))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(58298))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(34641))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(18648))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(61402))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessGetEnumTagSinglePayloadTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(24816))(const void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessStoreEnumTagSinglePayloadTy = void(* __ptrauth_swift_value_witness_function_pointer(41169))(void * _Nonnull, unsigned, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct ValueWitnessTable {
  ValueWitnessInitializeBufferWithCopyOfBufferTy _Nonnull initializeBufferWithCopyOfBuffer;
  ValueWitnessDestroyTy _Nonnull destroy;
  ValueWitnessInitializeWithCopyTy _Nonnull initializeWithCopy;
  ValueWitnessAssignWithCopyTy _Nonnull assignWithCopy;
  ValueWitnessInitializeWithTakeTy _Nonnull initializeWithTake;
  ValueWitnessAssignWithTakeTy _Nonnull assignWithTake;
  ValueWitnessGetEnumTagSinglePayloadTy _Nonnull getEnumTagSinglePayload;
  ValueWitnessStoreEnumTagSinglePayloadTy _Nonnull storeEnumTagSinglePayload;
  size_t size;
  size_t stride;
  unsigned flags;
  unsigned extraInhabitantCount;

  constexpr size_t getAlignment() const { return (flags & 255) + 1; }
};

using EnumValueWitnessGetEnumTagTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(41909))(const void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveProjectEnumDataTy = void(* __ptrauth_swift_value_witness_function_pointer(1053))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveInjectEnumTagTy = void(* __ptrauth_swift_value_witness_function_pointer(45796))(void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct EnumValueWitnessTable {
  ValueWitnessTable vwTable;
  EnumValueWitnessGetEnumTagTy _Nonnull getEnumTag;
  EnumValueWitnessDestructiveProjectEnumDataTy _Nonnull destructiveProjectEnumData;
  EnumValueWitnessDestructiveInjectEnumTagTy _Nonnull destructiveInjectEnumTag;
};

#undef SWIFT_NOEXCEPT_FUNCTION_PTR


// type metadata address for Bool.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSbN;
// type metadata address for Int8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss4Int8VN;
// type metadata address for UInt8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5UInt8VN;
// type metadata address for Int16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int16VN;
// type metadata address for UInt16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt16VN;
// type metadata address for Int32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int32VN;
// type metadata address for UInt32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt32VN;
// type metadata address for Int64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int64VN;
// type metadata address for UInt64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt64VN;
// type metadata address for Float.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSfN;
// type metadata address for Double.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSdN;
// type metadata address for OpaquePointer.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss13OpaquePointerVN;
// type metadata address for Int.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSiN;
// type metadata address for UInt.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSuN;

#ifdef __cplusplus
}
#endif


} // namespace _impl


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<bool> = true;

template<>
struct TypeMetadataTrait<bool> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSbN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int8_t> = true;

template<>
struct TypeMetadataTrait<int8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss4Int8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint8_t> = true;

template<>
struct TypeMetadataTrait<uint8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5UInt8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int16_t> = true;

template<>
struct TypeMetadataTrait<int16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint16_t> = true;

template<>
struct TypeMetadataTrait<uint16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int32_t> = true;

template<>
struct TypeMetadataTrait<int32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint32_t> = true;

template<>
struct TypeMetadataTrait<uint32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int64_t> = true;

template<>
struct TypeMetadataTrait<int64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint64_t> = true;

template<>
struct TypeMetadataTrait<uint64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<float> = true;

template<>
struct TypeMetadataTrait<float> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSfN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<double> = true;

template<>
struct TypeMetadataTrait<double> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSdN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<void *> = true;

template<>
struct TypeMetadataTrait<void *> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss13OpaquePointerVN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::Int> = true;

template<>
struct TypeMetadataTrait<swift::Int> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSiN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::UInt> = true;

template<>
struct TypeMetadataTrait<swift::UInt> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSuN;
  }
};

#pragma clang diagnostic pop

} // namespace swift

#endif
#ifdef __cplusplus
namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {
extern "C" {
#endif

// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_void_ptr_0_8(char * _Nonnull result, struct swift_interop_returnStub_swift_void_ptr_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sS2ayxGycfC(void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init()
SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSa9repeating5countSayxGx_SitcfC(const void * _Nonnull repeatedValue, ptrdiff_t count, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(repeating:count:)
SWIFT_EXTERN void $sSa15reserveCapacityyySiF(ptrdiff_t minimumCapacity, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // reserveCapacity(_:)
SWIFT_EXTERN void $sSa6appendyyxnF(const void * _Nonnull newElement, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(_:)
SWIFT_EXTERN void $sSa17_customRemoveLastxSgyF(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _customRemoveLast()
SWIFT_EXTERN void $sSa6remove2atxSi_tF(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t index, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // remove(at:)
SWIFT_EXTERN void $sSa6insert_2atyxn_SitF(const void * _Nonnull newElement, ptrdiff_t i, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // insert(_:at:)
SWIFT_EXTERN void $sSa9removeAll15keepingCapacityySb_tF(bool keepCapacity, void * _Nonnull , SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // removeAll(keepingCapacity:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_void_ptr_0_8 {
  void * _Nullable _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_void_ptr_0_8 swift_interop_passDirect_swift_void_ptr_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_void_ptr_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN ptrdiff_t $sSa10startIndexSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa8endIndexSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa8distance4from2toS2i_SitF(ptrdiff_t start, ptrdiff_t end, struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
SWIFT_EXTERN void $sSayxSicig(SWIFT_INDIRECT_RESULT void * _Nonnull, ptrdiff_t index, struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSa5countSivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $sSa29_hoistableIsNativeTypeCheckedSbyF(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _hoistableIsNativeTypeChecked()
SWIFT_EXTERN ptrdiff_t $sSa8capacitySivg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSa11descriptionSSvg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSa16debugDescriptionSSvg(struct swift_interop_passStub_swift_void_ptr_0_8 _self, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // _
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8 value) {
  memcpy(result + 0, &value._1, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSa12arrayLiteralSayxGxd_tcfC(struct swift_interop_passStub_swift_void_ptr_0_8 elements, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(arrayLiteral:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_uint64_t_0_8 {
  uint64_t _1;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_uint64_t_0_8 swift_interop_passDirect_swift_uint64_t_0_8(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_uint64_t_0_8 result;
  memcpy(&result._1, value + 0, 8);
  return result;
}

SWIFT_EXTERN ptrdiff_t $sSS5IndexV13encodedOffsetSivg(struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS5IndexV13encodedOffsetABSi_tcfC(ptrdiff_t offset) SWIFT_NOEXCEPT SWIFT_CALL; // init(encodedOffset:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 {
  uint64_t _1;
  uint8_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 1);
}

// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(const char * _Nonnull value) {
  struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 result;
  memcpy(&result._1, value + 0, 8);
  memcpy(&result._2, value + 8, 8);
  return result;
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV_6withinABSgAB_SStcfC(struct swift_interop_passStub_swift_uint64_t_0_8 sourcePosition, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 target) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:within:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 utf8, struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // samePosition(in:)
SWIFT_EXTERN ptrdiff_t $sSS5IndexV9hashValueSivg(struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV12samePosition2inABSgSS_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 characters, struct swift_interop_passStub_swift_uint64_t_0_8 _self) SWIFT_NOEXCEPT SWIFT_CALL; // samePosition(in:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfC(struct swift_interop_passStub_swift_uint64_t_0_8 idx, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 target) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:within:)
struct Swift_String_Index {
  _Alignas(8) char _storage[8];
};

SWIFT_EXTERN void $sSqyxSgxcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, const void * _Nonnull some, void * _Nonnull ) SWIFT_NOEXCEPT SWIFT_CALL; // init(_:)
SWIFT_EXTERN void $sSq17unsafelyUnwrappedxvg(SWIFT_INDIRECT_RESULT void * _Nonnull, void * _Nonnull , SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sS2SycfC(void) SWIFT_NOEXCEPT SWIFT_CALL; // init()
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS10startIndexSS0B0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8endIndexSS0B0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS5countSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS8distance4from2toSiSS5IndexV_AEtF(struct swift_interop_passStub_swift_uint64_t_0_8 start, struct swift_interop_passStub_swift_uint64_t_0_8 end, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
SWIFT_EXTERN void $sSS15reserveCapacityyySiF(ptrdiff_t n, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // reserveCapacity(_:)
SWIFT_EXTERN void $sSS6appendyySSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 other, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(_:)
SWIFT_EXTERN void $sSS6append10contentsOfySS_tF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newElements, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // append(contentsOf:)
SWIFT_EXTERN void $sSS9removeAll15keepingCapacityySb_tF(bool keepCapacity, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // removeAll(keepingCapacity:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_swift_uint64_t_0_8_uint64_t_8_16 {
  uint64_t _1;
  uint64_t _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_swift_uint64_t_0_8_uint64_t_8_16(char * _Nonnull result, struct swift_interop_returnStub_swift_uint64_t_0_8_uint64_t_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS4utf8SS8UTF8ViewVvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS4utf8SS8UTF8ViewVvs(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10charactersSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS10charactersSSvs(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 newValue, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS9hashValueSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN bool $sSS7isEmptySbvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_void_ptr_0_8 $sSS13_nfcCodeUnitsSays5UInt8VGvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10lowercasedSSyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // lowercased()
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS10uppercasedSSyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // uppercased()
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS11descriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS16debugDescriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN void $sSS5writeyySSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 other, SWIFT_CONTEXT void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // write(_:)
SWIFT_EXTERN void $sSS5_dumpyyF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _dump()
SWIFT_EXTERN bool $sSS9hasPrefixySbSSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 prefix, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // hasPrefix(_:)
SWIFT_EXTERN bool $sSS9hasSuffixySbSSF(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 suffix, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // hasSuffix(_:)
struct swift_interop_stub_Swift_String {
#if UINTPTR_MAX == 0xFFFFFFFFFFFFFFFFu
uint64_t _1;
void * _Nullable _2;
#elif UINTPTR_MAX == 0xFFFFFFFF
uint32_t _1;
uint32_t _2;
uint32_t _3;
#endif
};
static SWIFT_INLINE_THUNK struct swift_interop_stub_Swift_String swift_interop_passDirect_Swift_String(const char * _Nonnull value) {
struct swift_interop_stub_Swift_String result;
#if UINTPTR_MAX == 0xFFFFFFFFFFFFFFFFu
memcpy(&result._1, value, 8);
memcpy(&result._2, value + 8, 8);
#elif UINTPTR_MAX == 0xFFFFFFFF
memcpy(&result._1, value, 4);
memcpy(&result._2, value + 4, 4);
memcpy(&result._3, value + 8, 4);
#endif
return result;
}
SWIFT_EXTERN void *_Nonnull $sSS10FoundationE19_bridgeToObjectiveCSo8NSStringCyF(swift_interop_stub_Swift_String) SWIFT_NOEXCEPT SWIFT_CALL;
SWIFT_EXTERN swift_interop_stub_Swift_String $sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(void * _Nullable) SWIFT_NOEXCEPT SWIFT_CALL;
SWIFT_EXTERN swift_interop_stub_Swift_String $sSS7cStringSSSPys4Int8VG_tcfC(const char * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;
struct Swift_String {
  _Alignas(8) char _storage[16];
};

SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV10startIndexSS0D0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV8endIndexSS0D0Vvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index5afterSS5IndexVAF_tF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(after:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index6beforeSS5IndexVAF_tF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(before:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8 $sSS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF(struct swift_interop_passStub_swift_uint64_t_0_8 i, ptrdiff_t n, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(_:offsetBy:)
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_uint8_t_8_9 $sSS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF(struct swift_interop_passStub_swift_uint64_t_0_8 i, ptrdiff_t n, struct swift_interop_passStub_swift_uint64_t_0_8 limit, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // index(_:offsetBy:limitedBy:)
SWIFT_EXTERN ptrdiff_t $sSS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8 j, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // distance(from:to:)
SWIFT_EXTERN uint8_t $sSS8UTF8ViewVys5UInt8VSS5IndexVcig(struct swift_interop_passStub_swift_uint64_t_0_8 i, struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS8UTF8ViewV11descriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN struct swift_interop_returnStub_swift_uint64_t_0_8_void_ptr_8_16 $sSS8UTF8ViewV16debugDescriptionSSvg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
SWIFT_EXTERN ptrdiff_t $sSS8UTF8ViewV5countSivg(struct swift_interop_passStub_swift_uint64_t_0_8_void_ptr_8_16 _self) SWIFT_NOEXCEPT SWIFT_CALL; // _
struct Swift_UTF8View {
  _Alignas(8) char _storage[16];
};

}
}
}
namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {




























template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sq") Optional;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
class SWIFT_SYMBOL("s:SS") String;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::String> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sa") Array;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Array;

static_assert(1 <= 3, "unsupported generic requirement list for metadata func");
// Type metadata accessor for Array
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSaMa(swift::_impl::MetadataRequestTy, void * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sa") Array final {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK ~Array() noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Array(const Array &other) noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Array &operator =(const Array &other) noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Array &operator =(Array &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Array(Array &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
/// Creates a new, empty array.
/// This is equivalent to initializing with an empty array literal.
/// For example:
/// \code
/// var emptyArray = Array<Int>()
/// print(emptyArray.isEmpty)
/// // Prints "true"
///
/// emptyArray = []
/// print(emptyArray.isEmpty)
/// // Prints "true"
///
/// \endcode
  static SWIFT_INLINE_THUNK Array<T_0_0> init() SWIFT_SYMBOL("s:S2ayxGycfc");
/// Creates a new array containing the specified number of a single, repeated
/// value.
/// Here’s an example of creating an array initialized with five strings
/// containing the letter <em>Z</em>.
/// \code
/// let fiveZs = Array(repeating: "Z", count: 5)
/// print(fiveZs)
/// // Prints "["Z", "Z", "Z", "Z", "Z"]"
///
/// \endcode\param repeatedValue The element to repeat.
///
/// \param count The number of times to repeat the value passed in the
/// <code>repeating</code> parameter. <code>count</code> must be zero or greater.
///
  static SWIFT_INLINE_THUNK Array<T_0_0> init(const T_0_0& repeatedValue, swift::Int count) SWIFT_SYMBOL("s:Sa9repeating5countSayxGx_Sitcfc");
/// Reserves enough space to store the specified number of elements.
/// If you are adding a known number of elements to an array, use this method
/// to avoid multiple reallocations. This method ensures that the array has
/// unique, mutable, contiguous storage, with space allocated for at least
/// the requested number of elements.
/// Calling the <code>reserveCapacity(_:)</code> method on an array with bridged storage
/// triggers a copy to contiguous storage even if the existing storage
/// has room to store <code>minimumCapacity</code> elements.
/// For performance reasons, the size of the newly allocated storage might be
/// greater than the requested capacity. Use the array’s <code>capacity</code> property
/// to determine the size of the new storage.
/// <h1>Preserving an Array’s Geometric Growth Strategy</h1>
/// If you implement a custom data structure backed by an array that grows
/// dynamically, naively calling the <code>reserveCapacity(_:)</code> method can lead
/// to worse than expected performance. Arrays need to follow a geometric
/// allocation pattern for appending elements to achieve amortized
/// constant-time performance. The <code>Array</code> type’s <code>append(_:)</code> and
/// <code>append(contentsOf:)</code> methods take care of this detail for you, but
/// <code>reserveCapacity(_:)</code> allocates only as much space as you tell it to
/// (padded to a round value), and no more. This avoids over-allocation, but
/// can result in insertion not having amortized constant-time performance.
/// The following code declares <code>values</code>, an array of integers, and the
/// <code>addTenQuadratic()</code> function, which adds ten more values to the <code>values</code>
/// array on each call.
/// \code
///   var values: [Int] = [0, 1, 2, 3]
///
///   // Don't use 'reserveCapacity(_:)' like this
///   func addTenQuadratic() {
///       let newCount = values.count + 10
///       values.reserveCapacity(newCount)
///       for n in values.count..<newCount {
///           values.append(n)
///       }
///   }
///
/// \endcodeThe call to <code>reserveCapacity(_:)</code> increases the <code>values</code> array’s capacity
/// by exactly 10 elements on each pass through <code>addTenQuadratic()</code>, which
/// is linear growth. Instead of having constant time when averaged over
/// many calls, the function may decay to performance that is linear in
/// <code>values.count</code>. This is almost certainly not what you want.
/// In cases like this, the simplest fix is often to simply remove the call
/// to <code>reserveCapacity(_:)</code>, and let the <code>append(_:)</code> method grow the array
/// for you.
/// \code
///   func addTen() {
///       let newCount = values.count + 10
///       for n in values.count..<newCount {
///           values.append(n)
///       }
///   }
///
/// \endcodeIf you need more control over the capacity of your array, implement your
/// own geometric growth strategy, passing the size you compute to
/// <code>reserveCapacity(_:)</code>.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the number of elements in the array.
/// \param minimumCapacity The requested number of elements to store.
///
  SWIFT_INLINE_THUNK void reserveCapacity(swift::Int minimumCapacity) SWIFT_SYMBOL("s:Sa15reserveCapacityyySiF");
/// Adds a new element at the end of the array.
/// Use this method to append a single element to the end of a mutable array.
/// \code
/// var numbers = [1, 2, 3, 4, 5]
/// numbers.append(100)
/// print(numbers)
/// // Prints "[1, 2, 3, 4, 5, 100]"
///
/// \endcodeBecause arrays increase their allocated capacity using an exponential
/// strategy, appending a single element to an array is an O(1) operation
/// when averaged over many calls to the <code>append(_:)</code> method. When an array
/// has additional capacity and is not sharing its storage with another
/// instance, appending an element is O(1). When an array needs to
/// reallocate storage before appending or its storage is shared with
/// another copy, appending is O(<em>n</em>), where <em>n</em> is the length of the array.
/// complexity:
/// O(1) on average, over many calls to <code>append(_:)</code> on the
/// same array.
/// \param newElement The element to append to the array.
///
  SWIFT_INLINE_THUNK void append(const T_0_0& newElement) SWIFT_SYMBOL("s:Sa6appendyyxnF");
  SWIFT_INLINE_THUNK swift::Optional<T_0_0> _customRemoveLast() SWIFT_SYMBOL("s:Sa17_customRemoveLastxSgyF");
/// Removes and returns the element at the specified position.
/// All the elements following the specified position are moved up to
/// close the gap.
/// \code
/// var measurements: [Double] = [1.1, 1.5, 2.9, 1.2, 1.5, 1.3, 1.2]
/// let removed = measurements.remove(at: 2)
/// print(measurements)
/// // Prints "[1.1, 1.5, 1.2, 1.5, 1.3, 1.2]"
///
/// \endcodecomplexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array.
/// \param index The position of the element to remove. <code>index</code> must
/// be a valid index of the array.
///
///
/// returns:
/// The element at the specified index.
  SWIFT_INLINE_THUNK T_0_0 removeAt(swift::Int index) SWIFT_SYMBOL("s:Sa6remove2atxSi_tF");
/// Inserts a new element at the specified position.
/// The new element is inserted before the element currently at the specified
/// index. If you pass the array’s <code>endIndex</code> property as the <code>index</code>
/// parameter, the new element is appended to the array.
/// \code
/// var numbers = [1, 2, 3, 4, 5]
/// numbers.insert(100, at: 3)
/// numbers.insert(200, at: numbers.endIndex)
///
/// print(numbers)
/// // Prints "[1, 2, 3, 100, 4, 5, 200]"
///
/// \endcodecomplexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array. If
/// <code>i == endIndex</code>, this method is equivalent to <code>append(_:)</code>.
/// \param newElement The new element to insert into the array.
///
/// \param i The position at which to insert the new element.
/// <code>index</code> must be a valid index of the array or equal to its <code>endIndex</code>
/// property.
///
  SWIFT_INLINE_THUNK void insertAt(const T_0_0& newElement, swift::Int i) SWIFT_SYMBOL("s:Sa6insert_2atyxn_SitF");
/// Removes all elements from the array.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the length of the array.
/// \param keepCapacity Pass <code>true</code> to keep the existing capacity of
/// the array after removing its elements. The default value is
/// <code>false</code>.
///
  SWIFT_INLINE_THUNK void removeAllKeepingCapacity(bool keepCapacity) SWIFT_SYMBOL("s:Sa9removeAll15keepingCapacityySb_tF");
  SWIFT_INLINE_THUNK swift::Int getStartIndex() const SWIFT_SYMBOL("s:Sa10startIndexSivp");
  SWIFT_INLINE_THUNK swift::Int getEndIndex() const SWIFT_SYMBOL("s:Sa8endIndexSivp");
/// Returns the distance between two indices.
/// \param start A valid index of the collection.
///
/// \param end Another valid index of the collection. If <code>end</code> is equal to
/// <code>start</code>, the result is zero.
///
///
/// returns:
/// The distance between <code>start</code> and <code>end</code>.
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(swift::Int start, swift::Int end) const SWIFT_SYMBOL("s:Sa8distance4from2toS2i_SitF");
SWIFT_INLINE_THUNK T_0_0 operator [](swift::Int index) const SWIFT_SYMBOL("s:SayxSicig");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:Sa5countSivp");
/// Returns <code>true</code> if the array is native and does not need a deferred
/// type check.  May be hoisted by the optimizer, which means its
/// results may be stale by the time they are used if there is an
/// inout violation in user code.
  SWIFT_INLINE_THUNK bool _hoistableIsNativeTypeChecked() const SWIFT_SYMBOL("s:Sa29_hoistableIsNativeTypeCheckedSbyF");
  SWIFT_INLINE_THUNK swift::Int getCapacity() const SWIFT_SYMBOL("s:Sa8capacitySivp");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:Sa11descriptionSSvp");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:Sa16debugDescriptionSSvp");
/// Creates an array from the given array literal.
/// Do not call this initializer directly. It is used by the compiler
/// when you use an array literal. Instead, create a new array by using an
/// array literal as its value. To do this, enclose a comma-separated list of
/// values in square brackets.
/// Here, an array of strings is created from an array literal holding
/// only strings.
/// \code
/// let ingredients = ["cocoa beans", "sugar", "cocoa butter", "salt"]
///
/// \endcode\param elements A variadic list of elements of the new array.
///
  static SWIFT_INLINE_THUNK Array<T_0_0> init(const Array<T_0_0>& elements) SWIFT_SYMBOL("s:Sa12arrayLiteralSayxGxd_tcfc");
private:
  SWIFT_INLINE_THUNK Array(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Array _make() noexcept {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Array(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Array<T_0_0>;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSayxGD;
  static inline constexpr $sSayxGD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Array {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Array<T_0_0> &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Array<T_0_0> &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Array<T_0_0> returnNewValue(T callable) {
    auto result = Array<T_0_0>::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
struct TypeMetadataTrait<swift::Array<T_0_0>> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSaMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata())._0;
  }
};
namespace _impl{
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {










































































































































































































































































































































class SWIFT_SYMBOL("s:SS8UTF8ViewV") UTF8View;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::UTF8View> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
class SWIFT_SYMBOL("s:SS5IndexV") String_Index;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<swift::String_Index> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
namespace _impl {

class _impl_String_Index;

// Type metadata accessor for Index
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSS5IndexVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS5IndexV") String_Index final {
public:
  SWIFT_INLINE_THUNK ~String_Index() noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK String_Index(const String_Index &other) noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK String_Index &operator =(const String_Index &other) noexcept {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK String_Index &operator =(String_Index &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER String_Index(String_Index &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK swift::Int getEncodedOffset() const SWIFT_SYMBOL("s:SS5IndexV13encodedOffsetSivp");
/// Creates a new index at the specified code unit offset.
/// \param offset An offset in code units.
///
  static SWIFT_INLINE_THUNK String_Index init(swift::Int offset) SWIFT_SYMBOL("s:SS5IndexV13encodedOffsetABSi_tcfc");
/// Creates an index in the given string that corresponds exactly to the
/// specified position.
/// If the index passed as <code>sourcePosition</code> represents the start of an
/// extended grapheme cluster—the element type of a string—then the
/// initializer succeeds.
/// The following example converts the position of the Unicode scalar <code>"e"</code>
/// into its corresponding position in the string. The character at that
/// position is the composed <code>"é"</code> character.
/// \code
/// let cafe = "Cafe\u{0301}"
/// print(cafe)
/// // Prints "Café"
///
/// let scalarsIndex = cafe.unicodeScalars.firstIndex(of: "e")!
/// let stringIndex = String.Index(scalarsIndex, within: cafe)!
///
/// print(cafe[...stringIndex])
/// // Prints "Café"
///
/// \endcodeIf the index passed as <code>sourcePosition</code> doesn’t have an exact
/// corresponding position in <code>target</code>, the result of the initializer is
/// <code>nil</code>. For example, an attempt to convert the position of the combining
/// acute accent (<code>"\u{0301}"</code>) fails. Combining Unicode scalars do not have
/// their own position in a string.
/// \code
/// let nextScalarsIndex = cafe.unicodeScalars.index(after: scalarsIndex)
/// let nextStringIndex = String.Index(nextScalarsIndex, within: cafe)
///
/// print(nextStringIndex)
/// // Prints "nil"
///
/// \endcode\param sourcePosition A position in a view of the <code>target</code> parameter.
/// <code>sourcePosition</code> must be a valid index of at least one of the views
/// of <code>target</code>.
///
/// \param target The string referenced by the resulting index.
///
  static SWIFT_INLINE_THUNK swift::Optional<String_Index> init(const String_Index& sourcePosition, const String& target) SWIFT_SYMBOL("s:SS5IndexV_6withinABSgAB_SStcfc");
/// Returns the position in the given UTF-8 view that corresponds exactly to
/// this index.
/// This example first finds the position of the character <code>"é"</code>, and then
/// uses this method find the same position in the string’s <code>utf8</code> view.
/// \code
/// let cafe = "Café"
/// if let i = cafe.firstIndex(of: "é") {
///     let j = i.samePosition(in: cafe.utf8)!
///     print(Array(cafe.utf8[j...]))
/// }
/// // Prints "[195, 169]"
///
/// \endcode\param utf8 The view to use for the index conversion. This index
/// must be a valid index of at least one view of the string shared by
/// <code>utf8</code>.
///
///
/// returns:
/// The position in <code>utf8</code> that corresponds exactly to this index.
/// If this index does not have an exact corresponding position in <code>utf8</code>,
/// this method returns <code>nil</code>. For example, an attempt to convert the
/// position of a UTF-16 trailing surrogate returns <code>nil</code>.
  SWIFT_INLINE_THUNK swift::Optional<String_Index> samePositionIn(const UTF8View& utf8) const SWIFT_SYMBOL("s:SS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF");
  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:SS5IndexV9hashValueSivp");
/// Returns the position in the given string that corresponds exactly to this
/// index.
/// This example first finds the position of a space (UTF-8 code point <code>32</code>)
/// in a string’s <code>utf8</code> view and then uses this method find the same position
/// in the string.
/// \code
/// let cafe = "Café 🍵"
/// let i = cafe.unicodeScalars.firstIndex(of: "🍵")!
/// let j = i.samePosition(in: cafe)!
/// print(cafe[j...])
/// // Prints "🍵"
///
/// \endcode\param characters The string to use for the index conversion.
/// This index must be a valid index of at least one view of <code>characters</code>.
///
///
/// returns:
/// The position in <code>characters</code> that corresponds exactly to
/// this index. If this index does not have an exact corresponding
/// position in <code>characters</code>, this method returns <code>nil</code>. For example,
/// an attempt to convert the position of a UTF-8 continuation byte
/// returns <code>nil</code>.
  SWIFT_INLINE_THUNK swift::Optional<String_Index> samePositionIn(const String& characters) const SWIFT_SYMBOL("s:SS5IndexV12samePosition2inABSgSS_tF");
/// Creates an index in the given UTF-8 view that corresponds exactly to the
/// specified <code>UTF16View</code> position.
/// The following example finds the position of a space in a string’s <code>utf16</code>
/// view and then converts that position to an index in the string’s
/// <code>utf8</code> view.
/// \code
/// let cafe = "Café 🍵"
///
/// let utf16Index = cafe.utf16.firstIndex(of: 32)!
/// let utf8Index = String.UTF8View.Index(utf16Index, within: cafe.utf8)!
///
/// print(Array(cafe.utf8[..<utf8Index]))
/// // Prints "[67, 97, 102, 195, 169]"
///
/// \endcodeIf the position passed in <code>utf16Index</code> doesn’t have an exact
/// corresponding position in <code>utf8</code>, the result of the initializer is
/// <code>nil</code>. For example, because UTF-8 and UTF-16 represent high Unicode code
/// points differently, an attempt to convert the position of the trailing
/// surrogate of a UTF-16 surrogate pair fails.
/// The next example attempts to convert the indices of the two UTF-16 code
/// points that represent the teacup emoji (<code>"🍵"</code>). The index of the lead
/// surrogate is successfully converted to a position in <code>utf8</code>, but the
/// index of the trailing surrogate is not.
/// \code
/// let emojiHigh = cafe.utf16.index(after: utf16Index)
/// print(String.UTF8View.Index(emojiHigh, within: cafe.utf8))
/// // Prints "Optional(String.Index(...))"
///
/// let emojiLow = cafe.utf16.index(after: emojiHigh)
/// print(String.UTF8View.Index(emojiLow, within: cafe.utf8))
/// // Prints "nil"
///
/// \endcode\param sourcePosition A position in a <code>String</code> or one of its views.
///
/// \param target The <code>UTF8View</code> in which to find the new position.
///
  static SWIFT_INLINE_THUNK swift::Optional<String_Index> init(const String_Index& idx, const UTF8View& target) SWIFT_SYMBOL("s:SS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfc");
private:
  SWIFT_INLINE_THUNK String_Index() noexcept {}
  static SWIFT_INLINE_THUNK String_Index _make() noexcept { return String_Index(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[8];
  friend class _impl::_impl_String_Index;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSS5IndexVD;
  static inline constexpr $sSS5IndexVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_String_Index {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(String_Index &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const String_Index &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER String_Index returnNewValue(T callable) {
    auto result = String_Index::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSS5IndexVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::String_Index> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSS5IndexVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::String_Index> = true;
template<>
struct implClassFor<swift::String_Index> { using type = swift::_impl::_impl_String_Index; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {
































































































































































































































































/// A type that represents either a wrapped value or the absence of a value.
/// You use the <code>Optional</code> type whenever you use optional values, even if you
/// never type the word <code>Optional</code>. Swift’s type system usually shows the
/// wrapped type’s name with a trailing question mark (<code>?</code>) instead of showing
/// the full type name. For example, if a variable has the type <code>Int?</code>, that’s
/// just another way of writing <code>Optional<Int></code>. The shortened form is
/// preferred for ease of reading and writing code.
/// The types of <code>shortForm</code> and <code>longForm</code> in the following code sample are
/// the same:
/// \code
/// let shortForm: Int? = Int("42")
/// let longForm: Optional<Int> = Int("42")
///
/// \endcodeThe <code>Optional</code> type is an enumeration with two cases. <code>Optional.none</code> is
/// equivalent to the <code>nil</code> literal. <code>Optional.some(Wrapped)</code> stores a wrapped
/// value. For example:
/// \code
/// let number: Int? = Optional.some(42)
/// let noNumber: Int? = Optional.none
/// print(noNumber == nil)
/// // Prints "true"
///
/// \endcodeYou must unwrap the value of an <code>Optional</code> instance before you can use it
/// in many contexts. Because Swift provides several ways to safely unwrap
/// optional values, you can choose the one that helps you write clear,
/// concise code.
/// The following examples use this dictionary of image names and file paths:
/// \code
/// let imagePaths = ["star": "/glyphs/star.png",
///                   "portrait": "/images/content/portrait.jpg",
///                   "spacer": "/images/shared/spacer.gif"]
///
/// \endcodeGetting a dictionary’s value using a key returns an optional value, so
/// <code>imagePaths["star"]</code> has type <code>Optional<String></code> or, written in the
/// preferred manner, <code>String?</code>.
/// <h2>Optional Binding</h2>
/// To conditionally bind the wrapped value of an <code>Optional</code> instance to a new
/// variable, use one of the optional binding control structures, including
/// <code>if let</code>, <code>guard let</code>, and <code>switch</code>.
/// \code
/// if let starPath = imagePaths["star"] {
///     print("The star image is at '\(starPath)'")
/// } else {
///     print("Couldn't find the star image")
/// }
/// // Prints "The star image is at '/glyphs/star.png'"
///
/// \endcode<h2>Optional Chaining</h2>
/// To safely access the properties and methods of a wrapped instance, use the
/// postfix optional chaining operator (postfix <code>?</code>). The following example uses
/// optional chaining to access the <code>hasSuffix(_:)</code> method on a <code>String?</code>
/// instance.
/// \code
/// if imagePaths["star"]?.hasSuffix(".png") == true {
///     print("The star image is in PNG format")
/// }
/// // Prints "The star image is in PNG format"
///
/// \endcode<h2>Using the Nil-Coalescing Operator</h2>
/// Use the nil-coalescing operator (<code>??</code>) to supply a default value in case
/// the <code>Optional</code> instance is <code>nil</code>. Here a default path is supplied for an
/// image that is missing from <code>imagePaths</code>.
/// \code
/// let defaultImagePath = "/images/default.png"
/// let heartPath = imagePaths["heart"] ?? defaultImagePath
/// print(heartPath)
/// // Prints "/images/default.png"
///
/// \endcodeThe <code>??</code> operator also works with another <code>Optional</code> instance on the
/// right-hand side. As a result, you can chain multiple <code>??</code> operators
/// together.
/// \code
/// let shapePath = imagePaths["cir"] ?? imagePaths["squ"] ?? defaultImagePath
/// print(shapePath)
/// // Prints "/images/default.png"
///
/// \endcode<h2>Unconditional Unwrapping</h2>
/// When you’re certain that an instance of <code>Optional</code> contains a value, you
/// can unconditionally unwrap the value by using the forced
/// unwrap operator (postfix <code>!</code>). For example, the result of the failable <code>Int</code>
/// initializer is unconditionally unwrapped in the example below.
/// \code
/// let number = Int("42")!
/// print(number)
/// // Prints "42"
///
/// \endcodeYou can also perform unconditional optional chaining by using the postfix
/// <code>!</code> operator.
/// \code
/// let isPNG = imagePaths["star"]!.hasSuffix(".png")
/// print(isPNG)
/// // Prints "true"
///
/// \endcodeUnconditionally unwrapping a <code>nil</code> instance with <code>!</code> triggers a runtime
/// error.
namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Optional;

static_assert(1 <= 3, "unsupported generic requirement list for metadata func");
// Type metadata accessor for Optional
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSqMa(swift::_impl::MetadataRequestTy, void * _Nonnull) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum Optional
extern "C" {
extern unsigned $sSq4noneyxSgABmlFWC;
extern unsigned $sSq4someyxSgxcABmlFWC;
}

} // namespace _impl

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class SWIFT_SYMBOL("s:Sq") Optional final {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK ~Optional() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK Optional(const Optional &other) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK Optional &operator =(const Optional &other) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK Optional &operator =(Optional &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER Optional(Optional &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    some SWIFT_SYMBOL("s:Sq4someyxSgxcABmlF"),
    none SWIFT_SYMBOL("s:Sq4noneyxSgABmlF")
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_some {  // impl struct for case some
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::some;
    }
    SWIFT_INLINE_THUNK Optional<T_0_0> operator()(const T_0_0& val) const;
  } some SWIFT_SYMBOL("s:Sq4someyxSgxcABmlF");
  SWIFT_INLINE_THUNK bool isSome() const;
  SWIFT_INLINE_THUNK T_0_0 getSome() const;

  inline const static struct _impl_none {  // impl struct for case none
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::none;
    }
    SWIFT_INLINE_THUNK Optional<T_0_0> operator()() const;
  } none SWIFT_SYMBOL("s:Sq4noneyxSgABmlF");
  SWIFT_INLINE_THUNK bool isNone() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    switch (_getEnumTag()) {
      case 0: return cases::some;
      case 1: return cases::none;
      default: abort();
    }
  }

/// Creates an instance that stores the given value.
  static SWIFT_INLINE_THUNK swift::Optional<T_0_0> init(const T_0_0& some_) SWIFT_SYMBOL("s:SqyxSgxcfc");
  SWIFT_INLINE_THUNK T_0_0 getUnsafelyUnwrapped() const SWIFT_SYMBOL("s:Sq17unsafelyUnwrappedxvp");
#define SWIFT_CXX_INTEROP_OPTIONAL_MIXIN
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#if __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Alternatively, allow user to find the header using additional include path into '<toolchain>/lib/swift'.
#elif __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop
private:
  SWIFT_INLINE_THUNK Optional(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK Optional _make() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return Optional(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_Optional<T_0_0>;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sxSgD;
  static inline constexpr $sxSgD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
class _impl_Optional {
public:
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(Optional<T_0_0> &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const Optional<T_0_0> &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER Optional<T_0_0> returnNewValue(T callable) {
    auto result = Optional<T_0_0>::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
struct TypeMetadataTrait<swift::Optional<T_0_0>> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSqMa(0, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata())._0;
  }
};
namespace _impl{
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {

























































































































































































































































































































































































































namespace _impl {

class _impl_String;

// Type metadata accessor for String
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSSMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS") String final {
public:
  SWIFT_INLINE_THUNK ~String() noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK String(const String &other) noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK String &operator =(const String &other) noexcept {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK String &operator =(String &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER String(String &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
/// Creates an empty string.
/// Using this initializer is equivalent to initializing a string with an
/// empty string literal.
/// \code
/// let empty = ""
/// let alsoEmpty = String()
///
/// \endcode
  static SWIFT_INLINE_THUNK String init() SWIFT_SYMBOL("s:S2Sycfc");
  SWIFT_INLINE_THUNK String_Index getStartIndex() const SWIFT_SYMBOL("s:SS10startIndexSS0B0Vvp");
  SWIFT_INLINE_THUNK String_Index getEndIndex() const SWIFT_SYMBOL("s:SS8endIndexSS0B0Vvp");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:SS5countSivp");
/// Returns the distance between two indices.
/// complexity:
/// O(<em>n</em>), where <em>n</em> is the resulting distance.
/// \param start A valid index of the collection.
///
/// \param end Another valid index of the collection. If <code>end</code> is equal to
/// <code>start</code>, the result is zero.
///
///
/// returns:
/// The distance between <code>start</code> and <code>end</code>.
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(const String_Index& start, const String_Index& end) const SWIFT_SYMBOL("s:SS8distance4from2toSiSS5IndexV_AEtF");
/// Reserves enough space in the string’s underlying storage to store the
/// specified number of ASCII characters.
/// Because each character in a string can require more than a single ASCII
/// character’s worth of storage, additional allocation may be necessary
/// when adding characters to a string after a call to
/// <code>reserveCapacity(_:)</code>.
/// complexity:
/// O(<em>n</em>)
/// \param n The minimum number of ASCII character’s worth of storage
/// to allocate.
///
  SWIFT_INLINE_THUNK void reserveCapacity(swift::Int n) SWIFT_SYMBOL("s:SS15reserveCapacityyySiF");
/// Appends the given string to this string.
/// The following example builds a customized greeting by using the
/// <code>append(_:)</code> method:
/// \code
/// var greeting = "Hello, "
/// if let name = getUserName() {
///     greeting.append(name)
/// } else {
///     greeting.append("friend")
/// }
/// print(greeting)
/// // Prints "Hello, friend"
///
/// \endcode\param other Another string.
///
  SWIFT_INLINE_THUNK void append(const String& other) SWIFT_SYMBOL("s:SS6appendyySSF");
  SWIFT_INLINE_THUNK void appendContentsOf(const String& newElements) SWIFT_SYMBOL("s:SS6append10contentsOfySS_tF");
/// Replaces this string with the empty string.
/// Calling this method invalidates any existing indices for use with this
/// string.
/// \param keepCapacity Pass <code>true</code> to prevent the release of the
/// string’s allocated storage. Retaining the storage can be a useful
/// optimization when you’re planning to grow the string again. The
/// default value is <code>false</code>.
///
  SWIFT_INLINE_THUNK void removeAllKeepingCapacity(bool keepCapacity) SWIFT_SYMBOL("s:SS9removeAll15keepingCapacityySb_tF");
  SWIFT_INLINE_THUNK UTF8View getUtf8() const SWIFT_SYMBOL("s:SS4utf8SS8UTF8ViewVvp");
  SWIFT_INLINE_THUNK void setUtf8(const UTF8View& newValue) SWIFT_SYMBOL("s:SS4utf8SS8UTF8ViewVvp");
  SWIFT_INLINE_THUNK String getCharacters() const SWIFT_SYMBOL("s:SS10charactersSSvp");
  SWIFT_INLINE_THUNK void setCharacters(const String& newValue) SWIFT_SYMBOL("s:SS10charactersSSvp");
  SWIFT_INLINE_THUNK swift::Int getHashValue() const SWIFT_SYMBOL("s:SS9hashValueSivp");
  SWIFT_INLINE_THUNK bool isEmpty() const SWIFT_SYMBOL("s:SS7isEmptySbvp");
  SWIFT_INLINE_THUNK Array<uint8_t> get_nfcCodeUnits() const SWIFT_SYMBOL("s:SS13_nfcCodeUnitsSays5UInt8VGvp");
/// Returns a lowercase version of the string.
/// Here’s an example of transforming a string to all lowercase letters.
/// \code
/// let cafe = "BBQ Café 🍵"
/// print(cafe.lowercased())
/// // Prints "bbq café 🍵"
///
/// \endcodecomplexity:
/// O(<em>n</em>)
///
/// returns:
/// A lowercase copy of the string.
  SWIFT_INLINE_THUNK String lowercased() const SWIFT_SYMBOL("s:SS10lowercasedSSyF");
/// Returns an uppercase version of the string.
/// The following example transforms a string to uppercase letters:
/// \code
/// let cafe = "Café 🍵"
/// print(cafe.uppercased())
/// // Prints "CAFÉ 🍵"
///
/// \endcodecomplexity:
/// O(<em>n</em>)
///
/// returns:
/// An uppercase copy of the string.
  SWIFT_INLINE_THUNK String uppercased() const SWIFT_SYMBOL("s:SS10uppercasedSSyF");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:SS11descriptionSSvp");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:SS16debugDescriptionSSvp");
/// Appends the given string to this string.
/// \param other A string to append.
///
  SWIFT_INLINE_THUNK void write(const String& other) SWIFT_SYMBOL("s:SS5writeyySSF");
  SWIFT_INLINE_THUNK void _dump() const SWIFT_SYMBOL("s:SS5_dumpyyF");
  SWIFT_INLINE_THUNK bool hasPrefix(const String& prefix) const SWIFT_SYMBOL("s:SS9hasPrefixySbSSF");
  SWIFT_INLINE_THUNK bool hasSuffix(const String& suffix) const SWIFT_SYMBOL("s:SS9hasSuffixySbSSF");
#if defined(__OBJC__)
  SWIFT_INLINE_THUNK operator NSString * _Nonnull () const noexcept {
    return (__bridge_transfer NSString *)(_impl::$sSS10FoundationE19_bridgeToObjectiveCSo8NSStringCyF(_impl::swift_interop_passDirect_Swift_String(_getOpaquePointer())));
  }
static SWIFT_INLINE_THUNK String init(NSString * _Nonnull nsString) noexcept {
    auto result = _make();
    auto res = _impl::$sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ((__bridge void *)nsString);
    memcpy(result._getOpaquePointer(), &res, sizeof(res));
    return result;
  }

#endif
#define SWIFT_CXX_INTEROP_STRING_MIXIN
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#if __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Alternatively, allow user to find the header using additional include path into '<toolchain>/lib/swift'.
#elif __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop
private:
  SWIFT_INLINE_THUNK String() noexcept {}
  static SWIFT_INLINE_THUNK String _make() noexcept { return String(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[16];
  friend class _impl::_impl_String;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSSD;
  static inline constexpr $sSSD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_String {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(String &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const String &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER String returnNewValue(T callable) {
    auto result = String::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSSMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::String> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSSMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::String> = true;
template<>
struct implClassFor<swift::String> { using type = swift::_impl::_impl_String; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {




















































































































































































namespace _impl {

class _impl_UTF8View;

// Type metadata accessor for UTF8View
SWIFT_EXTERN swift::_impl::MetadataResponseTy $sSS8UTF8ViewVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:SS8UTF8ViewV") UTF8View final {
public:
  SWIFT_INLINE_THUNK ~UTF8View() noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK UTF8View(const UTF8View &other) noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK UTF8View &operator =(const UTF8View &other) noexcept {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK UTF8View &operator =(UTF8View &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER UTF8View(UTF8View &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  SWIFT_INLINE_THUNK String_Index getStartIndex() const SWIFT_SYMBOL("s:SS8UTF8ViewV10startIndexSS0D0Vvp");
  SWIFT_INLINE_THUNK String_Index getEndIndex() const SWIFT_SYMBOL("s:SS8UTF8ViewV8endIndexSS0D0Vvp");
/// Returns the next consecutive position after <code>i</code>.
/// precondition:
/// The next position is representable.
  SWIFT_INLINE_THUNK String_Index indexAfter(const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index5afterSS5IndexVAF_tF");
  SWIFT_INLINE_THUNK String_Index indexBefore(const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index6beforeSS5IndexVAF_tF");
  SWIFT_INLINE_THUNK String_Index indexOffsetBy(const String_Index& i, swift::Int n) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF");
  SWIFT_INLINE_THUNK swift::Optional<String_Index> indexOffsetByLimitedBy(const String_Index& i, swift::Int n, const String_Index& limit) const SWIFT_SYMBOL("s:SS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF");
  SWIFT_INLINE_THUNK swift::Int distanceFromTo(const String_Index& i, const String_Index& j) const SWIFT_SYMBOL("s:SS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF");
SWIFT_INLINE_THUNK uint8_t operator [](const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewVys5UInt8VSS5IndexVcig");
  SWIFT_INLINE_THUNK String getDescription() const SWIFT_SYMBOL("s:SS8UTF8ViewV11descriptionSSvp");
  SWIFT_INLINE_THUNK String getDebugDescription() const SWIFT_SYMBOL("s:SS8UTF8ViewV16debugDescriptionSSvp");
  SWIFT_INLINE_THUNK swift::Int getCount() const SWIFT_SYMBOL("s:SS8UTF8ViewV5countSivp");
private:
  SWIFT_INLINE_THUNK UTF8View() noexcept {}
  static SWIFT_INLINE_THUNK UTF8View _make() noexcept { return UTF8View(); }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage; }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage; }

  alignas(8) char _storage[16];
  friend class _impl::_impl_UTF8View;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $sSS8UTF8ViewVD;
  static inline constexpr $sSS8UTF8ViewVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_UTF8View {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(UTF8View &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const UTF8View &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER UTF8View returnNewValue(T callable) {
    auto result = UTF8View::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$sSS8UTF8ViewVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<swift::UTF8View> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return swift::_impl::$sSS8UTF8ViewVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<swift::UTF8View> = true;
template<>
struct implClassFor<swift::UTF8View> { using type = swift::_impl::_impl_UTF8View; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace swift SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("swift") {



















































































































































































































































































































  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init() {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sS2ayxGycfC(swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init(const T_0_0& repeatedValue, swift::Int count) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSa9repeating5countSayxGx_SitcfC(swift::_impl::getOpaquePointer(repeatedValue), count, swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::reserveCapacity(swift::Int minimumCapacity) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa15reserveCapacityyySiF(minimumCapacity, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::append(const T_0_0& newElement) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa6appendyyxnF(swift::_impl::getOpaquePointer(newElement), swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> Array<T_0_0>::_customRemoveLast() {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$sSa17_customRemoveLastxSgyF(result, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Array<T_0_0>::removeAt(swift::Int index) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSa6remove2atxSi_tF(reinterpret_cast<void *>(&returnValue), index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSa6remove2atxSi_tF(returnValue, index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSa6remove2atxSi_tF(storage, index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSa6remove2atxSi_tF(reinterpret_cast<void *>(&returnValue), index, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::insertAt(const T_0_0& newElement, swift::Int i) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa6insert_2atyxn_SitF(swift::_impl::getOpaquePointer(newElement), i, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK void Array<T_0_0>::removeAllKeepingCapacity(bool keepCapacity) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa9removeAll15keepingCapacityySb_tF(keepCapacity, swift::TypeMetadataTrait<Array<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getStartIndex() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa10startIndexSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getEndIndex() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8endIndexSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::distanceFromTo(swift::Int start, swift::Int end) const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8distance4from2toS2i_SitF(start, end, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Array<T_0_0>::operator [](swift::Int index) const SWIFT_SYMBOL("s:SayxSicig") {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSayxSicig(reinterpret_cast<void *>(&returnValue), index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSayxSicig(returnValue, index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSayxSicig(storage, index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSayxSicig(reinterpret_cast<void *>(&returnValue), index, _impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getCount() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa5countSivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK bool Array<T_0_0>::_hoistableIsNativeTypeChecked() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa29_hoistableIsNativeTypeCheckedSbyF(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Int Array<T_0_0>::getCapacity() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::$sSa8capacitySivg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK String Array<T_0_0>::getDescription() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSa11descriptionSSvg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK String Array<T_0_0>::getDebugDescription() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSa16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_getOpaquePointer()), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK Array<T_0_0> Array<T_0_0>::init(const Array<T_0_0>& elements) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Array<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSa12arrayLiteralSayxGxd_tcfC(_impl::swift_interop_passDirect_swift_void_ptr_0_8(_impl::_impl_Array<T_0_0>::getOpaquePointer(elements)), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata()));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String_Index::getEncodedOffset() const {
  return _impl::$sSS5IndexV13encodedOffsetSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String_Index String_Index::init(swift::Int offset) {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS5IndexV13encodedOffsetABSi_tcfC(offset));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::init(const String_Index& sourcePosition, const String& target) {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV_6withinABSgAB_SStcfC(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(sourcePosition)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(target))));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::samePositionIn(const UTF8View& utf8) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV12samePosition2inABSgSS8UTF8ViewV_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(utf8)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String_Index::getHashValue() const {
  return _impl::$sSS5IndexV9hashValueSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::samePositionIn(const String& characters) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV12samePosition2inABSgSS_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(characters)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> String_Index::init(const String_Index& idx, const UTF8View& target) {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS5IndexV_6withinABSgAB_SS8UTF8ViewVtcfC(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(idx)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(target))));
  });
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK Optional<T_0_0> Optional<T_0_0>::_impl_some::operator()(const T_0_0& val) const {
    auto result = Optional<T_0_0>::_make();
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
    void *ptr = ::swift::_impl::_impl_RefCountedClass::copyOpaquePointer(val);
    memcpy(result._getOpaquePointer(), &ptr, sizeof(ptr));
} else if constexpr (::swift::_impl::isValueType<T_0_0>) {
    alignas(T_0_0) unsigned char buffer[sizeof(T_0_0)];
    auto *valCopy = new(buffer) T_0_0(val);
    swift::_impl::implClassFor<T_0_0>::type::initializeWithTake(result._getOpaquePointer(), swift::_impl::implClassFor<T_0_0>::type::getOpaquePointer(*valCopy));
} else {
    memcpy(result._getOpaquePointer(), &val, sizeof(val));
}
#pragma clang diagnostic pop
    result._destructiveInjectEnumTag(0);
    return result;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK  bool Optional<T_0_0>::isSome() const {
    return *this == Optional<T_0_0>::some;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK T_0_0 Optional<T_0_0>::getSome() const {
    if (!isSome()) abort();
    alignas(Optional) unsigned char buffer[sizeof(Optional)];
    auto *thisCopy = new(buffer) Optional(*this);
    char * _Nonnull payloadFromDestruction = thisCopy->_destructiveProjectEnumData();
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  returnValue = *reinterpret_cast<void **>(payloadFromDestruction);
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
  return ::swift::_impl::implClassFor<T_0_0>::type::initializeWithTake(reinterpret_cast<char * _Nonnull>(returnValue), payloadFromDestruction);
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
abort();
  } else {
  T_0_0 returnValue;
memcpy(&returnValue, payloadFromDestruction, sizeof(returnValue));
  return returnValue;
  }
#pragma clang diagnostic pop
}
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK Optional<T_0_0> Optional<T_0_0>::_impl_none::operator()() const {
    auto result = Optional<T_0_0>::_make();
    result._destructiveInjectEnumTag(1);
    return result;
  }
template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
  SWIFT_INLINE_THUNK  bool Optional<T_0_0>::isNone() const {
    return *this == Optional<T_0_0>::none;
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK swift::Optional<T_0_0> Optional<T_0_0>::init(const T_0_0& some_) {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
  return _impl::_impl_Optional<T_0_0>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$sSqyxSgxcfC(result, swift::_impl::getOpaquePointer(some_), swift::TypeMetadataTrait<T_0_0>::getTypeMetadata());
  });
  }
  template<class T_0_0>
#ifdef __cpp_concepts
requires swift::isUsableInGenericContext<T_0_0>
#endif // __cpp_concepts
SWIFT_INLINE_THUNK T_0_0 Optional<T_0_0>::getUnsafelyUnwrapped() const {
#ifndef __cpp_concepts
static_assert(swift::isUsableInGenericContext<T_0_0>, "type cannot be used in a Swift generic context");
#endif // __cpp_concepts
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
  if constexpr (std::is_base_of<::swift::_impl::RefCountedClass, T_0_0>::value) {
  void *returnValue;
  _impl::$sSq17unsafelyUnwrappedxvg(reinterpret_cast<void *>(&returnValue), swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return ::swift::_impl::implClassFor<T_0_0>::type::makeRetained(returnValue);
  } else if constexpr (::swift::_impl::isValueType<T_0_0>) {
  return ::swift::_impl::implClassFor<T_0_0>::type::returnNewValue([&](void * _Nonnull returnValue) SWIFT_INLINE_THUNK_ATTRIBUTES {
_impl::$sSq17unsafelyUnwrappedxvg(returnValue, swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  });
  } else if constexpr (::swift::_impl::isSwiftBridgedCxxRecord<T_0_0>) {
alignas(alignof(T_0_0)) char storage[sizeof(T_0_0)];
auto * _Nonnull storageObjectPtr = reinterpret_cast<T_0_0 *>(storage);
_impl::$sSq17unsafelyUnwrappedxvg(storage, swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
T_0_0 result(static_cast<T_0_0 &&>(*storageObjectPtr));
storageObjectPtr->~T_0_0();
return result;
  } else {
  T_0_0 returnValue;
_impl::$sSq17unsafelyUnwrappedxvg(reinterpret_cast<void *>(&returnValue), swift::TypeMetadataTrait<Optional<T_0_0>>::getTypeMetadata(), _getOpaquePointer());
  return returnValue;
  }
#pragma clang diagnostic pop
  }
  SWIFT_INLINE_THUNK String String::init() {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sS2SycfC());
  });
  }
  SWIFT_INLINE_THUNK String_Index String::getStartIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS10startIndexSS0B0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index String::getEndIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8endIndexSS0B0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int String::getCount() const {
  return _impl::$sSS5countSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK swift::Int String::distanceFromTo(const String_Index& start, const String_Index& end) const {
  return _impl::$sSS8distance4from2toSiSS5IndexV_AEtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(start)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(end)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK void String::reserveCapacity(swift::Int n) {
  return _impl::$sSS15reserveCapacityyySiF(n, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::append(const String& other) {
  return _impl::$sSS6appendyySSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(other)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::appendContentsOf(const String& newElements) {
  return _impl::$sSS6append10contentsOfySS_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(newElements)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::removeAllKeepingCapacity(bool keepCapacity) {
  return _impl::$sSS9removeAll15keepingCapacityySb_tF(keepCapacity, _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK UTF8View String::getUtf8() const {
  return _impl::_impl_UTF8View::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS4utf8SS8UTF8ViewVvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::setUtf8(const UTF8View& newValue) {
  return _impl::$sSS4utf8SS8UTF8ViewVvs(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_UTF8View::getOpaquePointer(newValue)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK String String::getCharacters() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10charactersSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::setCharacters(const String& newValue) {
  return _impl::$sSS10charactersSSvs(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(newValue)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK swift::Int String::getHashValue() const {
  return _impl::$sSS9hashValueSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK bool String::isEmpty() const {
  return _impl::$sSS7isEmptySbvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK Array<uint8_t> String::get_nfcCodeUnits() const {
  return _impl::_impl_Array<uint8_t>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_void_ptr_0_8(result, _impl::$sSS13_nfcCodeUnitsSays5UInt8VGvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String String::lowercased() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10lowercasedSSyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String String::uppercased() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS10uppercasedSSyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String String::getDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS11descriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String String::getDebugDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK void String::write(const String& other) {
  return _impl::$sSS5writeyySSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(other)), _getOpaquePointer());
  }
  SWIFT_INLINE_THUNK void String::_dump() const {
  return _impl::$sSS5_dumpyyF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK bool String::hasPrefix(const String& prefix) const {
  return _impl::$sSS9hasPrefixySbSSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(prefix)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK bool String::hasSuffix(const String& suffix) const {
  return _impl::$sSS9hasSuffixySbSSF(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_impl::_impl_String::getOpaquePointer(suffix)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::getStartIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV10startIndexSS0D0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::getEndIndex() const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV8endIndexSS0D0Vvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexAfter(const String_Index& i) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index5afterSS5IndexVAF_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexBefore(const String_Index& i) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index6beforeSS5IndexVAF_tF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String_Index UTF8View::indexOffsetBy(const String_Index& i, swift::Int n) const {
  return _impl::_impl_String_Index::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8(result, _impl::$sSS8UTF8ViewV5index_8offsetBySS5IndexVAF_SitF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), n, _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Optional<String_Index> UTF8View::indexOffsetByLimitedBy(const String_Index& i, swift::Int n, const String_Index& limit) const {
  return _impl::_impl_Optional<String_Index>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_uint8_t_8_9(result, _impl::$sSS8UTF8ViewV5index_8offsetBy07limitedE0SS5IndexVSgAG_SiAGtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), n, _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(limit)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int UTF8View::distanceFromTo(const String_Index& i, const String_Index& j) const {
  return _impl::$sSS8UTF8ViewV8distance4from2toSiSS5IndexV_AGtF(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(j)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
SWIFT_INLINE_THUNK uint8_t UTF8View::operator [](const String_Index& i) const SWIFT_SYMBOL("s:SS8UTF8ViewVys5UInt8VSS5IndexVcig") {
  return _impl::$sSS8UTF8ViewVys5UInt8VSS5IndexVcig(_impl::swift_interop_passDirect_swift_uint64_t_0_8(_impl::_impl_String_Index::getOpaquePointer(i)), _impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }
  SWIFT_INLINE_THUNK String UTF8View::getDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS8UTF8ViewV11descriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK String UTF8View::getDebugDescription() const {
  return _impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_swift_uint64_t_0_8_void_ptr_8_16(result, _impl::$sSS8UTF8ViewV16debugDescriptionSSvg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer())));
  });
  }
  SWIFT_INLINE_THUNK swift::Int UTF8View::getCount() const {
  return _impl::$sSS8UTF8ViewV5countSivg(_impl::swift_interop_passDirect_swift_uint64_t_0_8_void_ptr_8_16(_getOpaquePointer()));
  }

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!=(_:_:)'.

// Unavailable in C++: Swift operator function '!==(_:_:)'.

// Unavailable in C++: Swift operator function '%(_:_:)'.

// Unavailable in C++: Swift operator function '%=(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '<=(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '==(_:_:)'.

// Unavailable in C++: Swift operator function '===(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '>=(_:_:)'.

// Unavailable in C++: Swift operator function '??(_:_:)'.

// Unavailable in C++: Swift operator function '??(_:_:)'.

class AdditiveArithmetic { } SWIFT_UNAVAILABLE_MSG("protocol 'AdditiveArithmetic' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'AnyClass'.

class AnyKeyPath { } SWIFT_UNAVAILABLE_MSG("class 'AnyKeyPath' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'AnyObject'.

// Unavailable in C++: Swift type alias 'ArrayLiteralConvertible'.

class BidirectionalCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'BidirectionalCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'BidirectionalIndexable'.

// Unavailable in C++: Swift type alias 'BidirectionalSlice'.

class BinaryFloatingPoint { } SWIFT_UNAVAILABLE_MSG("protocol 'BinaryFloatingPoint' can not yet be represented in C++");

class BinaryInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'BinaryInteger' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'BooleanLiteralConvertible'.

// Unavailable in C++: Swift type alias 'BooleanLiteralType'.

// Unavailable in C++: Swift type alias 'CBool'.

// Unavailable in C++: Swift type alias 'CChar'.

// Unavailable in C++: Swift type alias 'CChar16'.

// Unavailable in C++: Swift type alias 'CChar32'.

// Unavailable in C++: Swift type alias 'CDouble'.

// Unavailable in C++: Swift type alias 'CFloat'.

// Unavailable in C++: Swift type alias 'CFloat16'.

// Unavailable in C++: Swift type alias 'CInt'.

// Unavailable in C++: Swift type alias 'CLong'.

// Unavailable in C++: Swift type alias 'CLongDouble'.

// Unavailable in C++: Swift type alias 'CLongLong'.

// Unavailable in C++: Swift type alias 'CShort'.

// Unavailable in C++: Swift type alias 'CSignedChar'.

// Unavailable in C++: Swift type alias 'CUnsignedChar'.

// Unavailable in C++: Swift type alias 'CUnsignedInt'.

// Unavailable in C++: Swift type alias 'CUnsignedLong'.

// Unavailable in C++: Swift type alias 'CUnsignedLongLong'.

// Unavailable in C++: Swift type alias 'CUnsignedShort'.

class CVarArg { } SWIFT_UNAVAILABLE_MSG("protocol 'CVarArg' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CWideChar'.

class CaseIterable { } SWIFT_UNAVAILABLE_MSG("protocol 'CaseIterable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ClosedRangeIndex'.

// Unavailable in C++: Swift type alias 'Codable'.

class CodingKey { } SWIFT_UNAVAILABLE_MSG("protocol 'CodingKey' can not yet be represented in C++");

class CodingKeyRepresentable { } SWIFT_UNAVAILABLE_MSG("protocol 'CodingKeyRepresentable' can not yet be represented in C++");

class Collection { } SWIFT_UNAVAILABLE_MSG("protocol 'Collection' can not yet be represented in C++");

class CommandLine { } SWIFT_UNAVAILABLE_MSG("enum 'CommandLine' is not yet exposed to C++");

class Comparable { } SWIFT_UNAVAILABLE_MSG("protocol 'Comparable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ConcurrentValue'.

// Unavailable in C++: Swift type alias 'CountableClosedRange'.

// Unavailable in C++: Swift type alias 'CountablePartialRangeFrom'.

// Unavailable in C++: Swift type alias 'CountableRange'.

class CustomDebugStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomDebugStringConvertible' can not yet be represented in C++");

class CustomLeafReflectable { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomLeafReflectable' can not yet be represented in C++");

class CustomPlaygroundDisplayConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomPlaygroundDisplayConvertible' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'CustomPlaygroundQuickLookable'.

class CustomReflectable { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomReflectable' can not yet be represented in C++");

class CustomStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'CustomStringConvertible' can not yet be represented in C++");

class Decodable { } SWIFT_UNAVAILABLE_MSG("protocol 'Decodable' can not yet be represented in C++");

class Decoder { } SWIFT_UNAVAILABLE_MSG("protocol 'Decoder' can not yet be represented in C++");

class DecodingError { } SWIFT_UNAVAILABLE_MSG("enum 'DecodingError' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'DefaultBidirectionalIndices'.

// Unavailable in C++: Swift type alias 'DefaultRandomAccessIndices'.

// Unavailable in C++: Swift type alias 'DictionaryIndex'.

// Unavailable in C++: Swift type alias 'DictionaryIterator'.

// Unavailable in C++: Swift type alias 'DictionaryLiteral'.

// Unavailable in C++: Swift type alias 'DictionaryLiteralConvertible'.

class DurationProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'DurationProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'EmptyIterator'.

class Encodable { } SWIFT_UNAVAILABLE_MSG("protocol 'Encodable' can not yet be represented in C++");

class Encoder { } SWIFT_UNAVAILABLE_MSG("protocol 'Encoder' can not yet be represented in C++");

class EncodingError { } SWIFT_UNAVAILABLE_MSG("enum 'EncodingError' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'EnumeratedIterator'.

class Equatable { } SWIFT_UNAVAILABLE_MSG("protocol 'Equatable' can not yet be represented in C++");

class ExpressibleByArrayLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByArrayLiteral' can not yet be represented in C++");

class ExpressibleByBooleanLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByBooleanLiteral' can not yet be represented in C++");

class ExpressibleByDictionaryLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByDictionaryLiteral' can not yet be represented in C++");

class ExpressibleByExtendedGraphemeClusterLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByExtendedGraphemeClusterLiteral' can not yet be represented in C++");

class ExpressibleByFloatLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByFloatLiteral' can not yet be represented in C++");

class ExpressibleByIntegerLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByIntegerLiteral' can not yet be represented in C++");

class ExpressibleByNilLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByNilLiteral' can not yet be represented in C++");

class ExpressibleByStringInterpolation { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByStringInterpolation' can not yet be represented in C++");

class ExpressibleByStringLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByStringLiteral' can not yet be represented in C++");

class ExpressibleByUnicodeScalarLiteral { } SWIFT_UNAVAILABLE_MSG("protocol 'ExpressibleByUnicodeScalarLiteral' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ExtendedGraphemeClusterLiteralConvertible'.

// Unavailable in C++: Swift type alias 'ExtendedGraphemeClusterType'.

class FixedWidthInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'FixedWidthInteger' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'FlattenBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'FlattenBidirectionalCollectionIndex'.

// Unavailable in C++: Swift type alias 'FlattenCollection'.

// Unavailable in C++: Swift type alias 'FlattenCollectionIndex'.

// Unavailable in C++: Swift type alias 'Float32'.

// Unavailable in C++: Swift type alias 'Float64'.

// Unavailable in C++: Swift type alias 'FloatLiteralConvertible'.

// Unavailable in C++: Swift type alias 'FloatLiteralType'.

class FloatingPoint { } SWIFT_UNAVAILABLE_MSG("protocol 'FloatingPoint' can not yet be represented in C++");

class FloatingPointClassification { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointClassification' is not yet exposed to C++");

class FloatingPointRoundingRule { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointRoundingRule' is not yet exposed to C++");

class FloatingPointSign { } SWIFT_UNAVAILABLE_MSG("enum 'FloatingPointSign' is not yet exposed to C++");

class Hashable { } SWIFT_UNAVAILABLE_MSG("protocol 'Hashable' can not yet be represented in C++");

class Identifiable { } SWIFT_UNAVAILABLE_MSG("protocol 'Identifiable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ImplicitlyUnwrappedOptional'.

// Unavailable in C++: Swift type alias 'Indexable'.

// Unavailable in C++: Swift type alias 'IndexableBase'.

class InstantProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'InstantProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'IntegerLiteralConvertible'.

// Unavailable in C++: Swift type alias 'IntegerLiteralType'.

// Unavailable in C++: Swift type alias 'IteratorOverOne'.

class IteratorProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'IteratorProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'JoinedIterator'.

class KeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'KeyPath' can not yet be exposed to C++");

class KeyedDecodingContainerProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'KeyedDecodingContainerProtocol' can not yet be represented in C++");

class KeyedEncodingContainerProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'KeyedEncodingContainerProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'LazyBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyCollection'.

class LazyCollectionProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'LazyCollectionProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'LazyDropWhileBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyDropWhileCollection'.

// Unavailable in C++: Swift type alias 'LazyDropWhileIndex'.

// Unavailable in C++: Swift type alias 'LazyDropWhileIterator'.

// Unavailable in C++: Swift type alias 'LazyFilterBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyFilterCollection'.

// Unavailable in C++: Swift type alias 'LazyFilterIndex'.

// Unavailable in C++: Swift type alias 'LazyFilterIterator'.

// Unavailable in C++: Swift type alias 'LazyMapBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyMapCollection'.

// Unavailable in C++: Swift type alias 'LazyMapIterator'.

// Unavailable in C++: Swift type alias 'LazyMapRandomAccessCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileBidirectionalCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileCollection'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileIndex'.

// Unavailable in C++: Swift type alias 'LazyPrefixWhileIterator'.

// Unavailable in C++: Swift type alias 'LazyRandomAccessCollection'.

class LazySequenceProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'LazySequenceProtocol' can not yet be represented in C++");

class LosslessStringConvertible { } SWIFT_UNAVAILABLE_MSG("protocol 'LosslessStringConvertible' can not yet be represented in C++");

class ManagedBuffer { } SWIFT_UNAVAILABLE_MSG("generic generic class 'ManagedBuffer' can not yet be exposed to C++");

class MemoryLayout { } SWIFT_UNAVAILABLE_MSG("generic enum 'MemoryLayout' is not yet exposed to C++");

class MirrorPath { } SWIFT_UNAVAILABLE_MSG("protocol 'MirrorPath' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'MutableBidirectionalSlice'.

class MutableCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'MutableCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'MutableIndexable'.

// Unavailable in C++: Swift type alias 'MutableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableBidirectionalSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'MutableRangeReplaceableSlice'.

// Unavailable in C++: Swift type alias 'MutableSlice'.

class Never { } SWIFT_UNAVAILABLE_MSG("enum 'Never' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'NilLiteralConvertible'.

class Numeric { } SWIFT_UNAVAILABLE_MSG("protocol 'Numeric' can not yet be represented in C++");

class OptionSet { } SWIFT_UNAVAILABLE_MSG("protocol 'OptionSet' can not yet be represented in C++");

class PartialKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'PartialKeyPath' can not yet be exposed to C++");

// Unavailable in C++: Swift type alias 'PlaygroundQuickLook'.

class RandomAccessCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'RandomAccessCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RandomAccessIndexable'.

// Unavailable in C++: Swift type alias 'RandomAccessSlice'.

class RandomNumberGenerator { } SWIFT_UNAVAILABLE_MSG("protocol 'RandomNumberGenerator' can not yet be represented in C++");

class RangeExpression { } SWIFT_UNAVAILABLE_MSG("protocol 'RangeExpression' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RangeReplaceableBidirectionalSlice'.

class RangeReplaceableCollection { } SWIFT_UNAVAILABLE_MSG("protocol 'RangeReplaceableCollection' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'RangeReplaceableIndexable'.

// Unavailable in C++: Swift type alias 'RangeReplaceableRandomAccessSlice'.

// Unavailable in C++: Swift type alias 'RangeReplaceableSlice'.

class RawRepresentable { } SWIFT_UNAVAILABLE_MSG("protocol 'RawRepresentable' can not yet be represented in C++");

class ReferenceWritableKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'ReferenceWritableKeyPath' can not yet be exposed to C++");

class Result { } SWIFT_UNAVAILABLE_MSG("generic requirements for generic enum 'Result' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'ReversedIndex'.

// Unavailable in C++: Swift type alias 'ReversedRandomAccessCollection'.

class SIMD { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMD' can not yet be represented in C++");

class SIMDScalar { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMDScalar' can not yet be represented in C++");

class SIMDStorage { } SWIFT_UNAVAILABLE_MSG("protocol 'SIMDStorage' can not yet be represented in C++");

class Sendable { } SWIFT_UNAVAILABLE_MSG("protocol 'Sendable' can not yet be represented in C++");

class Sequence { } SWIFT_UNAVAILABLE_MSG("protocol 'Sequence' can not yet be represented in C++");

class SetAlgebra { } SWIFT_UNAVAILABLE_MSG("protocol 'SetAlgebra' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'SetIndex'.

// Unavailable in C++: Swift type alias 'SetIterator'.

class SignedInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'SignedInteger' can not yet be represented in C++");

class SignedNumeric { } SWIFT_UNAVAILABLE_MSG("protocol 'SignedNumeric' can not yet be represented in C++");

class SingleValueDecodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'SingleValueDecodingContainer' can not yet be represented in C++");

class SingleValueEncodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'SingleValueEncodingContainer' can not yet be represented in C++");

class Strideable { } SWIFT_UNAVAILABLE_MSG("protocol 'Strideable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'StringInterpolationConvertible'.

class StringInterpolationProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'StringInterpolationProtocol' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'StringLiteralConvertible'.

// Unavailable in C++: Swift type alias 'StringLiteralType'.

class StringProtocol { } SWIFT_UNAVAILABLE_MSG("protocol 'StringProtocol' can not yet be represented in C++");

class TextOutputStream { } SWIFT_UNAVAILABLE_MSG("protocol 'TextOutputStream' can not yet be represented in C++");

class TextOutputStreamable { } SWIFT_UNAVAILABLE_MSG("protocol 'TextOutputStreamable' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'UTF16'.

// Unavailable in C++: Swift type alias 'UTF32'.

// Unavailable in C++: Swift type alias 'UTF8'.

// Unavailable in C++: Swift type alias 'UnboundedRange'.

class UnboundedRange_ { } SWIFT_UNAVAILABLE_MSG("enum 'UnboundedRange_' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'UnfoldFirstSequence'.

class Unicode { } SWIFT_UNAVAILABLE_MSG("enum 'Unicode' is not yet exposed to C++");

class UnicodeCodec { } SWIFT_UNAVAILABLE_MSG("protocol 'UnicodeCodec' can not yet be represented in C++");

class UnicodeDecodingResult { } SWIFT_UNAVAILABLE_MSG("enum 'UnicodeDecodingResult' is not yet exposed to C++");

// Unavailable in C++: Swift type alias 'UnicodeScalar'.

// Unavailable in C++: Swift type alias 'UnicodeScalarLiteralConvertible'.

// Unavailable in C++: Swift type alias 'UnicodeScalarType'.

class UnkeyedDecodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'UnkeyedDecodingContainer' can not yet be represented in C++");

class UnkeyedEncodingContainer { } SWIFT_UNAVAILABLE_MSG("protocol 'UnkeyedEncodingContainer' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'UnsafeBufferPointerIterator'.

// Unavailable in C++: Swift type alias 'UnsafeConcurrentValue'.

// Unavailable in C++: Swift type alias 'UnsafeMutableRawBufferPointerIterator'.

// Unavailable in C++: Swift type alias 'UnsafeRawBufferPointerIterator'.

class UnsafeSendable { } SWIFT_UNAVAILABLE_MSG("protocol 'UnsafeSendable' can not yet be represented in C++");

class UnsignedInteger { } SWIFT_UNAVAILABLE_MSG("protocol 'UnsignedInteger' can not yet be represented in C++");

// Unavailable in C++: Swift type alias 'Void'.

class WritableKeyPath { } SWIFT_UNAVAILABLE_MSG("generic generic class 'WritableKeyPath' can not yet be exposed to C++");

// Unavailable in C++: Swift type alias 'Zip2Iterator'.

// Unavailable in C++: Swift global function 'abs(_:)'.

// Unavailable in C++: Swift global function 'all(_:)'.

// Unavailable in C++: Swift global function 'any(_:)'.

// Unavailable in C++: Swift global function 'assert(_:_:file:line:)'.

// Unavailable in C++: Swift global function 'assertionFailure(_:file:line:)'.

// Unavailable in C++: Swift macro 'column()'.

// Unavailable in C++: Swift global function 'debugPrint(_:separator:terminator:)'.

// Unavailable in C++: Swift global function 'debugPrint(_:separator:terminator:to:)'.

// Unavailable in C++: Swift macro 'dsohandle()'.

// Unavailable in C++: Swift global function 'dump(_:name:indent:maxDepth:maxItems:)'.

// Unavailable in C++: Swift global function 'dump(_:to:name:indent:maxDepth:maxItems:)'.

// Unavailable in C++: Swift macro 'error(_:)'.

// Unavailable in C++: Swift macro 'externalMacro(module:type:)'.

// Unavailable in C++: Swift global function 'fatalError(_:file:line:)'.

// Unavailable in C++: Swift macro 'file()'.

// Unavailable in C++: Swift macro 'fileID()'.

// Unavailable in C++: Swift macro 'filePath()'.

// Unavailable in C++: Swift macro 'function()'.

// Unavailable in C++: Swift global function 'getVaList(_:)'.

// Unavailable in C++: Swift global function 'isKnownUniquelyReferenced(_:)'.

// Unavailable in C++: Swift global function 'isKnownUniquelyReferenced(_:)'.

// Unavailable in C++: Swift macro 'line()'.

// Unavailable in C++: Swift global function 'max(_:_:)'.

// Unavailable in C++: Swift global function 'max(_:_:_:_:)'.

// Unavailable in C++: Swift global function 'min(_:_:)'.

// Unavailable in C++: Swift global function 'min(_:_:_:_:)'.

// Unavailable in C++: Swift global function 'numericCast(_:)'.

// Unavailable in C++: Swift global function 'pointwiseMax(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMax(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMin(_:_:)'.

// Unavailable in C++: Swift global function 'pointwiseMin(_:_:)'.

// Unavailable in C++: Swift global function 'precondition(_:_:file:line:)'.

// Unavailable in C++: Swift global function 'preconditionFailure(_:file:line:)'.

// Unavailable in C++: Swift global function 'print(_:separator:terminator:)'.

// Unavailable in C++: Swift global function 'print(_:separator:terminator:to:)'.

// Unavailable in C++: Swift global function 'readLine(strippingNewline:)'.

// Unavailable in C++: Swift global function 'repeatElement(_:count:)'.

// Unavailable in C++: Swift global function 'sequence(first:next:)'.

// Unavailable in C++: Swift global function 'sequence(state:next:)'.

// Unavailable in C++: Swift global function 'stride(from:through:by:)'.

// Unavailable in C++: Swift global function 'stride(from:to:by:)'.

// Unavailable in C++: Swift global function 'swap(_:_:)'.

// Unavailable in C++: Swift global function 'transcode(_:_:_:_:stopOnError:)'.

// Unavailable in C++: Swift global function 'transcode(_:from:to:stoppingOnError:into:)'.

// Unavailable in C++: Swift global function 'type(of:)'.

// Unavailable in C++: Swift global function 'unsafeBitCast(_:to:)'.

// Unavailable in C++: Swift global function 'unsafeDowncast(_:to:)'.

// Unavailable in C++: Swift macro 'warning(_:)'.

// Unavailable in C++: Swift global function 'withExtendedLifetime(_:_:)'.

// Unavailable in C++: Swift global function 'withExtendedLifetime(_:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeMutableBytes(of:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeMutablePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafePointer(to:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeTemporaryAllocation(byteCount:alignment:_:)'.

// Unavailable in C++: Swift global function 'withUnsafeTemporaryAllocation(of:capacity:_:)'.

// Unavailable in C++: Swift global function 'withVaList(_:_:)'.

// Unavailable in C++: Swift global function 'withoutActuallyEscaping(_:do:)'.

// Unavailable in C++: Swift global function 'zip(_:_:)'.

// Unavailable in C++: Swift operator function '~=(_:_:)'.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
// Look for the C++ interop support header relative to clang's resource dir:
//  '<toolchain>/usr/lib/clang/<version>/include/../../../swift/swiftToCxx'.
#if __has_include(<../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <../../../swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
#elif __has_include(<../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>)
//  '<toolchain>/usr/local/lib/clang/<version>/include/../../../../../lib/swift/swiftToCxx'.
#include <../../../../../lib/swift/swiftToCxx/_SwiftStdlibCxxOverlay.h>
// Alternatively, allow user to find the header using additional include path into '<toolchain>/lib/swift'.
#elif __has_include(<swiftToCxx/_SwiftStdlibCxxOverlay.h>)
#include <swiftToCxx/_SwiftStdlibCxxOverlay.h>
#endif
#pragma clang diagnostic pop

} // namespace swift

#pragma clang diagnostic pop
#undef SWIFT_SYMBOL
#endif // SWIFT_SWIFT_H
#ifdef SWIFT_SYMBOL
#undef SWIFT_SYMBOL
#endif
#define SWIFT_SYMBOL(usrValue) SWIFT_SYMBOL_MODULE_USR("Sentry", usrValue)
#ifndef SWIFT_PRINTED_CORE
#define SWIFT_PRINTED_CORE
namespace swift SWIFT_PRIVATE_ATTR {

namespace _impl {

#ifdef __cplusplus
extern "C" {
#endif

// Swift type metadata response type.
struct MetadataResponseTy {
  void * _Null_unspecified _0;
  uint64_t _1;
};
// Swift type metadata request type.
typedef uint64_t MetadataRequestTy;

#if __cplusplus > 201402L
#  define SWIFT_NOEXCEPT_FUNCTION_PTR noexcept
#else
#  define SWIFT_NOEXCEPT_FUNCTION_PTR
#endif

using ValueWitnessInitializeBufferWithCopyOfBufferTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(55882))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessDestroyTy = void(* __ptrauth_swift_value_witness_function_pointer(1272))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(58298))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithCopyTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(34641))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessInitializeWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(18648))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessAssignWithTakeTy = void * _Nonnull(* __ptrauth_swift_value_witness_function_pointer(61402))(void * _Nonnull, void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessGetEnumTagSinglePayloadTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(24816))(const void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using ValueWitnessStoreEnumTagSinglePayloadTy = void(* __ptrauth_swift_value_witness_function_pointer(41169))(void * _Nonnull, unsigned, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct ValueWitnessTable {
  ValueWitnessInitializeBufferWithCopyOfBufferTy _Nonnull initializeBufferWithCopyOfBuffer;
  ValueWitnessDestroyTy _Nonnull destroy;
  ValueWitnessInitializeWithCopyTy _Nonnull initializeWithCopy;
  ValueWitnessAssignWithCopyTy _Nonnull assignWithCopy;
  ValueWitnessInitializeWithTakeTy _Nonnull initializeWithTake;
  ValueWitnessAssignWithTakeTy _Nonnull assignWithTake;
  ValueWitnessGetEnumTagSinglePayloadTy _Nonnull getEnumTagSinglePayload;
  ValueWitnessStoreEnumTagSinglePayloadTy _Nonnull storeEnumTagSinglePayload;
  size_t size;
  size_t stride;
  unsigned flags;
  unsigned extraInhabitantCount;

  constexpr size_t getAlignment() const { return (flags & 255) + 1; }
};

using EnumValueWitnessGetEnumTagTy = unsigned(* __ptrauth_swift_value_witness_function_pointer(41909))(const void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveProjectEnumDataTy = void(* __ptrauth_swift_value_witness_function_pointer(1053))(void * _Nonnull, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;
using EnumValueWitnessDestructiveInjectEnumTagTy = void(* __ptrauth_swift_value_witness_function_pointer(45796))(void * _Nonnull, unsigned, void * _Nonnull) SWIFT_NOEXCEPT_FUNCTION_PTR;

struct EnumValueWitnessTable {
  ValueWitnessTable vwTable;
  EnumValueWitnessGetEnumTagTy _Nonnull getEnumTag;
  EnumValueWitnessDestructiveProjectEnumDataTy _Nonnull destructiveProjectEnumData;
  EnumValueWitnessDestructiveInjectEnumTagTy _Nonnull destructiveInjectEnumTag;
};

#undef SWIFT_NOEXCEPT_FUNCTION_PTR


// type metadata address for Bool.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSbN;
// type metadata address for Int8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss4Int8VN;
// type metadata address for UInt8.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5UInt8VN;
// type metadata address for Int16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int16VN;
// type metadata address for UInt16.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt16VN;
// type metadata address for Int32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int32VN;
// type metadata address for UInt32.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt32VN;
// type metadata address for Int64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss5Int64VN;
// type metadata address for UInt64.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss6UInt64VN;
// type metadata address for Float.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSfN;
// type metadata address for Double.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSdN;
// type metadata address for OpaquePointer.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $ss13OpaquePointerVN;
// type metadata address for Int.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSiN;
// type metadata address for UInt.
SWIFT_IMPORT_STDLIB_SYMBOL extern size_t $sSuN;

#ifdef __cplusplus
}
#endif


} // namespace _impl


#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<bool> = true;

template<>
struct TypeMetadataTrait<bool> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSbN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int8_t> = true;

template<>
struct TypeMetadataTrait<int8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss4Int8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint8_t> = true;

template<>
struct TypeMetadataTrait<uint8_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5UInt8VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int16_t> = true;

template<>
struct TypeMetadataTrait<int16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint16_t> = true;

template<>
struct TypeMetadataTrait<uint16_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt16VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int32_t> = true;

template<>
struct TypeMetadataTrait<int32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint32_t> = true;

template<>
struct TypeMetadataTrait<uint32_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt32VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<int64_t> = true;

template<>
struct TypeMetadataTrait<int64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss5Int64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<uint64_t> = true;

template<>
struct TypeMetadataTrait<uint64_t> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss6UInt64VN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<float> = true;

template<>
struct TypeMetadataTrait<float> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSfN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<double> = true;

template<>
struct TypeMetadataTrait<double> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSdN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<void *> = true;

template<>
struct TypeMetadataTrait<void *> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$ss13OpaquePointerVN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::Int> = true;

template<>
struct TypeMetadataTrait<swift::Int> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSiN;
  }
};

template<>
static inline const constexpr bool isUsableInGenericContext<swift::UInt> = true;

template<>
struct TypeMetadataTrait<swift::UInt> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return &_impl::$sSuN;
  }
};

#pragma clang diagnostic pop

} // namespace swift

#endif
#endif
#ifdef __cplusplus
namespace Sentry SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("Sentry") {
namespace _impl {
extern "C" {
#endif

// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_passStub_Sentry_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK struct swift_interop_passStub_Sentry_uint64_t_0_8_void_ptr_8_16 swift_interop_passDirect_Sentry_uint64_t_0_8_void_ptr_8_16(const char * _Nonnull value) {
  struct swift_interop_passStub_Sentry_uint64_t_0_8_void_ptr_8_16 result;
  memcpy(&result._1, value + 0, 8);
  memcpy(&result._2, value + 8, 8);
  return result;
}

SWIFT_EXTERN void $s6Sentry0A10LogMessageV13stringLiteralACSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_Sentry_uint64_t_0_8_void_ptr_8_16 value) SWIFT_NOEXCEPT SWIFT_CALL; // init(stringLiteral:)
SWIFT_EXTERN void $s6Sentry0A16RedactRegionTypeO8rawValueACSgSS_tcfC(SWIFT_INDIRECT_RESULT void * _Nonnull, struct swift_interop_passStub_Sentry_uint64_t_0_8_void_ptr_8_16 rawValue) SWIFT_NOEXCEPT SWIFT_CALL; // init(rawValue:)
// Stub struct to be used to pass/return values to/from Swift functions.
struct swift_interop_returnStub_Sentry_uint64_t_0_8_void_ptr_8_16 {
  uint64_t _1;
  void * _Nullable _2;
};

static SWIFT_C_INLINE_THUNK void swift_interop_returnDirect_Sentry_uint64_t_0_8_void_ptr_8_16(char * _Nonnull result, struct swift_interop_returnStub_Sentry_uint64_t_0_8_void_ptr_8_16 value) {
  memcpy(result + 0, &value._1, 8);
  memcpy(result + 8, &value._2, 8);
}

SWIFT_EXTERN struct swift_interop_returnStub_Sentry_uint64_t_0_8_void_ptr_8_16 $s6Sentry0A16RedactRegionTypeO8rawValueSSvg(SWIFT_CONTEXT const void * _Nonnull _self) SWIFT_NOEXCEPT SWIFT_CALL; // _

#ifdef __cplusplus
}
}
}
namespace Sentry SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("Sentry") {


























class SWIFT_SYMBOL("s:6Sentry0A10LogMessageV19StringInterpolationV") StringInterpolation;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<Sentry::StringInterpolation> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace Sentry SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("Sentry") {
class SWIFT_SYMBOL("s:6Sentry0A10LogMessageV") SentryLogMessage;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<Sentry::SentryLogMessage> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace Sentry SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("Sentry") {
namespace _impl {

class _impl_SentryLogMessage;

// Type metadata accessor for SentryLogMessage
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s6Sentry0A10LogMessageVMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;


} // namespace _impl

class SWIFT_SYMBOL("s:6Sentry0A10LogMessageV") SentryLogMessage final {
public:
  SWIFT_INLINE_THUNK ~SentryLogMessage() noexcept {
    auto metadata = _impl::$s6Sentry0A10LogMessageVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK SentryLogMessage(const SentryLogMessage &other) noexcept {
    auto metadata = _impl::$s6Sentry0A10LogMessageVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK SentryLogMessage &operator =(const SentryLogMessage &other) noexcept {
    auto metadata = _impl::$s6Sentry0A10LogMessageVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK SentryLogMessage &operator =(SentryLogMessage &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER SentryLogMessage(SentryLogMessage &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }
  static SWIFT_INLINE_THUNK SentryLogMessage init(const swift::String& value) SWIFT_SYMBOL("s:6Sentry0A10LogMessageV13stringLiteralACSS_tcfc");
private:
  SWIFT_INLINE_THUNK SentryLogMessage(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK SentryLogMessage _make() noexcept {
    auto metadata = _impl::$s6Sentry0A10LogMessageVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return SentryLogMessage(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_SentryLogMessage;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s6Sentry0A10LogMessageVD;
  static inline constexpr $s6Sentry0A10LogMessageVD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_SentryLogMessage {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(SentryLogMessage &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const SentryLogMessage &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER SentryLogMessage returnNewValue(T callable) {
    auto result = SentryLogMessage::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s6Sentry0A10LogMessageVMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<Sentry::SentryLogMessage> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return Sentry::_impl::$s6Sentry0A10LogMessageVMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<Sentry::SentryLogMessage> = true;
template<>
static inline const constexpr bool isOpaqueLayout<Sentry::SentryLogMessage> = true;
template<>
struct implClassFor<Sentry::SentryLogMessage> { using type = Sentry::_impl::_impl_SentryLogMessage; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace Sentry SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("Sentry") {



class SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO") SentryRedactRegionType;
} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
static inline const constexpr bool isUsableInGenericContext<Sentry::SentryRedactRegionType> = true;
#pragma clang diagnostic pop
} // namespace swift

namespace Sentry SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("Sentry") {
namespace _impl {

class _impl_SentryRedactRegionType;

// Type metadata accessor for SentryRedactRegionType
SWIFT_EXTERN swift::_impl::MetadataResponseTy $s6Sentry0A16RedactRegionTypeOMa(swift::_impl::MetadataRequestTy) SWIFT_NOEXCEPT SWIFT_CALL;

// Tags for resilient enum SentryRedactRegionType
extern "C" {
extern unsigned $s6Sentry0A16RedactRegionTypeO6redactyA2CmFWC;
extern unsigned $s6Sentry0A16RedactRegionTypeO7clipOutyA2CmFWC;
extern unsigned $s6Sentry0A16RedactRegionTypeO9clipBeginyA2CmFWC;
extern unsigned $s6Sentry0A16RedactRegionTypeO7clipEndyA2CmFWC;
extern unsigned $s6Sentry0A16RedactRegionTypeO13redactSwiftUIyA2CmFWC;
}

} // namespace _impl

class SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO") SentryRedactRegionType final {
public:
  SWIFT_INLINE_THUNK ~SentryRedactRegionType() noexcept {
    auto metadata = _impl::$s6Sentry0A16RedactRegionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->destroy(_getOpaquePointer(), metadata._0);
  }
  SWIFT_INLINE_THUNK SentryRedactRegionType(const SentryRedactRegionType &other) noexcept {
    auto metadata = _impl::$s6Sentry0A16RedactRegionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    _storage = swift::_impl::OpaqueStorage(vwTable->size, vwTable->getAlignment());
    vwTable->initializeWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  }
  SWIFT_INLINE_THUNK SentryRedactRegionType &operator =(const SentryRedactRegionType &other) noexcept {
    auto metadata = _impl::$s6Sentry0A16RedactRegionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->assignWithCopy(_getOpaquePointer(), const_cast<char *>(other._getOpaquePointer()), metadata._0);
  return *this;
  }
  SWIFT_INLINE_THUNK SentryRedactRegionType &operator =(SentryRedactRegionType &&other) = delete;
  [[noreturn]] SWIFT_INLINE_PRIVATE_HELPER SentryRedactRegionType(SentryRedactRegionType &&) noexcept {
  swift::_impl::_fatalError_Cxx_move_of_Swift_value_type_not_supported_yet();
  swift::_impl::_swift_stdlib_reportFatalError("swift", 5, "C++ does not support moving a Swift value yet", 45, 0);
  abort();
  }

  enum class cases {
    redact SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO6redactyA2CmF"),
    clipOut SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO7clipOutyA2CmF"),
    clipBegin SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO9clipBeginyA2CmF"),
    clipEnd SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO7clipEndyA2CmF"),
    redactSwiftUI SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO13redactSwiftUIyA2CmF"),
    unknownDefault
  };

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"  // allow use of inline static data member
  inline const static struct _impl_redact {  // impl struct for case redact
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::redact;
    }
    SWIFT_INLINE_THUNK SentryRedactRegionType operator()() const;
  } redact SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO6redactyA2CmF");
  SWIFT_INLINE_THUNK bool isRedact() const;

  inline const static struct _impl_clipOut {  // impl struct for case clipOut
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::clipOut;
    }
    SWIFT_INLINE_THUNK SentryRedactRegionType operator()() const;
  } clipOut SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO7clipOutyA2CmF");
  SWIFT_INLINE_THUNK bool isClipOut() const;

  inline const static struct _impl_clipBegin {  // impl struct for case clipBegin
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::clipBegin;
    }
    SWIFT_INLINE_THUNK SentryRedactRegionType operator()() const;
  } clipBegin SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO9clipBeginyA2CmF");
  SWIFT_INLINE_THUNK bool isClipBegin() const;

  inline const static struct _impl_clipEnd {  // impl struct for case clipEnd
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::clipEnd;
    }
    SWIFT_INLINE_THUNK SentryRedactRegionType operator()() const;
  } clipEnd SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO7clipEndyA2CmF");
  SWIFT_INLINE_THUNK bool isClipEnd() const;

  inline const static struct _impl_redactSwiftUI {  // impl struct for case redactSwiftUI
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::redactSwiftUI;
    }
    SWIFT_INLINE_THUNK SentryRedactRegionType operator()() const;
  } redactSwiftUI SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO13redactSwiftUIyA2CmF");
  SWIFT_INLINE_THUNK bool isRedactSwiftUI() const;

  inline const static struct _impl_unknownDefault {  // impl struct for case unknownDefault
    SWIFT_INLINE_THUNK constexpr operator cases() const {
      return cases::unknownDefault;
    }
  } unknownDefault;
  SWIFT_INLINE_THUNK bool isUnknownDefault() const;

#pragma clang diagnostic pop
  SWIFT_INLINE_THUNK operator cases() const {
    auto tag = _getEnumTag();
    if (tag == _impl::$s6Sentry0A16RedactRegionTypeO6redactyA2CmFWC) return cases::redact;
    if (tag == _impl::$s6Sentry0A16RedactRegionTypeO7clipOutyA2CmFWC) return cases::clipOut;
    if (tag == _impl::$s6Sentry0A16RedactRegionTypeO9clipBeginyA2CmFWC) return cases::clipBegin;
    if (tag == _impl::$s6Sentry0A16RedactRegionTypeO7clipEndyA2CmFWC) return cases::clipEnd;
    if (tag == _impl::$s6Sentry0A16RedactRegionTypeO13redactSwiftUIyA2CmFWC) return cases::redactSwiftUI;
    return cases::unknownDefault;
  }

  static SWIFT_INLINE_THUNK swift::Optional<SentryRedactRegionType> init(const swift::String& rawValue) SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO8rawValueACSgSS_tcfc");
  SWIFT_INLINE_THUNK swift::String getRawValue() const SWIFT_SYMBOL("s:6Sentry0A16RedactRegionTypeO8rawValueSSvp");
private:
  SWIFT_INLINE_THUNK SentryRedactRegionType(swift::_impl::ValueWitnessTable * _Nonnull vwTable) noexcept : _storage(vwTable->size, vwTable->getAlignment()) {}
  static SWIFT_INLINE_THUNK SentryRedactRegionType _make() noexcept {
    auto metadata = _impl::$s6Sentry0A16RedactRegionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    return SentryRedactRegionType(vwTable);
  }
  SWIFT_INLINE_THUNK const char * _Nonnull _getOpaquePointer() const noexcept { return _storage.getOpaquePointer(); }
  SWIFT_INLINE_THUNK char * _Nonnull _getOpaquePointer() noexcept { return _storage.getOpaquePointer(); }

  SWIFT_INLINE_THUNK char * _Nonnull _destructiveProjectEnumData() noexcept {
    auto metadata = _impl::$s6Sentry0A16RedactRegionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveProjectEnumData(_getOpaquePointer(), metadata._0);
    return _getOpaquePointer();
  }
  SWIFT_INLINE_THUNK void _destructiveInjectEnumTag(unsigned tag) noexcept {
    auto metadata = _impl::$s6Sentry0A16RedactRegionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    enumVWTable->destructiveInjectEnumTag(_getOpaquePointer(), tag, metadata._0);
  }
  SWIFT_INLINE_THUNK unsigned _getEnumTag() const noexcept {
    auto metadata = _impl::$s6Sentry0A16RedactRegionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    const auto *enumVWTable = reinterpret_cast<swift::_impl::EnumValueWitnessTable *>(vwTable);
    return enumVWTable->getEnumTag(_getOpaquePointer(), metadata._0);
  }
  swift::_impl::OpaqueStorage _storage;
  friend class _impl::_impl_SentryRedactRegionType;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-identifier"
  typedef char $s6Sentry0A16RedactRegionTypeOD;
  static inline constexpr $s6Sentry0A16RedactRegionTypeOD __swift_mangled_name = 0;
#pragma clang diagnostic pop
#pragma clang diagnostic pop
};

namespace _impl {

class _impl_SentryRedactRegionType {
public:
  static SWIFT_INLINE_THUNK char * _Nonnull getOpaquePointer(SentryRedactRegionType &object) { return object._getOpaquePointer(); }
  static SWIFT_INLINE_THUNK const char * _Nonnull getOpaquePointer(const SentryRedactRegionType &object) { return object._getOpaquePointer(); }
  template<class T>
  static SWIFT_INLINE_PRIVATE_HELPER SentryRedactRegionType returnNewValue(T callable) {
    auto result = SentryRedactRegionType::_make();
    callable(result._getOpaquePointer());
    return result;
  }
  static SWIFT_INLINE_THUNK void initializeWithTake(char * _Nonnull destStorage, char * _Nonnull srcStorage) {
    auto metadata = _impl::$s6Sentry0A16RedactRegionTypeOMa(0);
    auto *vwTableAddr = reinterpret_cast<swift::_impl::ValueWitnessTable **>(metadata._0) - 1;
#ifdef __arm64e__
    auto *vwTable = reinterpret_cast<swift::_impl::ValueWitnessTable *>(ptrauth_auth_data(reinterpret_cast<void *>(*vwTableAddr), ptrauth_key_process_independent_data, ptrauth_blend_discriminator(vwTableAddr, 11839)));
#else
    auto *vwTable = *vwTableAddr;
#endif
    vwTable->initializeWithTake(destStorage, srcStorage, metadata._0);
  }
};

} // namespace _impl

} // end namespace 

namespace swift SWIFT_PRIVATE_ATTR {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc++17-extensions"
template<>
struct TypeMetadataTrait<Sentry::SentryRedactRegionType> {
  static SWIFT_INLINE_THUNK void * _Nonnull getTypeMetadata() {
    return Sentry::_impl::$s6Sentry0A16RedactRegionTypeOMa(0)._0;
  }
};
namespace _impl{
template<>
static inline const constexpr bool isValueType<Sentry::SentryRedactRegionType> = true;
template<>
static inline const constexpr bool isOpaqueLayout<Sentry::SentryRedactRegionType> = true;
template<>
struct implClassFor<Sentry::SentryRedactRegionType> { using type = Sentry::_impl::_impl_SentryRedactRegionType; };
} // namespace
#pragma clang diagnostic pop
} // namespace swift

namespace Sentry SWIFT_PRIVATE_ATTR SWIFT_SYMBOL_MODULE("Sentry") {

















  SWIFT_INLINE_THUNK SentryLogMessage SentryLogMessage::init(const swift::String& value) {
  return _impl::_impl_SentryLogMessage::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s6Sentry0A10LogMessageV13stringLiteralACSS_tcfC(result, _impl::swift_interop_passDirect_Sentry_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(value)));
  });
  }
  SWIFT_INLINE_THUNK SentryRedactRegionType SentryRedactRegionType::_impl_redact::operator()() const {
    auto result = SentryRedactRegionType::_make();
    result._destructiveInjectEnumTag(_impl::$s6Sentry0A16RedactRegionTypeO6redactyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool SentryRedactRegionType::isRedact() const {
    return *this == SentryRedactRegionType::redact;
  }
  SWIFT_INLINE_THUNK SentryRedactRegionType SentryRedactRegionType::_impl_clipOut::operator()() const {
    auto result = SentryRedactRegionType::_make();
    result._destructiveInjectEnumTag(_impl::$s6Sentry0A16RedactRegionTypeO7clipOutyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool SentryRedactRegionType::isClipOut() const {
    return *this == SentryRedactRegionType::clipOut;
  }
  SWIFT_INLINE_THUNK SentryRedactRegionType SentryRedactRegionType::_impl_clipBegin::operator()() const {
    auto result = SentryRedactRegionType::_make();
    result._destructiveInjectEnumTag(_impl::$s6Sentry0A16RedactRegionTypeO9clipBeginyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool SentryRedactRegionType::isClipBegin() const {
    return *this == SentryRedactRegionType::clipBegin;
  }
  SWIFT_INLINE_THUNK SentryRedactRegionType SentryRedactRegionType::_impl_clipEnd::operator()() const {
    auto result = SentryRedactRegionType::_make();
    result._destructiveInjectEnumTag(_impl::$s6Sentry0A16RedactRegionTypeO7clipEndyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool SentryRedactRegionType::isClipEnd() const {
    return *this == SentryRedactRegionType::clipEnd;
  }
  SWIFT_INLINE_THUNK SentryRedactRegionType SentryRedactRegionType::_impl_redactSwiftUI::operator()() const {
    auto result = SentryRedactRegionType::_make();
    result._destructiveInjectEnumTag(_impl::$s6Sentry0A16RedactRegionTypeO13redactSwiftUIyA2CmFWC);
    return result;
  }
  SWIFT_INLINE_THUNK  bool SentryRedactRegionType::isRedactSwiftUI() const {
    return *this == SentryRedactRegionType::redactSwiftUI;
  }
  SWIFT_INLINE_THUNK  bool SentryRedactRegionType::isUnknownDefault() const {
    return *this == SentryRedactRegionType::unknownDefault;
  }
  SWIFT_INLINE_THUNK swift::Optional<SentryRedactRegionType> SentryRedactRegionType::init(const swift::String& rawValue) {
  return swift::_impl::_impl_Optional<SentryRedactRegionType>::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::$s6Sentry0A16RedactRegionTypeO8rawValueACSgSS_tcfC(result, _impl::swift_interop_passDirect_Sentry_uint64_t_0_8_void_ptr_8_16(swift::_impl::_impl_String::getOpaquePointer(rawValue)));
  });
  }
  SWIFT_INLINE_THUNK swift::String SentryRedactRegionType::getRawValue() const {
  return swift::_impl::_impl_String::returnNewValue([&](char * _Nonnull result) SWIFT_INLINE_THUNK_ATTRIBUTES {
    _impl::swift_interop_returnDirect_Sentry_uint64_t_0_8_void_ptr_8_16(result, _impl::$s6Sentry0A16RedactRegionTypeO8rawValueSSvg(_getOpaquePointer()));
  });
  }

} // namespace Sentry

#undef SWIFT_SYMBOL
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif

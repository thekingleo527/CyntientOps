//
//  TodayTasksViewModel.swift
//  FrancoSphere
//

import SwiftUI
import Combine

@MainActor
class TodayTasksViewModel: ObservableObject {
    @Published var tasks: [ContextualTask] = []
    @Published var completedTasks: [ContextualTask] = []
    @Published var pendingTasks: [ContextualTask] = []
    @Published var isLoading = false
    @Published var progress = TaskProgress(completed: 0, total: 0, remaining: 0, percentage: 0, overdueTasks: 0)
    @Published var taskTrends = TaskTrends(weeklyCompletion: [0.8], categoryBreakdown: [:], changePercentage: 5.2, comparisonPeriod: "week", trend: .up)
    @Published var performanceMetrics = PerformanceMetrics(efficiency: 85.0, tasksCompleted: 42, averageTime: 1800, qualityScore: 4.2, lastUpdate: Date())
    @Published var streakData = StreakData(currentStreak: 7, longestStreak: 14, lastUpdate: Date())
    
    private let taskService = TaskService.shared
    private let contextEngine = WorkerContextEngine.shared
    private var cancellables = Set<AnyCancellable>()
    
    init() {
        setupBindings()
    }
    
    func loadTodaysTasks() async {
        isLoading = true
        
        let workerId = NewAuthManager.shared.workerId
        guard !workerId.isEmpty else {
            isLoading = false
            return
        }
        
        do {
            let todaysTasks = try await taskService.getTasks(for: workerId, date: Date())
            let taskProgress = try await taskService.getTaskProgress(for: workerId)
            
            await MainActor.run {
                self.tasks = todaysTasks
                self.completedTasks = todaysTasks.filter { $0.status == "completed" }
                self.pendingTasks = todaysTasks.filter { $0.status == "pending" }
                self.progress = taskProgress
            }
            
        } catch {
            print("Error loading tasks: \(error)")
        }
        
        isLoading = false
    }
    
    func completeTask(_ task: ContextualTask) async {
        let workerId = NewAuthManager.shared.workerId
        guard !workerId.isEmpty else { return }
        
        do {
            try await taskService.completeTask(
                task.id,
                workerId: workerId,
                buildingId: task.buildingId
            )
            
            await loadTodaysTasks()
            
        } catch {
            print("Error completing task: \(error)")
        }
    }
    
    private func setupBindings() {
        contextEngine.objectWillChange
            .receive(on: DispatchQueue.main)
            .sink { [weak self] _ in
                Task {
                    await self?.loadTodaysTasks()
                }
            }
            .store(in: &cancellables)
    }
    
    private func calculateStreakData() -> StreakData {
        let currentStreak = calculateCurrentStreak()
        let longestStreak = calculateLongestStreak()
        
        return StreakData(currentStreak: currentStreak, longestStreak: longestStreak, lastUpdate: Date())
    }
    
    private func calculateCurrentStreak() -> Int {
        return completedTasks.count
    }
    
    private func calculateLongestStreak() -> Int {
        return max(completedTasks.count, 0)
    }
    
    private func calculatePerformanceMetrics() -> PerformanceMetrics {
        let efficiency = Double(completedTasks.count) / max(Double(tasks.count), 1.0)
        
        return PerformanceMetrics(
            efficiency: efficiency * 100,
            tasksCompleted: completedTasks.count,
            averageTime: 1800,
            qualityScore: 4.2,
            lastUpdate: Date()
        )
    }
}

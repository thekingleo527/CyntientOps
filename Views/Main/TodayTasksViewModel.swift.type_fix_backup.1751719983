//
//  TodayTasksViewModel.swift
//  FrancoSphere
//
//  ðŸ”§ FIXED: Optional binding errors with NewAuthManager.workerId
//  âœ… Changed from guard let to direct String access and empty check
//  âœ… Uses proper error handling for empty workerId
//

import SwiftUI
import Combine

@MainActor
class TodayTasksViewModel: ObservableObject {
    @Published var tasks: [ContextualTask] = []
    @Published var completedTasks: [ContextualTask] = []
    @Published var pendingTasks: [ContextualTask] = []
    @Published var isLoading = false
    @Published var progress: FrancoSphere.TaskProgress = FrancoSphere.TaskProgress(
        completed: 0,
        total: 0,
        remaining: 0,
        percentage: 0,
        overdueTasks: 0
    )
    @Published var taskTrends: FrancoSphere.TaskTrends = FrancoSphere.TaskTrends(weeklyCompletion: [0.8, 0.7, 0.9], categoryBreakdown: [:], changePercentage: 5.2, comparisonPeriod: "last week", trend: .up)
    @Published var performanceMetrics: FrancoSphere.PerformanceMetrics = FrancoSphere.PerformanceMetrics(efficiency: 0.85, tasksCompleted: 42, averageTime: 1800, qualityScore: 4.2, lastUpdate: Date())
    @Published var streakData: FrancoSphere.StreakData = FrancoSphere.StreakData(currentStreak: 7, longestStreak: 14, lastUpdate: Date())
    
    private let taskService = TaskService.shared
    private let contextEngine = WorkerContextEngine.shared
    private var cancellables = Set<AnyCancellable>()
    
    init() {
        setupBindings()
    }
    
    func loadTodaysTasks() async {
        isLoading = true
        
        // FIXED: Use direct access to workerId (String) and check for empty
        let workerId = NewAuthManager.shared.workerId
        guard !workerId.isEmpty else {
            isLoading = false
            return
        }
        
        do {
            let todaysTasks = try await taskService.getTasks(for: workerId, date: Date())
            let taskProgress = try await taskService.getTaskProgress(for: workerId)
            
            await MainActor.run {
                self.tasks = todaysTasks
                self.completedTasks = todaysTasks.filter { $0.status == "completed" }
                self.pendingTasks = todaysTasks.filter { $0.status == "pending" }
                self.progress = taskProgress
            }
            
        } catch {
            print("Error loading tasks: \(error)")
        }
        
        isLoading = false
    }
    
    func completeTask(_ task: ContextualTask) async {
        // FIXED: Use direct access to workerId (String) and check for empty
        let workerId = NewAuthManager.shared.workerId
        guard !workerId.isEmpty else { return }
        
        do {
            try await taskService.completeTask(
                task.id,
                workerId: workerId,
                buildingId: task.buildingId,
                evidence: nil
            )
            
            await loadTodaysTasks()
            
        } catch {
            print("Error completing task: \(error)")
        }
    }
    
    private func setupBindings() {
        contextEngine.objectWillChange
            .receive(on: DispatchQueue.main)
            .sink { [weak self] _ in
                Task {
                    await self?.loadTodaysTasks()
                }
            }
            .store(in: &cancellables)
    }
    
    private func calculateStreakData(currentStreak: 7, longestStreak: 14, lastUpdate: Date()))) -> FrancoSphere.StreakData {
        let currentStreak = calculateCurrentStreak()
        let longestStreak = calculateLongestStreak()
        
        return FrancoSphere.StreakData(currentStreak: currentStreak, longestStreak: longestStreak, lastUpdate: Date())
            currentStreak: currentStreak,
            longestStreak: longestStreak)
    }
    
    private func calculateCurrentStreak() -> Int {
        return completedTasks.count
    }
    
    private func calculateLongestStreak() -> Int {
        return max(completedTasks.count, 0)
    }
    
    private func calculatePerformanceMetrics(efficiency: 0.85, tasksCompleted: 42, averageTime: 1800, qualityScore: 4.2, lastUpdate: Date())))) -> FrancoSphere.PerformanceMetrics {
        let efficiency = Double(completedTasks.count) / max(Double(tasks.count), 1.0)
        
        return FrancoSphere.PerformanceMetrics(efficiency: efficiency * 100, tasksCompleted: completedTasks.count, averageTime: 1800, qualityScore: 4.2, lastUpdate: Date())
            efficiency: efficiency * 100,
            quality: 85.0,
            speed: 75.0,
            consistency: 90.0
        )
    }
    
    private func calculateTaskTrends() -> FrancoSphere.TaskTrends {
        return FrancoSphere.TaskTrends(weeklyCompletion: [0.8, 0.7, 0.9], categoryBreakdown: [:], changePercentage: 5.2, comparisonPeriod: "last week", trend: .up)
    }
}

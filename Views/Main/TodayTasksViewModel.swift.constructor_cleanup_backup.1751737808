//
//  TodayTasksViewModel.swift
//  FrancoSphere
//

import SwiftUI
import Combine

@MainActor
class TodayTasksViewModel: ObservableObject {
    @Published var tasks: [ContextualTask] = []
    @Published var completedTasks: [ContextualTask] = []
    @Published var pendingTasks: [ContextualTask] = []
    @Published var isLoading = false
    
    // Use minimal constructors to avoid signature issues
    @Published var progress: TaskProgress = {
        TaskProgress(completed: 0, total: 0, remaining: 0, percentage: 0, overdueTasks: 0)
    }()
    
    @Published var taskTrends: TaskTrends = {
        TaskTrends(weeklyCompletion: [0.8], categoryBreakdown: [:], changePercentage: 5.2, comparisonPeriod: "week", trend: .up)
    }()
    
    @Published var performanceMetrics: PerformanceMetrics = {
        PerformanceMetrics(efficiency: 85.0, tasksCompleted: 42, averageTime: 1800, qualityScore: 4.2, lastUpdate: Date())
    }()
    
    @Published var streakData: StreakData = {
        StreakData(currentStreak: 7, longestStreak: 14, lastUpdate: Date())
    }()
    
    private let taskService = TaskService.shared
    private let contextEngine = WorkerContextEngine.shared
    private var cancellables = Set<AnyCancellable>()
    
    init() {
        setupBindings()
    }
    
    func loadTodaysTasks() async {
        isLoading = true
        
        let workerId = NewAuthManager.shared.workerId
        guard !workerId.isEmpty else {
            isLoading = false
            return
        }
        
        do {
            let todaysTasks = try await taskService.getTasks(for: workerId, date: Date())
            let taskProgress = try await taskService.getTaskProgress(for: workerId)
            
            await MainActor.run {
                self.tasks = todaysTasks
                self.completedTasks = todaysTasks.filter { $0.status == "completed" }
                self.pendingTasks = todaysTasks.filter { $0.status == "pending" }
                self.progress = taskProgress
            }
            
        } catch {
            print("Error loading tasks: \(error)")
        }
        
        isLoading = false
    }
    
    func completeTask(_ task: ContextualTask) async {
        let workerId = NewAuthManager.shared.workerId
        guard !workerId.isEmpty else { return }
        
        do {
            try await taskService.completeTask(
                task.id,
                workerId: workerId,
                buildingId: task.buildingId
            )
            
            await loadTodaysTasks()
            
        } catch {
            print("Error completing task: \(error)")
        }
    }
    
    private func setupBindings() {
        contextEngine.objectWillChange
            .receive(on: DispatchQueue.main)
            .sink { [weak self] _ in
                Task {
                    await self?.loadTodaysTasks()
                }
            }
            .store(in: &cancellables)
    }
}

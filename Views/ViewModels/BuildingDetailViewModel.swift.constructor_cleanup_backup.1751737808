//
//  BuildingDetailViewModel.swift
//  FrancoSphere
//

import SwiftUI

@MainActor
class BuildingDetailViewModel: ObservableObject {
    @Published var buildingTasks: [ContextualTask] = []
    @Published var workerProfiles: [WorkerProfile] = []
    @Published var isLoading = false
    
    @Published var buildingStatistics: BuildingStatistics = {
        BuildingStatistics(completionRate: 85.0, totalTasks: 20, completedTasks: 17)
    }()
    
    private let contextEngine = WorkerContextEngine.shared
    private let buildingId: String
    
    init(buildingId: String) {
        self.buildingId = buildingId
    }
    
    func loadBuildingDetails() async {
        isLoading = true
        
        let tasks = contextEngine.getTasksForBuilding(buildingId)
        let workers = contextEngine.getWorkerProfiles(for: buildingId)
        
        await MainActor.run {
            self.buildingTasks = tasks
            self.workerProfiles = workers
            self.buildingStatistics = calculateStatistics(from: tasks)
        }
        
        isLoading = false
    }
    
    private func calculateStatistics(from tasks: [ContextualTask]) -> BuildingStatistics {
        let total = tasks.count
        let completed = tasks.filter { $0.status == "completed" }.count
        let rate = total > 0 ? Double(completed) / Double(total) * 100 : 0
        
        return BuildingStatistics(completionRate: rate, totalTasks: total, completedTasks: completed)
    }
}

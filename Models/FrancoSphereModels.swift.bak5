//
//  FrancoSphereModels.swift
//  FrancoSphere
//
//  ðŸ”§ CORRUPTION FIX: Rebuilt from backup analysis
//  âœ… Fixed line 16 syntax error
//  âœ… Complete FrancoSphere enum with all type definitions
//  âœ… All typealias mappings restored
//

import Foundation
import CoreLocation
import SwiftUI

// MARK: - FrancoSphere Namespace
public enum FrancoSphere {
    
    // MARK: - Geographic Models
    public struct NamedCoordinate: Identifiable, Codable, Equatable {
        public let id: String
        public let name: String
        public let latitude: Double
        public let longitude: Double
        public let address: String?
        public let imageAssetName: String?
        
        public var coordinate: CLLocationCoordinate2D {
            CLLocationCoordinate2D(latitude: latitude, longitude: longitude)
        }
        
        public init(id: String, name: String, latitude: Double, longitude: Double, address: String? = nil, imageAssetName: String? = nil) {
            self.id = id
            self.name = name
            self.latitude = latitude
            self.longitude = longitude
            self.address = address
            self.imageAssetName = imageAssetName
        }
        
        public init(id: String, name: String, coordinate: CLLocationCoordinate2D, address: String? = nil, imageAssetName: String? = nil) {
            self.id = id
            self.name = name
            self.latitude = coordinate.latitude
            self.longitude = coordinate.longitude
            self.address = address
            self.imageAssetName = imageAssetName
        }
        
        public static func == (lhs: NamedCoordinate, rhs: NamedCoordinate) -> Bool {
            lhs.id == rhs.id
        }
    }
    
    // MARK: - Weather Models
    public enum WeatherCondition: String, Codable, CaseIterable {
        case clear = "Clear"
        case sunny = "Sunny"
        case cloudy = "Cloudy"
        case rainy = "Rainy"
        case snowy = "Snowy"
        case stormy = "Stormy"
        case foggy = "Foggy"
        case windy = "Windy"
        
        public var iconName: String {
            switch self {
            case .clear, .sunny: return "sun.max.fill"
            case .cloudy: return "cloud.fill"
            case .rainy: return "cloud.rain.fill"
            case .snowy: return "cloud.snow.fill"
            case .stormy: return "cloud.bolt.fill"
            case .foggy: return "cloud.fog.fill"
            case .windy: return "wind"
            }
        }
    }
    
    public struct WeatherData: Identifiable, Codable {
        public let id: String
        public let date: Date
        public let temperature: Double
        public let feelsLike: Double
        public let humidity: Int
        public let windSpeed: Double
        public let windDirection: Int
        public let precipitation: Double
        public let snow: Double
        public let condition: WeatherCondition
        public let uvIndex: Int
        public let visibility: Double
        public let description: String
        
        public init(id: String = UUID().uuidString, date: Date = Date(), temperature: Double, feelsLike: Double? = nil, humidity: Int, windSpeed: Double, windDirection: Int = 0, precipitation: Double = 0, snow: Double = 0, condition: WeatherCondition, uvIndex: Int = 0, visibility: Double = 10, description: String = "") {
            self.id = id
            self.date = date
            self.temperature = temperature
            self.feelsLike = feelsLike ?? temperature
            self.humidity = humidity
            self.windSpeed = windSpeed
            self.windDirection = windDirection
            self.precipitation = precipitation
            self.snow = snow
            self.condition = condition
            self.uvIndex = uvIndex
            self.visibility = visibility
            self.description = description
        }
    }
    
    public enum OutdoorWorkRisk: String, Codable, CaseIterable {
        case low = "Low"
        case moderate = "Moderate"
        case high = "High"
        case extreme = "Extreme"
    }
    
    // MARK: - Task Models
    public enum TaskCategory: String, Codable, CaseIterable {
        case cleaning = "Cleaning"
        case maintenance = "Maintenance"
        case inspection = "Inspection"
        case repair = "Repair"
        case landscaping = "Landscaping"
        case security = "Security"
        case emergency = "Emergency"
        case installation = "Installation"
        case utilities = "Utilities"
        case renovation = "Renovation"
        case sanitation = "Sanitation"
    }
    
    public enum TaskUrgency: String, Codable, CaseIterable {
        case low = "Low"
        case medium = "Medium"
        case high = "High"
        case urgent = "Urgent"
        case critical = "Critical"
        case emergency = "Emergency"
        case installation = "Installation"
        case utilities = "Utilities"
        case renovation = "Renovation"
        case sanitation = "Sanitation"
    }
    
    public enum TaskRecurrence: String, Codable, CaseIterable {
        case none = "None"
        case daily = "Daily"
        case weekly = "Weekly"
        case monthly = "Monthly"
        case quarterly = "Quarterly"
        case annually = "Annually"
    }
    
    public enum VerificationStatus: String, Codable, CaseIterable {
        case pending = "Pending"
        case approved = "Approved"
        case rejected = "Rejected"
        case needsReview = "Needs Review"
        case failed = "Failed"
        case requiresReview = "Requires Review"
    }
    
    public struct MaintenanceTask: Identifiable, Codable {
        public let id: String
        public let name: String
        public let description: String
        public let category: TaskCategory
        public let urgency: TaskUrgency
        public let recurrence: TaskRecurrence
        public let estimatedDuration: TimeInterval
        public let requiredSkills: [WorkerSkill]
        public let buildingId: String
        public let assignedWorkerId: String?
        public let scheduledDate: Date?
        public let completedDate: Date?
        public let isCompleted: Bool
        public let notes: String?
        public let verificationStatus: VerificationStatus
        
        public init(id: String = UUID().uuidString, name: String, description: String, category: TaskCategory, urgency: TaskUrgency, recurrence: TaskRecurrence = .none, estimatedDuration: TimeInterval, requiredSkills: [WorkerSkill] = [], buildingId: String, assignedWorkerId: String? = nil, scheduledDate: Date? = nil, completedDate: Date? = nil, isCompleted: Bool = false, notes: String? = nil, verificationStatus: VerificationStatus = .pending) {
            self.id = id
            self.name = name
            self.description = description
            self.category = category
            self.urgency = urgency
            self.recurrence = recurrence
            self.estimatedDuration = estimatedDuration
            self.requiredSkills = requiredSkills
            self.buildingId = buildingId
            self.assignedWorkerId = assignedWorkerId
            self.scheduledDate = scheduledDate
            self.completedDate = completedDate
            self.isCompleted = isCompleted
            self.notes = notes
            self.verificationStatus = verificationStatus
        }
    }
    
    // MARK: - Worker Models
    public enum WorkerSkill: String, Codable, CaseIterable {
        case plumbing = "Plumbing"
        case electrical = "Electrical"
        case hvac = "HVAC"
        case carpentry = "Carpentry"
        case painting = "Painting"
        case landscaping = "Landscaping"
        case security = "Security"
        case cleaning = "Cleaning"
        case general = "General Maintenance"
    }
    
    public enum UserRole: String, Codable, CaseIterable {
        case worker = "Worker"
        case supervisor = "Supervisor"
        case admin = "Admin"
        case manager = "Manager"
    }
    
    public struct WorkerProfile: Identifiable, Codable {
        public let id: String
        public let name: String
        public let email: String
        public let phoneNumber: String
        public let role: UserRole
        public let skills: [WorkerSkill]
        public let certifications: [String]
        public let hireDate: Date
        public let isActive: Bool
        public let profileImageUrl: String?
        
        public init(id: String = UUID().uuidString, name: String, email: String, phoneNumber: String, role: UserRole, skills: [WorkerSkill], certifications: [String] = [], hireDate: Date, isActive: Bool = true, profileImageUrl: String? = nil) {
            self.id = id
            self.name = name
            self.email = email
            self.phoneNumber = phoneNumber
            self.role = role
            self.skills = skills
            self.certifications = certifications
            self.hireDate = hireDate
            self.isActive = isActive
            self.profileImageUrl = profileImageUrl
        }
    }
    
    public struct WorkerAssignment: Identifiable, Codable {
        public let id: String
        public let workerId: String
        public let buildingId: String
        public let assignedDate: Date
        public let isActive: Bool
        
        public init(id: String = UUID().uuidString, workerId: String, buildingId: String, assignedDate: Date, isActive: Bool = true) {
            self.id = id
            self.workerId = workerId
            self.buildingId = buildingId
            self.assignedDate = assignedDate
            self.isActive = isActive
        }
    }
    
    // MARK: - Inventory Models
    public enum InventoryCategory: String, Codable, CaseIterable {
        case cleaningSupplies = "Cleaning Supplies"
        case tools = "Tools"
        case safety = "Safety Equipment"
        case maintenance = "Maintenance Parts"
        case office = "Office Supplies"
        case supplies = "Supplies"
        case cleaning = "Cleaning"
        case plumbing = "Plumbing"
        case electrical = "Electrical"
        case paint = "Paint"
    }
    
    public enum RestockStatus: String, Codable, CaseIterable {
        case inStock = "In Stock"
        case lowStock = "Low Stock"
        case outOfStock = "Out of Stock"
        case onOrder = "On Order"
    }
    
    public struct InventoryItem: Identifiable, Codable {
        public let id: String
        public let name: String
        public let description: String
        public let category: InventoryCategory
        public let currentStock: Int
        public let minimumStock: Int
        public let unit: String
        public let supplier: String
        public let costPerUnit: Double
        public let restockStatus: RestockStatus
        public let lastRestocked: Date?
        
        public init(id: String = UUID().uuidString, name: String, description: String, category: InventoryCategory, currentStock: Int, minimumStock: Int, unit: String, supplier: String, costPerUnit: Double, restockStatus: RestockStatus, lastRestocked: Date? = nil) {
            self.id = id
            self.name = name
            self.description = description
            self.category = category
            self.currentStock = currentStock
            self.minimumStock = minimumStock
            self.unit = unit
            self.supplier = supplier
            self.costPerUnit = costPerUnit
            self.restockStatus = restockStatus
            self.lastRestocked = lastRestocked
        }
    }
    
    // MARK: - Contextual Task Model
    public struct ContextualTask: Identifiable, Codable {
        public let id: String
        public let name: String
        public let description: String
        public let buildingId: String
        public let workerId: String
        public let category: TaskCategory
        public let urgency: TaskUrgency
        public let isCompleted: Bool
        public let dueDate: Date?
        public let estimatedDuration: TimeInterval
        public let status: String
        public let urgencyLevel: String
        
        public init(id: String = UUID().uuidString, name: String, description: String, buildingId: String, workerId: String, category: TaskCategory, urgency: TaskUrgency, isCompleted: Bool = false, dueDate: Date? = nil, estimatedDuration: TimeInterval = 3600) {
            self.id = id
            self.name = name
            self.description = description
            self.buildingId = buildingId
            self.workerId = workerId
            self.category = category
            self.urgency = urgency
            self.isCompleted = isCompleted
            self.dueDate = dueDate
            self.estimatedDuration = estimatedDuration
            self.status = isCompleted ? "completed" : "pending"
            self.urgencyLevel = urgency.rawValue
        }
    }
    
    // MARK: - Analytics and Performance Models
    public struct TaskProgress: Codable {
        public let completed: Int
        public let total: Int
        public let remaining: Int
        public let percentage: Double
        public let overdueTasks: Int
        
        public init(completed: Int, total: Int, remaining: Int, percentage: Double, overdueTasks: Int) {
            self.completed = completed
            self.total = total
            self.remaining = remaining
            self.percentage = percentage
            self.overdueTasks = overdueTasks
        }
    }
    
    public struct TaskEvidence: Codable {
        public let photos: [Data]
        public let timestamp: Date
        public let location: CLLocation?
        public let notes: String?
        
        public init(photos: [Data], timestamp: Date, location: CLLocation?, notes: String?) {
            self.photos = photos
            self.timestamp = timestamp
            self.location = location
            self.notes = notes
        }
    }
    
    public enum DataHealthStatus: String, Codable, CaseIterable {
        case healthy = "Healthy"
        case warning = "Warning"
        case critical = "Critical"
        case unknown = "Unknown"
    }
    
    public struct WeatherImpact: Codable {
        public let condition: WeatherCondition
        public let temperature: Double
        public let affectedTasks: [ContextualTask]
        public let recommendation: String
        
        public init(condition: WeatherCondition, temperature: Double, affectedTasks: [ContextualTask], recommendation: String) {
            self.condition = condition
            self.temperature = temperature
            self.affectedTasks = affectedTasks
            self.recommendation = recommendation
        }
    }
    
    // MARK: - AI and Optimization Models
    public struct AIScenario: Identifiable, Codable {
        public let id: String
        public let scenario: String
        
        public init(id: String = UUID().uuidString, scenario: String) {
            self.id = id
            self.scenario = scenario
        }
    }
    
    public struct AISuggestion: Identifiable, Codable {
        public let id: String
        public let suggestion: String
        
        public init(id: String = UUID().uuidString, suggestion: String) {
            self.id = id
            self.suggestion = suggestion
        }
    }
    
    public struct AIScenarioData: Codable {
        public let data: String
        
        public init(data: String) {
            self.data = data
        }
    }
    
    // MARK: - Building and Status Models
    public enum BuildingStatus: String, Codable, CaseIterable {
        case operational = "Operational"
        case maintenance = "Under Maintenance"
        case offline = "Offline"
        case emergency = "Emergency"
        case installation = "Installation"
        case utilities = "Utilities"
        case renovation = "Renovation"
        case sanitation = "Sanitation"
    }
    
    public struct BuildingInsight: Identifiable, Codable {
        public let id: String
        public let insight: String
        
        public init(id: String = UUID().uuidString, insight: String) {
            self.id = id
            self.insight = insight
        }
    }
    
    public enum BuildingTab: String, CaseIterable {
        case overview = "Overview"
        case tasks = "Tasks"
        case inventory = "Inventory"
        case history = "History"
    }
    
    public struct BuildingStatistics: Codable {
        public let totalTasks: Int
        public let completedTasks: Int
        public let pendingTasks: Int
        public let overdueTasks: Int
        
        public init(totalTasks: Int, completedTasks: Int, pendingTasks: Int, overdueTasks: Int) {
            self.totalTasks = totalTasks
            self.completedTasks = completedTasks
            self.pendingTasks = pendingTasks
            self.overdueTasks = overdueTasks
        }
    }
    
    // MARK: - Performance and Metrics Models
    public struct PerformanceMetrics: Codable {
        public let efficiency: Double
        public let completionRate: Double
        public let averageTime: TimeInterval
        
        public init(efficiency: Double, completionRate: Double, averageTime: TimeInterval) {
            self.efficiency = efficiency
            self.completionRate = completionRate
            self.averageTime = averageTime
        }
    }
    
    public struct TaskTrends: Codable {
        public let weeklyCompletion: [Double]
        public let categoryBreakdown: [String: Int]
        
        public init(weeklyCompletion: [Double], categoryBreakdown: [String: Int]) {
            self.weeklyCompletion = weeklyCompletion
            self.categoryBreakdown = categoryBreakdown
        }
    }
    
    public struct StreakData: Codable {
        public let currentStreak: Int
        public let longestStreak: Int
        public let streakType: String
        
        public init(currentStreak: Int, longestStreak: Int, streakType: String) {
            self.currentStreak = currentStreak
            self.longestStreak = longestStreak
            self.streakType = streakType
        }
    }
    
    public enum TrendDirection: String, Codable, CaseIterable {
        case up = "Up"
        case down = "Down"
        case stable = "Stable"
    }
    
    // MARK: - Record and History Models
    public struct MaintenanceRecord: Identifiable, Codable {
        public let id: String
        public let recordId: String
        
        public init(id: String = UUID().uuidString, recordId: String) {
            self.id = id
            self.recordId = recordId
        }
    }
    
    public struct TaskCompletionRecord: Identifiable, Codable {
        public let id: String
        public let completionId: String
        
        public init(id: String = UUID().uuidString, completionId: String) {
            self.id = id
            self.completionId = completionId
        }
    }
    
    // MARK: - Workflow and Route Models
    public struct WorkerRoutineSummary: Codable {
        public let summary: String
        
        public init(summary: String) {
            self.summary = summary
        }
    }
    
    public struct WorkerDailyRoute: Codable {
        public let route: [String]
        
        public init(route: [String]) {
            self.route = route
        }
    }
    
    public struct RouteOptimization: Codable {
        public let optimizedRoute: [String]
        public let estimatedTime: TimeInterval
        public let efficiencyGain: Double
        
        public init(optimizedRoute: [String], estimatedTime: TimeInterval, efficiencyGain: Double) {
            self.optimizedRoute = optimizedRoute
            self.estimatedTime = estimatedTime
            self.efficiencyGain = efficiencyGain
        }
    }
    
    public struct ScheduleConflict: Codable {
        public let conflictDescription: String
        
        public init(conflictDescription: String) {
            self.conflictDescription = conflictDescription
        }
    }
    
    public struct RouteStop: Codable {
        public let stopId: String
        
        public init(stopId: String) {
            self.stopId = stopId
        }
    }
    
    // MARK: - Import/Export Models
    public struct ExportProgress: Codable {
        public let progress: Double
        
        public init(progress: Double) {
            self.progress = progress
        }
    }
    
    public enum ImportError: LocalizedError {
        case noSQLiteManager
        case invalidData(String)
        
        public var errorDescription: String? {
            switch self {
            case .noSQLiteManager:
                return "SQLiteManager not initialized"
            case .invalidData(let message):
                return "Invalid data: \(message)"
            }
        }
    }
    
    public struct WorkerPerformanceMetrics: Codable {
        public let efficiency: Double
        public let tasksCompleted: Int
        public let averageCompletionTime: TimeInterval
        
        public init(efficiency: Double, tasksCompleted: Int, averageCompletionTime: TimeInterval) {
            self.efficiency = efficiency
            self.tasksCompleted = tasksCompleted
            self.averageCompletionTime = averageCompletionTime
        }
    }
}

// MARK: - Global Type Aliases
public typealias NamedCoordinate = FrancoSphere.NamedCoordinate
public typealias WeatherCondition = FrancoSphere.WeatherCondition
public typealias WeatherData = FrancoSphere.WeatherData
public typealias OutdoorWorkRisk = FrancoSphere.OutdoorWorkRisk
public typealias TaskCategory = FrancoSphere.TaskCategory
public typealias TaskUrgency = FrancoSphere.TaskUrgency
public typealias TaskRecurrence = FrancoSphere.TaskRecurrence
public typealias VerificationStatus = FrancoSphere.VerificationStatus
public typealias MaintenanceTask = FrancoSphere.MaintenanceTask
public typealias WorkerSkill = FrancoSphere.WorkerSkill
public typealias UserRole = FrancoSphere.UserRole
public typealias WorkerProfile = FrancoSphere.WorkerProfile
public typealias WorkerAssignment = FrancoSphere.WorkerAssignment
public typealias InventoryCategory = FrancoSphere.InventoryCategory
public typealias RestockStatus = FrancoSphere.RestockStatus
public typealias InventoryItem = FrancoSphere.InventoryItem
public typealias ContextualTask = FrancoSphere.ContextualTask
public typealias WorkerRoutineSummary = FrancoSphere.WorkerRoutineSummary
public typealias WorkerDailyRoute = FrancoSphere.WorkerDailyRoute
public typealias RouteOptimization = FrancoSphere.RouteOptimization
public typealias ScheduleConflict = FrancoSphere.ScheduleConflict
public typealias RouteStop = FrancoSphere.RouteStop
public typealias BuildingInsight = FrancoSphere.BuildingInsight
public typealias BuildingTab = FrancoSphere.BuildingTab
public typealias BuildingStatus = FrancoSphere.BuildingStatus
public typealias TaskTrends = FrancoSphere.TaskTrends
public typealias PerformanceMetrics = FrancoSphere.PerformanceMetrics
public typealias StreakData = FrancoSphere.StreakData
public typealias TrendDirection = FrancoSphere.TrendDirection
public typealias BuildingStatistics = FrancoSphere.BuildingStatistics
public typealias TaskEvidence = FrancoSphere.TaskEvidence
public typealias TaskProgress = FrancoSphere.TaskProgress
public typealias AIScenario = FrancoSphere.AIScenario
public typealias AISuggestion = FrancoSphere.AISuggestion
public typealias AIScenarioData = FrancoSphere.AIScenarioData
public typealias WeatherImpact = FrancoSphere.WeatherImpact
public typealias DataHealthStatus = FrancoSphere.DataHealthStatus
public typealias MaintenanceRecord = FrancoSphere.MaintenanceRecord
public typealias TaskCompletionRecord = FrancoSphere.TaskCompletionRecord
public typealias ExportProgress = FrancoSphere.ExportProgress
public typealias ImportError = FrancoSphere.ImportError
public typealias WorkerPerformanceMetrics = FrancoSphere.WorkerPerformanceMetrics

// Legacy compatibility
public typealias FSTaskItem = ContextualTask
public typealias DetailedWorker = WorkerProfile

// MARK: - Extensions for UI Compatibility
extension FrancoSphere.WeatherData {
    public var formattedTemperature: String {
        return "\(Int(temperature))Â°"
    }
}

extension FrancoSphere.TaskUrgency {
    public func lowercased() -> String {
        return self.rawValue.lowercased()
    }
}

extension FrancoSphere.VerificationStatus {
    public func lowercased() -> String {
        return self.rawValue.lowercased()
    }
}

extension FrancoSphere.TaskCategory {
    public func lowercased() -> String {
        return self.rawValue.lowercased()
    }
}

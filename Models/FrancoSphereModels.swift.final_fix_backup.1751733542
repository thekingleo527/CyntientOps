//
//  FrancoSphereModels.swift
//  FrancoSphere
//
//  Rebuilt model definitions
//

import Foundation
import CoreLocation
import SwiftUI

// MARK: - FrancoSphere Namespace
public enum FrancoSphere {
    
    // MARK: - Location Types
    public struct NamedCoordinate: Identifiable, Codable {
        public let id: String
        public let name: String
        
        public init(id: String, name: String, coordinate: CLLocationCoordinate2D) {
            self.id = id
            self.name = name
            self.coordinate = coordinate
        }
        
        public static func == (lhs: NamedCoordinate, rhs: NamedCoordinate) -> Bool {
            return lhs.id == rhs.id
        }
    }
    
    // MARK: - Weather Types
    public enum WeatherCondition: String, CaseIterable, Codable {
        case clear = "Clear"
        case cloudy = "Cloudy"
        case rainy = "Rainy"
        case snowy = "Snowy"
        case sunny = "Sunny"
        case foggy = "Foggy"
        case windy = "Windy"
        case stormy = "Stormy"
        case thunderstorm = "Thunderstorm"
        case rain = "Rain"
        case snow = "Snow"
        case storm = "Storm"
        case fog = "Fog"
        case other = "Other"
    }
    
    public struct WeatherData: Identifiable, Codable {
        public let id: String
        public let date: Date
        public let temperature: Double
        public let feelsLike: Double
        public let humidity: Double
        public let windSpeed: Double
        public let windDirection: String
        public let precipitation: Double
        public let snow: Double
        public let condition: WeatherCondition
        public let uvIndex: Int
        public let visibility: Double
        public let description: String
        
        // Compatibility properties
        public var timestamp: Date { date }
        public var formattedTemperature: String { String(format: "%.0fÂ°F", temperature) }
        
        public init(id: String = UUID().uuidString, date: Date, temperature: Double, feelsLike: Double, 
                   humidity: Double, windSpeed: Double, windDirection: String, precipitation: Double, 
                   snow: Double, condition: WeatherCondition, uvIndex: Int, visibility: Double, description: String) {
            self.id = id
            self.date = date
            self.temperature = temperature
            self.feelsLike = feelsLike
            self.humidity = humidity
            self.windSpeed = windSpeed
            self.windDirection = windDirection
            self.precipitation = precipitation
            self.snow = snow
            self.condition = condition
            self.uvIndex = uvIndex
            self.visibility = visibility
            self.description = description
        }
    }
    
    public enum OutdoorWorkRisk: String, CaseIterable, Codable {
        case low = "Low"
        case medium = "Medium"
        case high = "High"
        case extreme = "Extreme"
    }
    
    // MARK: - Task Types
    public enum TaskCategory: String, CaseIterable, Codable {
        case cleaning = "Cleaning"
        case maintenance = "Maintenance"
        case inspection = "Inspection"
        case repair = "Repair"
        case security = "Security"
        case landscaping = "Landscaping"
        case administrative = "Administrative"
        case emergency = "Emergency"
        case sanitation = "Sanitation"
    }
    
    public enum TaskUrgency: String, CaseIterable, Codable {
        case low = "Low"
        case medium = "Medium"
        case high = "High"
        case critical = "Critical"
        case urgent = "Urgent"
    }
    
    public enum TaskRecurrence: String, CaseIterable, Codable {
        case once = "Once"
        case daily = "Daily"
        case weekly = "Weekly"
        case monthly = "Monthly"
        case none = "None"
    }
    
    public enum VerificationStatus: String, Codable, CaseIterable {
        case pending = "Pending"
        case verified = "Verified"
        case approved = "Approved"
        case rejected = "Rejected"
        case failed = "Failed"
        case requiresReview = "Requires Review"
    }
    
    public struct MaintenanceTask: Identifiable, Codable {
        public let id: String
        public let buildingId: String
        public let title: String
        public let description: String
        public let category: TaskCategory
        public let urgency: TaskUrgency
        public let assignedWorkerIds: [String]
        public let estimatedDuration: TimeInterval
        public let scheduledDate: Date?
        public let dueDate: Date
        public let completedDate: Date?
        public let recurrence: TaskRecurrence
        public let requiredSkills: [String]
        public let notes: String?
        public let isCompleted: Bool
        
        // Compatibility properties
        public var name: String { title }
        public var buildingID: String { buildingId }
        public var isComplete: Bool { isCompleted }
        public var assignedWorkers: [String] { assignedWorkerIds }
        public var isPastDue: Bool { dueDate < Date() && !isCompleted }
        public var startTime: Date? { scheduledDate }
        public var endTime: Date? { completedDate }
        public var statusColor: Color { isCompleted ? .green : .orange }
        
        public init(id: String = UUID().uuidString, buildingId: String, title: String, description: String,
                   category: TaskCategory, urgency: TaskUrgency, assignedWorkerIds: [String] = [],
                   estimatedDuration: TimeInterval = 3600, scheduledDate: Date? = nil, dueDate: Date,
                   completedDate: Date? = nil, recurrence: TaskRecurrence = .once, 
                   requiredSkills: [String] = [], notes: String? = nil, isCompleted: Bool = false) {
            self.id = id
            self.buildingId = buildingId
            self.title = title
            self.description = description
            self.category = category
            self.urgency = urgency
            self.assignedWorkerIds = assignedWorkerIds
            self.estimatedDuration = estimatedDuration
            self.scheduledDate = scheduledDate
            self.dueDate = dueDate
            self.completedDate = completedDate
            self.recurrence = recurrence
            self.requiredSkills = requiredSkills
            self.notes = notes
            self.isCompleted = isCompleted
        }
    }
    
    // MARK: - Worker Types
    public enum WorkerSkill: String, CaseIterable, Codable {
        case basic = "Basic"
        case intermediate = "Intermediate"
        case advanced = "Advanced"
        case expert = "Expert"
        case maintenance = "Maintenance"
        case electrical = "Electrical"
        case plumbing = "Plumbing"
        case hvac = "HVAC"
        case painting = "Painting"
        case carpentry = "Carpentry"
        case landscaping = "Landscaping"
        case security = "Security"
        case specialized = "Specialized"
        case cleaning = "Cleaning"
        case repair = "Repair"
        case inspection = "Inspection"
        case sanitation = "Sanitation"
    }
    
    public enum UserRole: String, CaseIterable, Codable {
        case admin = "Admin"
        case supervisor = "Supervisor"
        case worker = "Worker"
        case client = "Client"
        case manager = "Manager"
    }
    
    public struct WorkerProfile: Identifiable, Codable {
        public let id: String
        public let name: String
        public let role: UserRole
        public let email: String?
        public let phone: String
        public let skills: [WorkerSkill]
        public let hourlyRate: Double
        public let isActive: Bool
        public let profileImagePath: String?
        public let address: String?
        public let emergencyContact: String?
        public let notes: String?
        public let shift: String?
        public let isOnSite: Bool
        
        // Compatibility methods
        public func getWorkerId() -> String { id }
        
        public init(id: String = UUID().uuidString, name: String, role: UserRole, email: String? = nil,
                   phone: String = "", skills: [WorkerSkill] = [], hourlyRate: Double = 25.0,
                   isActive: Bool = true, profileImagePath: String? = nil, address: String? = nil,
                   emergencyContact: String? = nil, notes: String? = nil, shift: String? = nil,
                   isOnSite: Bool = false) {
            self.id = id
            self.name = name
            self.role = role
            self.email = email
            self.phone = phone
            self.skills = skills
            self.hourlyRate = hourlyRate
            self.isActive = isActive
            self.profileImagePath = profileImagePath
            self.address = address
            self.emergencyContact = emergencyContact
            self.notes = notes
            self.shift = shift
            self.isOnSite = isOnSite
        }
    }
    
    public struct WorkerAssignment: Identifiable, Codable {
        public let id: String
        public let workerId: String
        public let buildingId: String
        public let startDate: Date
        public let endDate: Date?
        public let status: String
        
        // Compatibility properties
        public var workerName: String { workerId }
        
        public init(id: String = UUID().uuidString, workerId: String, buildingId: String,
                   startDate: Date, endDate: Date? = nil, status: String = "active") {
            self.id = id
            self.workerId = workerId
            self.buildingId = buildingId
            self.startDate = startDate
            self.endDate = endDate
            self.status = status
        }
    }
    
    // MARK: - Inventory Types
    public enum InventoryCategory: String, CaseIterable, Codable {
        case cleaning = "Cleaning"
        case maintenance = "Maintenance"
        case safety = "Safety"
        case office = "Office"
        case tools = "Tools"
        case paint = "Paint"
        case seasonal = "Seasonal"
        case other = "Other"
    }
    
    public enum RestockStatus: String, CaseIterable, Codable {
        case inStock = "In Stock"
        case lowStock = "Low Stock"
        case outOfStock = "Out of Stock"
        case onOrder = "On Order"
        case ordered = "Ordered"
    }
    
    public struct InventoryItem: Identifiable, Codable {
        public let id: String
        public let name: String
        public let description: String?
        public let category: InventoryCategory
        public let quantity: Int
        public let minQuantity: Int
        public let unit: String
        public let costPerUnit: Double?
        public let supplier: String?
        public let lastRestocked: Date
        public let status: RestockStatus
        
        // Compatibility properties
        public var minimumQuantity: Int { minQuantity }
        public var needsReorder: Bool { quantity <= minQuantity }
        
        public init(id: String = UUID().uuidString, name: String, description: String? = nil,
                   category: InventoryCategory, quantity: Int, minQuantity: Int, unit: String,
                   costPerUnit: Double? = nil, supplier: String? = nil, lastRestocked: Date,
                   status: RestockStatus) {
            self.id = id
            self.name = name
            self.description = description
            self.category = category
            self.quantity = quantity
            self.minQuantity = minQuantity
            self.unit = unit
            self.costPerUnit = costPerUnit
            self.supplier = supplier
            self.lastRestocked = lastRestocked
            self.status = status
        }
    }
    
    // MARK: - Contextual Task
    public struct ContextualTask: Identifiable, Codable {
        public let id: String
        public let task: MaintenanceTask
        public let location: NamedCoordinate
        public let weather: WeatherData?
        public let estimatedTravelTime: TimeInterval?
        public let priority: Int
        
        // Compatibility properties
        public var name: String { task.name }
        public var description: String { task.description }
        public var buildingId: String { task.buildingId }
        public var buildingName: String { location.name }
        public var workerId: String { task.assignedWorkerIds.first ?? "" }
        public var status: String { task.isCompleted ? "completed" : "pending" }
        public var category: String { task.category.rawValue }
        public var urgencyLevel: String { task.urgency.rawValue }
        public var assignedWorkerName: String { workerId }
        public var scheduledDate: Date? { task.scheduledDate }
        public var completedAt: Date? { task.completedDate }
        public var startTime: String { task.startTime?.formatted(date: .omitted, time: .shortened) ?? "09:00" }
        public var endTime: String { task.endTime?.formatted(date: .omitted, time: .shortened) ?? "10:00" }
        public var recurrence: String { task.recurrence.rawValue }
        public var skillLevel: String { task.requiredSkills.first ?? "basic" }
        public var isOverdue: Bool { task.isPastDue }
        public var isCompleted: Bool { task.isCompleted }
        
        public init(id: String = UUID().uuidString, task: MaintenanceTask, location: NamedCoordinate,
                   weather: WeatherData? = nil, estimatedTravelTime: TimeInterval? = nil, priority: Int = 1) {
            self.id = id
            self.task = task
            self.location = location
            self.weather = weather
            self.estimatedTravelTime = estimatedTravelTime
            self.priority = priority
        }
    }
    
    // MARK: - Supporting Types
    public enum TrendDirection: String, Codable, CaseIterable {
        case up = "Up"
        case down = "Down"
        case stable = "Stable"
    }
    
    public struct TaskTrends: Codable {
        public let weeklyCompletion: [Double]
        public let categoryBreakdown: [String: Int]
        public let changePercentage: Double
        public let comparisonPeriod: String
        public let trend: TrendDirection
        
        public init(weeklyCompletion: [Double], categoryBreakdown: [String: Int], 
                   changePercentage: Double, comparisonPeriod: String, trend: TrendDirection) {
            self.weeklyCompletion = weeklyCompletion
            self.categoryBreakdown = categoryBreakdown
            self.changePercentage = changePercentage
            self.comparisonPeriod = comparisonPeriod
            self.trend = trend
        }
    }
    
    public struct TaskProgress: Codable {
        public let completedTasks: Int
        public let totalTasks: Int
        public let completionPercentage: Double
        
        public var completed: Int { completedTasks }
        
        public init(completedTasks: Int, totalTasks: Int, completionPercentage: Double) {
            self.completedTasks = completedTasks
            self.totalTasks = totalTasks
            self.completionPercentage = completionPercentage
        }
    }
    
    // MARK: - Basic Supporting Types (Simple Codable structs)
    public struct WorkerRoutineSummary: Codable { public let id: String = UUID().uuidString }
    public struct WorkerDailyRoute: Codable { public let id: String = UUID().uuidString }
    public struct RouteOptimization: Codable { public let id: String = UUID().uuidString }
    public struct ScheduleConflict: Codable { public let id: String = UUID().uuidString }
    public struct RouteStop: Codable { public let id: String = UUID().uuidString; public let location: String = "" }
    public struct BuildingInsight: Codable { public let id: String = UUID().uuidString }
    public struct BuildingTab: Codable { public let id: String = UUID().uuidString public static var overview: BuildingTab { BuildingTab() };
        
        }
    public struct BuildingStatus: Codable { public let id: String = UUID().uuidString }
    public struct PerformanceMetrics: Codable { public let id: String = UUID().uuidString }
    public struct StreakData: Codable { public let id: String = UUID().uuidString }
    public struct BuildingStatistics: Codable { public let id: String = UUID().uuidString }
    public struct TaskEvidence: Codable { public let id: String = UUID().uuidString }
    public struct AIScenario: Codable { public let id: String = UUID().uuidString }
    public struct AISuggestion: Codable { public let id: String = UUID().uuidString }
    public struct AIScenarioData: Codable { public let id: String = UUID().uuidString; public let context: String = "" }
    public struct WeatherImpact: Codable { public let id: String = UUID().uuidString }
    public struct DataHealthStatus: Codable { public let id: String = UUID().uuidString public static var unknown: DataHealthStatus { DataHealthStatus() };
        
        }
    public struct MaintenanceRecord: Codable { public let id: String = UUID().uuidString }
    public struct TaskCompletionRecord: Codable { public let id: String = UUID().uuidString }
    public struct ExportProgress: Codable { public let id: String = UUID().uuidString }
    public struct ImportError: Codable { public let id: String = UUID().uuidString }
}

// MARK: - Type Aliases (FIXED REFERENCES)
public typealias NamedCoordinate = FrancoSphere.NamedCoordinate
public typealias WeatherCondition = FrancoSphere.WeatherCondition
public typealias WeatherData = FrancoSphere.WeatherData
public typealias OutdoorWorkRisk = FrancoSphere.OutdoorWorkRisk
public typealias TaskCategory = FrancoSphere.TaskCategory
public typealias TaskUrgency = FrancoSphere.TaskUrgency
public typealias TaskRecurrence = FrancoSphere.TaskRecurrence
public typealias VerificationStatus = FrancoSphere.VerificationStatus
public typealias MaintenanceTask = FrancoSphere.MaintenanceTask
public typealias WorkerSkill = FrancoSphere.WorkerSkill
public typealias UserRole = FrancoSphere.UserRole
public typealias WorkerProfile = FrancoSphere.WorkerProfile
public typealias WorkerAssignment = FrancoSphere.WorkerAssignment
public typealias InventoryCategory = FrancoSphere.InventoryCategory
public typealias RestockStatus = FrancoSphere.RestockStatus
public typealias InventoryItem = FrancoSphere.InventoryItem
public typealias ContextualTask = FrancoSphere.ContextualTask
    // public typealias TrendDirection = FrancoSphere.TrendDirection // Removed duplicate
public typealias TaskTrends = FrancoSphere.TaskTrends
public typealias TaskProgress = FrancoSphere.TaskProgress
public typealias WorkerRoutineSummary = FrancoSphere.WorkerRoutineSummary
public typealias WorkerDailyRoute = FrancoSphere.WorkerDailyRoute
public typealias RouteOptimization = FrancoSphere.RouteOptimization
public typealias ScheduleConflict = FrancoSphere.ScheduleConflict
public typealias RouteStop = FrancoSphere.RouteStop
public typealias BuildingInsight = FrancoSphere.BuildingInsight
public typealias BuildingTab = FrancoSphere.BuildingTab
public typealias BuildingStatus = FrancoSphere.BuildingStatus
public typealias PerformanceMetrics = FrancoSphere.PerformanceMetrics
public typealias StreakData = FrancoSphere.StreakData
public typealias BuildingStatistics = FrancoSphere.BuildingStatistics
public typealias TaskEvidence = FrancoSphere.TaskEvidence
public typealias AIScenario = FrancoSphere.AIScenario
public typealias AISuggestion = FrancoSphere.AISuggestion
public typealias AIScenarioData = FrancoSphere.AIScenarioData
public typealias WeatherImpact = FrancoSphere.WeatherImpact
public typealias DataHealthStatus = FrancoSphere.DataHealthStatus
public typealias MaintenanceRecord = FrancoSphere.MaintenanceRecord
public typealias TaskCompletionRecord = FrancoSphere.TaskCompletionRecord
public typealias ExportProgress = FrancoSphere.ExportProgress
public typealias ImportError = FrancoSphere.ImportError

//
//  FrancoSphereModels.swift
//  FrancoSphere
//
//  ðŸŽ¯ SINGLE SOURCE OF TRUTH for all types
//  âœ… Complete rebuild with all missing types
//

import Foundation
import SwiftUI
import CoreLocation

public enum FrancoSphere {
    
    // MARK: - Location Types
    public struct NamedCoordinate: Identifiable, Codable, Hashable {
        public let id: String
        public let name: String
        public let latitude: Double
        public let longitude: Double
        
        // Fixed: removed duplicate coordinate property
            CLLocationCoordinate2D(latitude: latitude, longitude: longitude)
        }
        
        public init(id: String, name: String, latitude: Double, longitude: Double) {
            self.id = id
            self.name = name
            self.latitude = latitude
            self.longitude = longitude
        }
    }
    
    // MARK: - Weather Types
    public enum WeatherCondition: String, Codable, CaseIterable {
        case sunny = "sunny"
        case clear = "clear"
        case cloudy = "cloudy"
        case rainy = "rainy"
        case rain = "rain"
        case snowy = "snowy"
        case snow = "snow"
        case foggy = "foggy"
        case fog = "fog"
        case stormy = "stormy"
        case storm = "storm"
        case windy = "windy"
    }
    
    public struct WeatherData: Codable, Hashable {
        public let condition: WeatherCondition
        public let temperature: Double
        public let humidity: Double
        public let windSpeed: Double
        public let description: String
        
        public init(condition: WeatherCondition, temperature: Double, humidity: Double, windSpeed: Double, description: String) {
            self.condition = condition
            self.temperature = temperature
            self.humidity = humidity
            self.windSpeed = windSpeed
            self.description = description
        }
    }
    
    public enum OutdoorWorkRisk: String, Codable, CaseIterable {
        case low = "low"
        case medium = "medium"
        case high = "high"
        case extreme = "extreme"
    }
    
    // MARK: - Task Types
    public enum TaskCategory: String, Codable, CaseIterable {
        case cleaning = "Cleaning"
        case maintenance = "Maintenance"
        case repair = "Repair"
        case inspection = "Inspection"
        case sanitation = "Sanitation"
    }
    
    public enum TaskUrgency: String, Codable, CaseIterable {
        case low = "Low"
        case medium = "Medium"
        case high = "High"
        case critical = "Critical"
        case urgent = "Urgent"
    }
    
    public enum TaskRecurrence: String, Codable, CaseIterable {
        case none = "None"
        case daily = "Daily"
        case weekly = "Weekly"
        case monthly = "Monthly"
    }
    
    public enum VerificationStatus: String, Codable, CaseIterable {
        case pending = "Pending"
        case approved = "Approved"
        case verified = "Verified"
        case rejected = "Rejected"
        case failed = "Failed"
        case requiresReview = "Requires Review"
    }
    
    public struct MaintenanceTask: Identifiable, Codable {
        public let id: String
        public let buildingId: String
        public let title: String
        public let description: String
        public let category: TaskCategory
        public let urgency: TaskUrgency
        public let dueDate: Date
        public let estimatedDuration: TimeInterval
        public let recurrence: TaskRecurrence
        public let requiredSkills: [String]
        public let verificationStatus: VerificationStatus
        public let assignedWorkerId: String?
        public let completedDate: Date?
        public let notes: String?
        
        public init(id: String = UUID().uuidString, buildingId: String, title: String, description: String, category: TaskCategory, urgency: TaskUrgency, dueDate: Date, estimatedDuration: TimeInterval = 3600, recurrence: TaskRecurrence = .none, requiredSkills: [String] = [], verificationStatus: VerificationStatus = .pending, assignedWorkerId: String? = nil, completedDate: Date? = nil, notes: String? = nil) {
            self.id = id
            self.buildingId = buildingId
            self.title = title
            self.description = description
            self.category = category
            self.urgency = urgency
            self.dueDate = dueDate
            self.estimatedDuration = estimatedDuration
            self.recurrence = recurrence
            self.requiredSkills = requiredSkills
            self.verificationStatus = verificationStatus
            self.assignedWorkerId = assignedWorkerId
            self.completedDate = completedDate
            self.notes = notes
        }
    }
    
    public struct ContextualTask: Identifiable, Codable {
        public let id: String
        public let name: String
        public let description: String
        public let buildingId: String
        public let workerId: String
        public let isCompleted: Bool
        public let dueDate: Date?
        
        public init(id: String = UUID().uuidString, name: String, description: String, buildingId: String, workerId: String, isCompleted: Bool = false, dueDate: Date? = nil) {
            self.id = id
            self.name = name
            self.description = description
            self.buildingId = buildingId
            self.workerId = workerId
            self.isCompleted = isCompleted
            self.dueDate = dueDate
        }
    }
    
    // MARK: - Worker Types
    public enum UserRole: String, Codable, CaseIterable {
        case admin = "Admin"
        case supervisor = "Supervisor"
        case worker = "Worker"
        case client = "Client"
    }
    
    public enum WorkerSkill: String, Codable, CaseIterable {
        case basic = "Basic"
        case intermediate = "Intermediate"
        case advanced = "Advanced"
        case expert = "Expert"
        case maintenance = "Maintenance"
        case electrical = "Electrical"
        case plumbing = "Plumbing"
        case hvac = "HVAC"
        case painting = "Painting"
        case carpentry = "Carpentry"
        case landscaping = "Landscaping"
        case security = "Security"
        case specialized = "Specialized"
        case cleaning = "Cleaning"
    }
    
    public struct WorkerProfile: Identifiable, Codable {
        public let id: String
        public let name: String
        public let email: String
        public let phone: String?
        public let role: UserRole
        public let skills: [WorkerSkill]
        public let hourlyRate: Double?
        public let isActive: Bool
        public let profileImagePath: String?
        public let address: String?
        public let emergencyContact: String?
        public let notes: String?
        
        public init(id: String, name: String, email: String, phone: String?, role: UserRole, skills: [WorkerSkill], hourlyRate: Double?, isActive: Bool, profileImagePath: String?, address: String?, emergencyContact: String?, notes: String?) {
            self.id = id
            self.name = name
            self.email = email
            self.phone = phone
            self.role = role
            self.skills = skills
            self.hourlyRate = hourlyRate
            self.isActive = isActive
            self.profileImagePath = profileImagePath
            self.address = address
            self.emergencyContact = emergencyContact
            self.notes = notes
        }
    }
    
    public struct WorkerAssignment: Identifiable, Codable {
        public let id: String
        public let workerId: String
        public let buildingId: String
        public let assignedDate: Date
        public let isActive: Bool
        
        public init(id: String = UUID().uuidString, workerId: String, buildingId: String, assignedDate: Date, isActive: Bool = true) {
            self.id = id
            self.workerId = workerId
            self.buildingId = buildingId
            self.assignedDate = assignedDate
            self.isActive = isActive
        }
    }
    
    // MARK: - Inventory Types
    public enum InventoryCategory: String, Codable, CaseIterable {
        case cleaning = "Cleaning"
        case tools = "Tools"
        case hardware = "Hardware"
        case electrical = "Electrical"
        case plumbing = "Plumbing"
        case safety = "Safety"
        case office = "Office"
        case supplies = "Supplies"
        case maintenance = "Maintenance"
        case paint = "Paint"
        case seasonal = "Seasonal"
        case other = "Other"
    }
    
    public enum RestockStatus: String, Codable, CaseIterable {
        case inStock = "In Stock"
        case lowStock = "Low Stock"
        case outOfStock = "Out of Stock"
        case onOrder = "On Order"
        case ordered = "Ordered"
        case inTransit = "In Transit"
        case delivered = "Delivered"
        case cancelled = "Cancelled"
    }
    
    public struct InventoryItem: Identifiable, Codable {
        public let id: String
        public let name: String
        public let description: String?
        public let category: InventoryCategory
        public let quantity: Int
        public let minimumQuantity: Int
        public let unit: String
        public let costPerUnit: Double?
        public let supplier: String?
        public let restockStatus: RestockStatus
        public let lastRestocked: Date?
        
        public init(id: String = UUID().uuidString, name: String, description: String?, category: InventoryCategory, quantity: Int, minimumQuantity: Int, unit: String, costPerUnit: Double?, supplier: String?, restockStatus: RestockStatus, lastRestocked: Date?) {
            self.id = id
            self.name = name
            self.description = description
            self.category = category
            self.quantity = quantity
            self.minimumQuantity = minimumQuantity
            self.unit = unit
            self.costPerUnit = costPerUnit
            self.supplier = supplier
            self.restockStatus = restockStatus
            self.lastRestocked = lastRestocked
        }
    }
    
    // MARK: - Progress and Analytics Types
    public enum TrendDirection: String, Codable, CaseIterable {
        case up = "up"
        case down = "down"
        case stable = "stable"
    }
    
    public struct TaskProgress: Codable, Hashable {
        public let completed: Int
        public let total: Int
        public let remaining: Int
        public let percentage: Double
        public let overdueTasks: Int
        
        public init(completed: Int, total: Int, remaining: Int, percentage: Double, overdueTasks: Int) {
            self.completed = completed
            self.total = total
            self.remaining = remaining
            self.percentage = percentage
            self.overdueTasks = overdueTasks
        }
    }
    
    public struct TaskTrends: Codable {
        public let direction: TrendDirection
        public let percentage: Double
        public let period: String
        
        public init(direction: TrendDirection, percentage: Double, period: String) {
            self.direction = direction
            self.percentage = percentage
            self.period = period
        }
    }
    
    public struct PerformanceMetrics: Codable {
        public let completionRate: Double
        public let averageTime: TimeInterval
        public let qualityScore: Double
        
        public init(completionRate: Double, averageTime: TimeInterval, qualityScore: Double) {
            self.completionRate = completionRate
            self.averageTime = averageTime
            self.qualityScore = qualityScore
        }
    }
    
    public struct StreakData: Codable {
        public let currentStreak: Int
        public let bestStreak: Int
        public let lastCompletionDate: Date?
        
        public init(currentStreak: Int, bestStreak: Int, lastCompletionDate: Date?) {
            self.currentStreak = currentStreak
            self.bestStreak = bestStreak
            self.lastCompletionDate = lastCompletionDate
        }
    }
    
    public struct BuildingStatistics: Codable {
        public let buildingId: String
        public let totalTasks: Int
        public let completedTasks: Int
        public let completionRate: Double
        public let averageTaskTime: TimeInterval
        public let lastUpdated: Date
        
        public init(buildingId: String, totalTasks: Int, completedTasks: Int, completionRate: Double, averageTaskTime: TimeInterval, lastUpdated: Date) {
            self.buildingId = buildingId
            self.totalTasks = totalTasks
            self.completedTasks = completedTasks
            self.completionRate = completionRate
            self.averageTaskTime = averageTaskTime
            self.lastUpdated = lastUpdated
        }
    }
    
    // MARK: - Building Types
    public enum BuildingStatus: String, Codable, CaseIterable {
        case active = "Active"
        case inactive = "Inactive"
        case maintenance = "Maintenance"
        case closed = "Closed"
    }
    
    public enum BuildingTab: String, Codable, CaseIterable {
        case overview = "Overview"
        case tasks = "Tasks"
        case workers = "Workers"
        case maintenance = "Maintenance"
    }
    
    public struct BuildingInsight: Identifiable, Codable {
        public let id: String
        public let buildingId: String
        public let title: String
        public let description: String
        public let priority: TaskUrgency
        public let actionRequired: Bool
        
        public init(id: String = UUID().uuidString, buildingId: String, title: String, description: String, priority: TaskUrgency, actionRequired: Bool) {
            self.id = id
            self.buildingId = buildingId
            self.title = title
            self.description = description
            self.priority = priority
            self.actionRequired = actionRequired
        }
    }
    
    // MARK: - Maintenance Types
    public struct MaintenanceRecord: Identifiable, Codable {
        public let id: String
        public let buildingId: String
        public let workerId: String
        public let taskId: String
        public let description: String
        public let completedDate: Date
        public let notes: String?
        
        public init(id: String = UUID().uuidString, buildingId: String, workerId: String, taskId: String, description: String, completedDate: Date, notes: String?) {
            self.id = id
            self.buildingId = buildingId
            self.workerId = workerId
            self.taskId = taskId
            self.description = description
            self.completedDate = completedDate
            self.notes = notes
        }
    }
    
    public struct TaskCompletionRecord: Identifiable, Codable {
        public let id: String
        public let taskId: String
        public let workerId: String
        public let completedAt: Date
        public let notes: String?
        
        public init(id: String = UUID().uuidString, taskId: String, workerId: String, completedAt: Date, notes: String?) {
            self.id = id
            self.taskId = taskId
            self.workerId = workerId
            self.completedAt = completedAt
            self.notes = notes
        }
    }
    
    public struct TaskEvidence: Identifiable, Codable, Hashable {
        public let id: String
        public let taskId: String
        public let photoURL: String?
        public let notes: String
        public let location: CLLocationCoordinate2D?
        public let timestamp: Date
        
        public init(id: String = UUID().uuidString, taskId: String, photoURL: String?, notes: String, location: CLLocationCoordinate2D?, timestamp: Date) {
            self.id = id
            self.taskId = taskId
            self.photoURL = photoURL
            self.notes = notes
            self.location = location
            self.timestamp = timestamp
        }
        
        // MARK: - Hashable & Equatable
        public func hash(into hasher: inout Hasher) {
            hasher.combine(id)
            hasher.combine(taskId)
            hasher.combine(timestamp)
        }
        
        public static func == (lhs: TaskEvidence, rhs: TaskEvidence) -> Bool {
            return lhs.id == rhs.id && lhs.taskId == rhs.taskId
        }
    }
        
        // Custom Codable implementation for CLLocationCoordinate2D
        private enum CodingKeys: String, CodingKey {
            case id, taskId, photoURL, notes, timestamp, latitude, longitude
        }
        
        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            id = try container.decode(String.self, forKey: .id)
            taskId = try container.decode(String.self, forKey: .taskId)
            photoURL = try container.decodeIfPresent(String.self, forKey: .photoURL)
            notes = try container.decode(String.self, forKey: .notes)
            timestamp = try container.decode(Date.self, forKey: .timestamp)
            
            if let lat = try container.decodeIfPresent(Double.self, forKey: .latitude),
               let lng = try container.decodeIfPresent(Double.self, forKey: .longitude) {
                location = CLLocationCoordinate2D(latitude: lat, longitude: lng)
            } else {
                location = nil
            }
        }
        
        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            try container.encode(id, forKey: .id)
            try container.encode(taskId, forKey: .taskId)
            try container.encodeIfPresent(photoURL, forKey: .photoURL)
            try container.encode(notes, forKey: .notes)
            try container.encode(timestamp, forKey: .timestamp)
            
            if let location = location {
                try container.encode(location.latitude, forKey: .latitude)
                try container.encode(location.longitude, forKey: .longitude)
            }
        }
    }
    
    // MARK: - Worker Routine Types
    public struct WorkerDailyRoute: Identifiable, Codable {
        public let id: String
        public let workerId: String
        public let date: Date
        public let stops: [RouteStop]
        public let estimatedDuration: TimeInterval
        
        public init(id: String = UUID().uuidString, workerId: String, date: Date, stops: [RouteStop], estimatedDuration: TimeInterval) {
            self.id = id
            self.workerId = workerId
            self.date = date
            self.stops = stops
            self.estimatedDuration = estimatedDuration
        }
    }
    
    public struct RouteStop: Identifiable, Codable {
        public let id: String
        public let buildingId: String
        public let location: String
        public let estimatedArrival: Date
        public let estimatedDeparture: Date
        public let tasks: [String]
        
        public init(id: String = UUID().uuidString, buildingId: String, location: String, estimatedArrival: Date, estimatedDeparture: Date, tasks: [String]) {
            self.id = id
            self.buildingId = buildingId
            self.location = location
            self.estimatedArrival = estimatedArrival
            self.estimatedDeparture = estimatedDeparture
            self.tasks = tasks
        }
    }
    
    public struct RouteOptimization: Codable {
        public let totalDistance: Double
        public let totalTime: TimeInterval
        public let optimizationScore: Double
        
        public init(totalDistance: Double, totalTime: TimeInterval, optimizationScore: Double) {
            self.totalDistance = totalDistance
            self.totalTime = totalTime
            self.optimizationScore = optimizationScore
        }
    }
    
    public struct ScheduleConflict: Identifiable, Codable {
        public let id: String
        public let workerId: String
        public let conflictType: String
        public let description: String
        public let suggestedResolution: String?
        
        public init(id: String = UUID().uuidString, workerId: String, conflictType: String, description: String, suggestedResolution: String?) {
            self.id = id
            self.workerId = workerId
            self.conflictType = conflictType
            self.description = description
            self.suggestedResolution = suggestedResolution
        }
    }
    
    public struct WorkerRoutineSummary: Identifiable, Codable {
        public let id: String
        public let workerId: String
        public let date: Date
        public let totalTasks: Int
        public let completedTasks: Int
        public let routeEfficiency: Double
        
        public init(id: String = UUID().uuidString, workerId: String, date: Date, totalTasks: Int, completedTasks: Int, routeEfficiency: Double) {
            self.id = id
            self.workerId = workerId
            self.date = date
            self.totalTasks = totalTasks
            self.completedTasks = completedTasks
            self.routeEfficiency = routeEfficiency
        }
    }
    
    // MARK: - Weather Impact Types
    public struct WeatherImpact: Codable {
        public let severity: OutdoorWorkRisk
        public let affectedTasks: [String]
        public let recommendations: [String]
        
        public init(severity: OutdoorWorkRisk, affectedTasks: [String], recommendations: [String]) {
            self.severity = severity
            self.affectedTasks = affectedTasks
            self.recommendations = recommendations
        }
    }
    
    // MARK: - Data Health Types
    public enum DataHealthStatus: Codable {
        case healthy
        case warning(String)
        case error(String)
        case unknown
        
        // Fixed: removed duplicate unknown
        
        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            let type = try container.decode(String.self, forKey: .type)
            
            switch type {
            case "healthy": self = .healthy
            case "warning":
                let message = try container.decode(String.self, forKey: .message)
                self = .warning(message)
            case "error":
                let message = try container.decode(String.self, forKey: .message)
                self = .error(message)
            case "unknown": self = .unknown
            default: self = .unknown
            }
        }
        
        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            
            switch self {
            case .healthy: try container.encode("healthy", forKey: .type)
            case .warning(let message):
                try container.encode("warning", forKey: .type)
                try container.encode(message, forKey: .message)
            case .error(let message):
                try container.encode("error", forKey: .type)
                try container.encode(message, forKey: .message)
            case .unknown: try container.encode("unknown", forKey: .type)
            }
        }
        
        private enum CodingKeys: String, CodingKey {
            case type, message
        }
    }
    
    // MARK: - Export/Import Types
    public struct ExportProgress: Codable {
        public let completed: Int
        public let total: Int
        public let percentage: Double
        
        public init(completed: Int, total: Int) {
            self.completed = completed
            self.total = total
            self.percentage = total > 0 ? Double(completed) / Double(total) * 100 : 0
        }
    }
    
    public enum ImportError: LocalizedError {
        case noSQLiteManager
        case invalidData(String)
        
        public var errorDescription: String? {
            switch self {
            case .noSQLiteManager:
                return "SQLiteManager not initialized"
            case .invalidData(let message):
                return "Invalid data: \(message)"
            }
        }
    }
}

// MARK: - Type Aliases (Single Source)
public typealias NamedCoordinate = FrancoSphere.NamedCoordinate
public typealias WeatherCondition = FrancoSphere.WeatherCondition
public typealias WeatherData = FrancoSphere.WeatherData
public typealias OutdoorWorkRisk = FrancoSphere.OutdoorWorkRisk
public typealias TaskCategory = FrancoSphere.TaskCategory
public typealias TaskUrgency = FrancoSphere.TaskUrgency
public typealias TaskRecurrence = FrancoSphere.TaskRecurrence
public typealias VerificationStatus = FrancoSphere.VerificationStatus
public typealias MaintenanceTask = FrancoSphere.MaintenanceTask
public typealias ContextualTask = FrancoSphere.ContextualTask
public typealias UserRole = FrancoSphere.UserRole
public typealias WorkerSkill = FrancoSphere.WorkerSkill
public typealias WorkerProfile = FrancoSphere.WorkerProfile
public typealias WorkerAssignment = FrancoSphere.WorkerAssignment
public typealias InventoryCategory = FrancoSphere.InventoryCategory
public typealias RestockStatus = FrancoSphere.RestockStatus
public typealias InventoryItem = FrancoSphere.InventoryItem
// Fixed: removed duplicate TrendDirection
public typealias TaskProgress = FrancoSphere.TaskProgress
public typealias TaskTrends = FrancoSphere.TaskTrends
public typealias PerformanceMetrics = FrancoSphere.PerformanceMetrics
public typealias StreakData = FrancoSphere.StreakData
public typealias BuildingStatistics = FrancoSphere.BuildingStatistics
public typealias BuildingStatus = FrancoSphere.BuildingStatus
public typealias BuildingTab = FrancoSphere.BuildingTab
public typealias BuildingInsight = FrancoSphere.BuildingInsight
public typealias MaintenanceRecord = FrancoSphere.MaintenanceRecord
public typealias TaskCompletionRecord = FrancoSphere.TaskCompletionRecord
public typealias TaskEvidence = FrancoSphere.TaskEvidence
public typealias WorkerDailyRoute = FrancoSphere.WorkerDailyRoute
public typealias RouteStop = FrancoSphere.RouteStop
public typealias RouteOptimization = FrancoSphere.RouteOptimization
public typealias ScheduleConflict = FrancoSphere.ScheduleConflict
public typealias WorkerRoutineSummary = FrancoSphere.WorkerRoutineSummary
public typealias WeatherImpact = FrancoSphere.WeatherImpact
public typealias DataHealthStatus = FrancoSphere.DataHealthStatus
public typealias ExportProgress = FrancoSphere.ExportProgress
public typealias ImportError = FrancoSphere.ImportError

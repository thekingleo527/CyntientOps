//
//  WorkerContextEngine.swift
//  FrancoSphere
//
//  ✅ CONVERTED TO ACTOR: Thread-safe worker context management
//  ✅ Removed @Published properties (incompatible with actors)
//  ✅ All methods are async for actor isolation
//

import Foundation
import CoreLocation
import Combine

public actor WorkerContextEngine {
    public static let shared = WorkerContextEngine()
    
    // MARK: - Private State (Actor-Isolated)
    private var currentWorker: WorkerProfile?
    private var assignedBuildings: [NamedCoordinate] = []
    private var todaysTasks: [ContextualTask] = []
    private var taskProgress: TaskProgress?
    private var clockInStatus: (isClockedIn: Bool, building: NamedCoordinate?) = (false, nil)
    
    // MARK: - Dependencies
    private let authManager = NewAuthManager.shared
    private let workerService = WorkerService.shared
    private let taskService = TaskService.shared
    private let buildingService = BuildingService.shared
    
    private init() {}
    
    // MARK: - Public API (All methods async)
    
    public func loadContext(for workerId: CoreTypes.WorkerID) async throws {
        print("🔄 Loading context for worker: \(workerId)")
        
        // Load REAL worker data from database
        async let profile = workerService.getWorkerProfile(for: workerId)
        async let buildings = buildingService.getBuildingsForWorker(workerId)
        async let tasks = taskService.getTasks(for: workerId, date: Date())
        async let progress = taskService.getTaskProgress(for: workerId)
        
        // Update state atomically
        self.currentWorker = try await profile
        self.assignedBuildings = try await buildings
        self.todaysTasks = try await tasks
        self.taskProgress = try await progress
        
        print("✅ Context loaded: \(self.assignedBuildings.count) buildings, \(self.todaysTasks.count) tasks")
    }
    
    // MARK: - Getter Methods (Replace @Published)
    
    public func getCurrentWorker() -> WorkerProfile? { currentWorker }
    public func getAssignedBuildings() -> [NamedCoordinate] { assignedBuildings }
    public func getTodaysTasks() -> [ContextualTask] { todaysTasks }
    public func getTaskProgress() -> TaskProgress? { taskProgress }
    public func isWorkerClockedIn() -> Bool { clockInStatus.isClockedIn }
    public func getCurrentBuilding() -> NamedCoordinate? { clockInStatus.building }
    
    // MARK: - Worker Information
    
    public func getWorkerId() -> String? { currentWorker?.id }
    public func getWorkerName() -> String { currentWorker?.name ?? "Unknown" }
    public func getWorkerRole() -> String { currentWorker?.role.rawValue ?? "worker" }
    public func getWorkerStatus() -> WorkerStatus {
        clockInStatus.isClockedIn ? .clockedIn : .available
    }
    
    // MARK: - Task Management
    
    public func recordTaskCompletion(
        workerId: CoreTypes.WorkerID,
        buildingId: CoreTypes.BuildingID,
        taskId: CoreTypes.TaskID,
        evidence: ActionEvidence
    ) async throws {
        print("📝 Recording task completion: \(taskId)")
        
        // Record to database
        try await taskService.completeTask(taskId, evidence: evidence)
        
        // Update local state
        if let index = todaysTasks.firstIndex(where: { $0.id == taskId }) {
            todaysTasks[index].isCompleted = true
            todaysTasks[index].completedDate = Date()
        }
        
        // Refresh progress
        self.taskProgress = try await taskService.getTaskProgress(for: workerId)
        
        print("✅ Task completed and progress updated")
    }
    
    public func addTask(_ task: ContextualTask) async throws {
        print("➕ Adding new task: \(task.title)")
        
        // Add to database
        try await taskService.createTask(task)
        
        // Update local state
        todaysTasks.append(task)
        
        // Refresh progress
        if let workerId = currentWorker?.id {
            self.taskProgress = try await taskService.getTaskProgress(for: workerId)
        }
    }
    
    // MARK: - Clock In/Out Management
    
    public func clockIn(at building: NamedCoordinate) async throws {
        guard let workerId = currentWorker?.id else {
            throw WorkerContextError.noCurrentWorker
        }
        
        print("🕐 Clocking in at: \(building.name)")
        
        // Update database
        try await ClockInManager.shared.clockIn(workerId: workerId, buildingId: building.id)
        
        // Update local state
        clockInStatus = (true, building)
        
        print("✅ Clocked in successfully")
    }
    
    public func clockOut() async throws {
        guard let workerId = currentWorker?.id else {
            throw WorkerContextError.noCurrentWorker
        }
        
        print("🕐 Clocking out...")
        
        // Update database
        try await ClockInManager.shared.clockOut(workerId: workerId)
        
        // Update local state
        clockInStatus = (false, nil)
        
        print("✅ Clocked out successfully")
    }
    
    // MARK: - Data Refresh
    
    public func refreshData() async throws {
        guard let workerId = currentWorker?.id else {
            throw WorkerContextError.noCurrentWorker
        }
        
        try await loadContext(for: workerId)
    }
    
    // MARK: - Legacy Compatibility Methods
    
    public func todayWorkers() -> [WorkerProfile] {
        // Return current worker as array for compatibility
        if let worker = currentWorker {
            return [worker]
        }
        return []
    }
    
    public func getUrgentTaskCount() -> Int {
        return todaysTasks.filter { $0.urgency == .high || $0.urgency == .critical }.count
    }
    
    public func getTasksForBuilding(_ buildingId: String) -> [ContextualTask] {
        return todaysTasks.filter { $0.buildingId == buildingId }
    }
}

// MARK: - Supporting Types

public enum WorkerStatus {
    case available, clockedIn, onBreak, offDuty
}

public enum WorkerContextError: Error {
    case noCurrentWorker
    case buildingNotFound
    case taskNotFound
    case clockInFailed(String)
    
    public var localizedDescription: String {
        switch self {
        case .noCurrentWorker:
            return "No current worker logged in"
        case .buildingNotFound:
            return "Building not found"
        case .taskNotFound:
            return "Task not found"
        case .clockInFailed(let reason):
            return "Clock in failed: \(reason)"
        }
    }
}
